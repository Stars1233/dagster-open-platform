# serializer version: 1
# name: test_assets_snapshot[True]
  list([
    '/staging/asset_checks',
    '/staging/assets',
    '/staging/external_repo_metadata',
    '/staging/jobs',
    '/staging/metadata',
    '/staging/partitions',
    '/staging/pipelines',
    '/staging/repo_metadata',
    '/staging/resources',
    '/staging/schedules',
    '/staging/sensors',
    'aws/cloud-prod/user_roles',
    'aws/cloud-prod/workspace_staging_asset_checks',
    'aws/cloud-prod/workspace_staging_assets',
    'aws/cloud-prod/workspace_staging_external_repo_metadata',
    'aws/cloud-prod/workspace_staging_jobs',
    'aws/cloud-prod/workspace_staging_metadata',
    'aws/cloud-prod/workspace_staging_partitions',
    'aws/cloud-prod/workspace_staging_pipelines',
    'aws/cloud-prod/workspace_staging_repo_metadata',
    'aws/cloud-prod/workspace_staging_resources',
    'aws/cloud-prod/workspace_staging_schedules',
    'aws/cloud-prod/workspace_staging_sensors',
    'aws/cloud_prod/user_roles_ext',
    'aws/cloud_prod/workspace_staging_asset_checks_ext',
    'aws/cloud_prod/workspace_staging_assets_ext',
    'aws/cloud_prod/workspace_staging_external_repo_metadata_ext',
    'aws/cloud_prod/workspace_staging_jobs_ext',
    'aws/cloud_prod/workspace_staging_metadata_ext',
    'aws/cloud_prod/workspace_staging_partitions_ext',
    'aws/cloud_prod/workspace_staging_pipelines_ext',
    'aws/cloud_prod/workspace_staging_repo_metadata_ext',
    'aws/cloud_prod/workspace_staging_resources_ext',
    'aws/cloud_prod/workspace_staging_schedules_ext',
    'aws/cloud_prod/workspace_staging_sensors_ext',
    'aws/dev/ext_common_room_activities',
    'aws/dev/ext_common_room_community_members',
    'aws/dev/ext_common_room_groups',
    'aws/dev/user_roles_ext',
    'aws/dev/workspace_staging_asset_checks_ext',
    'aws/dev/workspace_staging_assets_ext',
    'aws/dev/workspace_staging_external_repo_metadata_ext',
    'aws/dev/workspace_staging_jobs_ext',
    'aws/dev/workspace_staging_metadata_ext',
    'aws/dev/workspace_staging_partitions_ext',
    'aws/dev/workspace_staging_pipelines_ext',
    'aws/dev/workspace_staging_repo_metadata_ext',
    'aws/dev/workspace_staging_resources_ext',
    'aws/dev/workspace_staging_schedules_ext',
    'aws/dev/workspace_staging_sensors_ext',
    'aws/elementl/ext_common_room_activities',
    'aws/elementl/ext_common_room_community_members',
    'aws/elementl/ext_common_room_groups',
    'aws/elementl/stage_common_room_activities',
    'aws/elementl/stage_common_room_community_members',
    'aws/elementl/stage_common_room_groups',
    'aws/oss_telemetry/oss_telemetry_prod',
    'aws/oss_telemetry/oss_telemetry_prod_ext',
    'aws_cost_report',
    'buildkite_source_v2_pipelines',
    'dlt/hubspot/companies',
    'dlt/hubspot/deals',
    'dlt/hubspot/products',
    'dlt/hubspot/quotes',
    'dlt/hubspot/tickets',
    'dlt_buildkite_source_v2_builds',
    'dlt_buildkite_source_v2_pipelines',
    'dlt_github_reactions_issues',
    'dlt_github_reactions_stargazers',
    'dlt_pipelines_builds',
    'dlt_thinkific_course_reviews',
    'dlt_thinkific_courses',
    'dlt_thinkific_enrollments',
    'dlt_thinkific_users',
    'fivetran/bingads/account_history',
    'fivetran/bingads/ad_group_history',
    'fivetran/bingads/ad_group_performance_daily_report',
    'fivetran/bingads/ad_history',
    'fivetran/bingads/asset_group_attribute_history',
    'fivetran/bingads/asset_group_history',
    'fivetran/bingads/campaign_history',
    'fivetran/bingads/product_dimension_impression_performance_max_daily_report',
    'fivetran/bingads/product_dimension_impression_performance_max_hourly_report',
    'fivetran/bingads/product_dimension_performance_max_daily_report',
    'fivetran/bingads/product_dimension_performance_max_hourly_report',
    'fivetran/fivetran_metadata/account',
    'fivetran/fivetran_metadata/column_lineage',
    'fivetran/fivetran_metadata/connection',
    'fivetran/fivetran_metadata/connector',
    'fivetran/fivetran_metadata/connector_sdk_log',
    'fivetran/fivetran_metadata/connector_type',
    'fivetran/fivetran_metadata/credits_used',
    'fivetran/fivetran_metadata/destination',
    'fivetran/fivetran_metadata/destination_column_change_event',
    'fivetran/fivetran_metadata/destination_column_metadata',
    'fivetran/fivetran_metadata/destination_schema_change_event',
    'fivetran/fivetran_metadata/destination_schema_metadata',
    'fivetran/fivetran_metadata/destination_table_change_event',
    'fivetran/fivetran_metadata/destination_table_metadata',
    'fivetran/fivetran_metadata/incremental_mar',
    'fivetran/fivetran_metadata/log',
    'fivetran/fivetran_metadata/resource_membership',
    'fivetran/fivetran_metadata/role',
    'fivetran/fivetran_metadata/role_connector_type',
    'fivetran/fivetran_metadata/role_permission',
    'fivetran/fivetran_metadata/schema_lineage',
    'fivetran/fivetran_metadata/source_column_change_event',
    'fivetran/fivetran_metadata/source_column_metadata',
    'fivetran/fivetran_metadata/source_foreign_key_metadata',
    'fivetran/fivetran_metadata/source_schema_change_event',
    'fivetran/fivetran_metadata/source_schema_metadata',
    'fivetran/fivetran_metadata/source_table_change_event',
    'fivetran/fivetran_metadata/source_table_metadata',
    'fivetran/fivetran_metadata/table_lineage',
    'fivetran/fivetran_metadata/team',
    'fivetran/fivetran_metadata/team_membership',
    'fivetran/fivetran_metadata/transformation_runs',
    'fivetran/fivetran_metadata/usage_cost',
    'fivetran/fivetran_metadata/user',
    'fivetran/google_ads/account_stats',
    'fivetran/google_ads/ad_custom_parameter_history',
    'fivetran/google_ads/ad_group_bid_modifier_history',
    'fivetran/google_ads/ad_group_bidding_strategy_history',
    'fivetran/google_ads/ad_group_custom_parameter_history',
    'fivetran/google_ads/ad_group_history',
    'fivetran/google_ads/ad_group_label_history',
    'fivetran/google_ads/ad_group_stats',
    'fivetran/google_ads/ad_history',
    'fivetran/google_ads/ad_label_history',
    'fivetran/google_ads/ad_policy_topic_constraint_history',
    'fivetran/google_ads/ad_policy_topic_evidence_history',
    'fivetran/google_ads/ad_policy_topic_history',
    'fivetran/google_ads/ad_stats',
    'fivetran/google_ads/app_ad_history',
    'fivetran/google_ads/app_engagement_ad_history',
    'fivetran/google_ads/call_ad_history',
    'fivetran/google_ads/campaign_app_campaign_setting_history',
    'fivetran/google_ads/campaign_bid_modifier_history',
    'fivetran/google_ads/campaign_bidding_strategy_history',
    'fivetran/google_ads/campaign_budget_history',
    'fivetran/google_ads/campaign_dynamic_search_ads_setting_history',
    'fivetran/google_ads/campaign_geo_target_type_setting_history',
    'fivetran/google_ads/campaign_history',
    'fivetran/google_ads/campaign_hotel_setting_history',
    'fivetran/google_ads/campaign_label_history',
    'fivetran/google_ads/campaign_local_setting_history',
    'fivetran/google_ads/campaign_network_setting_history',
    'fivetran/google_ads/campaign_optimization_goal_setting_history',
    'fivetran/google_ads/campaign_real_time_bidding_setting_history',
    'fivetran/google_ads/campaign_shopping_setting_history',
    'fivetran/google_ads/campaign_stats',
    'fivetran/google_ads/campaign_targeting_setting_history',
    'fivetran/google_ads/campaign_tracking_setting_history',
    'fivetran/google_ads/demand_gen_carousel_ad_history',
    'fivetran/google_ads/demand_gen_multi_asset_ad_history',
    'fivetran/google_ads/demand_gen_product_ad_history',
    'fivetran/google_ads/display_upload_ad_history',
    'fivetran/google_ads/expanded_dynamic_search_ad_history',
    'fivetran/google_ads/expanded_text_ad_history',
    'fivetran/google_ads/hotel_ad_history',
    'fivetran/google_ads/image_ad_history',
    'fivetran/google_ads/lead_form_submission_data',
    'fivetran/google_ads/legacy_app_install_ad_history',
    'fivetran/google_ads/legacy_responsive_display_ad_history',
    'fivetran/google_ads/local_ad_history',
    'fivetran/google_ads/local_services_lead',
    'fivetran/google_ads/local_services_lead_conversations',
    'fivetran/google_ads/responsive_display_ad_history',
    'fivetran/google_ads/responsive_search_ad_history',
    'fivetran/google_ads/search_keyword_stats',
    'fivetran/google_ads/search_term_keyword_stats',
    'fivetran/google_ads/search_term_stats',
    'fivetran/google_ads/shopping_comparison_listing_ad_history',
    'fivetran/google_ads/shopping_product_ad_history',
    'fivetran/google_ads/shopping_smart_ad_history',
    'fivetran/google_ads/smart_campaign_ad_history',
    'fivetran/google_ads/text_ad_history',
    'fivetran/google_ads/video_ad_history',
    'fivetran/google_ads/video_responsive_ad_history',
    'fivetran/google_analytics_4/pages_path_report',
    'fivetran/google_analytics_4/pages_title_and_screen_class_report',
    'fivetran/google_analytics_4/properties',
    'fivetran/google_analytics_4/traffic_acquisition_session_default_channel_grouping_report',
    'fivetran/google_analytics_4/traffic_acquisition_session_source_medium_report',
    'fivetran/google_sheets/nb_sales_rep_quotas',
    'fivetran/google_sheets/sales_rep_quotas',
    'fivetran/hubspot/association_type',
    'fivetran/hubspot/company',
    'fivetran/hubspot/company_company',
    'fivetran/hubspot/contact',
    'fivetran/hubspot/contact_company',
    'fivetran/hubspot/contact_contact',
    'fivetran/hubspot/contact_form_submission',
    'fivetran/hubspot/form',
    'fivetran/hubspot/organizations',
    'fivetran/hubspot/organizations_to_company',
    'fivetran/hubspot/users',
    'fivetran/incidentio/action',
    'fivetran/incidentio/catalog_entry',
    'fivetran/incidentio/catalog_entry_aliases',
    'fivetran/incidentio/catalog_entry_attribute_array_value',
    'fivetran/incidentio/catalog_entry_attribute_value',
    'fivetran/incidentio/catalog_resource',
    'fivetran/incidentio/catalog_type',
    'fivetran/incidentio/catalog_type_annotation',
    'fivetran/incidentio/catalog_type_required_integration',
    'fivetran/incidentio/catalog_type_schema_attribute',
    'fivetran/incidentio/custom_field',
    'fivetran/incidentio/custom_field_option',
    'fivetran/incidentio/follow_up_incident',
    'fivetran/incidentio/identity_utility_role',
    'fivetran/incidentio/incident',
    'fivetran/incidentio/incident_attachment',
    'fivetran/incidentio/incident_custom_field_entry_value',
    'fivetran/incidentio/incident_role',
    'fivetran/incidentio/incident_role_assignment',
    'fivetran/incidentio/incident_status',
    'fivetran/incidentio/incident_timestamp',
    'fivetran/incidentio/incident_timestamp_value',
    'fivetran/incidentio/incident_type',
    'fivetran/incidentio/incident_update',
    'fivetran/incidentio/severity',
    'fivetran/incidentio/users',
    'fivetran/information_schema/columns',
    'fivetran/linear/attachment',
    'fivetran/linear/attachment_metadata',
    'fivetran/linear/comment',
    'fivetran/linear/cycle',
    'fivetran/linear/cycle_uncompleted_issue',
    'fivetran/linear/document',
    'fivetran/linear/external_user',
    'fivetran/linear/initiative',
    'fivetran/linear/initiative_history',
    'fivetran/linear/initiative_to_project',
    'fivetran/linear/integration',
    'fivetran/linear/issue',
    'fivetran/linear/issue_history',
    'fivetran/linear/issue_label',
    'fivetran/linear/issue_subscriber',
    'fivetran/linear/label',
    'fivetran/linear/label_children',
    'fivetran/linear/organization',
    'fivetran/linear/project',
    'fivetran/linear/project_member',
    'fivetran/linear/project_milestone',
    'fivetran/linear/project_status',
    'fivetran/linear/project_team',
    'fivetran/linear/project_update',
    'fivetran/linear/project_update_comment',
    'fivetran/linear/project_update_reaction',
    'fivetran/linear/roadmap',
    'fivetran/linear/roadmap_to_project',
    'fivetran/linear/team',
    'fivetran/linear/team_member',
    'fivetran/linear/team_membership',
    'fivetran/linear/team_project',
    'fivetran/linear/users',
    'fivetran/linear/workflow_state',
    'fivetran/linkedin_ads/account_history',
    'fivetran/linkedin_ads/account_user_history',
    'fivetran/linkedin_ads/ad_analytics_by_campaign',
    'fivetran/linkedin_ads/ad_analytics_by_creative',
    'fivetran/linkedin_ads/campaign_group_history',
    'fivetran/linkedin_ads/campaign_history',
    'fivetran/linkedin_ads/creative_history',
    'fivetran/linkedin_ads/lead_form_response_multiple_choice_answers',
    'fivetran/linkedin_ads/sponsored_message_option',
    'fivetran/linkedin_company_pages/brand',
    'fivetran/linkedin_company_pages/brand_alternative_names',
    'fivetran/linkedin_company_pages/brand_followers_by_association_type',
    'fivetran/linkedin_company_pages/brand_followers_by_function',
    'fivetran/linkedin_company_pages/brand_followers_by_geo',
    'fivetran/linkedin_company_pages/brand_followers_by_geo_country',
    'fivetran/linkedin_company_pages/brand_followers_by_industry',
    'fivetran/linkedin_company_pages/brand_followers_by_seniority',
    'fivetran/linkedin_company_pages/brand_followers_by_staff_count_range',
    'fivetran/linkedin_company_pages/brand_industries',
    'fivetran/linkedin_company_pages/brand_localized_specialties',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_country',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_function',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_geo',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_geo_country',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_industry',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_region',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_seniority',
    'fivetran/linkedin_company_pages/brand_page_statistic_by_staff_count_range',
    'fivetran/linkedin_company_pages/brand_share',
    'fivetran/linkedin_company_pages/brand_time_bound_follower_statistic',
    'fivetran/linkedin_company_pages/brand_time_bound_page_statistic',
    'fivetran/linkedin_company_pages/brand_time_bound_share_statistic',
    'fivetran/linkedin_company_pages/brand_total_follower_statistic',
    'fivetran/linkedin_company_pages/brand_total_page_statistic',
    'fivetran/linkedin_company_pages/brand_total_share_statistic',
    'fivetran/linkedin_company_pages/brand_ugc_post',
    'fivetran/linkedin_company_pages/comment_history',
    'fivetran/linkedin_company_pages/comment_on_comment',
    'fivetran/linkedin_company_pages/comment_on_share',
    'fivetran/linkedin_company_pages/comment_on_ugc_post',
    'fivetran/linkedin_company_pages/comment_social_metadata_summary',
    'fivetran/linkedin_company_pages/country',
    'fivetran/linkedin_company_pages/followers_by_association_type',
    'fivetran/linkedin_company_pages/followers_by_function',
    'fivetran/linkedin_company_pages/followers_by_geo',
    'fivetran/linkedin_company_pages/followers_by_geo_country',
    'fivetran/linkedin_company_pages/followers_by_industry',
    'fivetran/linkedin_company_pages/followers_by_seniority',
    'fivetran/linkedin_company_pages/followers_by_staff_count_range',
    'fivetran/linkedin_company_pages/function',
    'fivetran/linkedin_company_pages/geo',
    'fivetran/linkedin_company_pages/industry',
    'fivetran/linkedin_company_pages/organization',
    'fivetran/linkedin_company_pages/organization_alternative_names',
    'fivetran/linkedin_company_pages/organization_followers_by_association_type',
    'fivetran/linkedin_company_pages/organization_followers_by_function',
    'fivetran/linkedin_company_pages/organization_followers_by_geo',
    'fivetran/linkedin_company_pages/organization_followers_by_geo_country',
    'fivetran/linkedin_company_pages/organization_followers_by_industry',
    'fivetran/linkedin_company_pages/organization_followers_by_seniority',
    'fivetran/linkedin_company_pages/organization_followers_by_staff_count_range',
    'fivetran/linkedin_company_pages/organization_groups',
    'fivetran/linkedin_company_pages/organization_industries',
    'fivetran/linkedin_company_pages/organization_localized_specialties',
    'fivetran/linkedin_company_pages/organization_locations',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_country',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_function',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_geo',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_geo_country',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_industry',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_region',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_seniority',
    'fivetran/linkedin_company_pages/organization_page_statistic_by_staff_count_range',
    'fivetran/linkedin_company_pages/organization_share',
    'fivetran/linkedin_company_pages/organization_time_bound_follower_statistic',
    'fivetran/linkedin_company_pages/organization_time_bound_page_statistic',
    'fivetran/linkedin_company_pages/organization_time_bound_share_statistic',
    'fivetran/linkedin_company_pages/organization_total_follower_statistic',
    'fivetran/linkedin_company_pages/organization_total_page_statistic',
    'fivetran/linkedin_company_pages/organization_total_share_statistic',
    'fivetran/linkedin_company_pages/organization_ugc_post',
    'fivetran/linkedin_company_pages/page_statistic_by_function',
    'fivetran/linkedin_company_pages/page_statistic_by_geo',
    'fivetran/linkedin_company_pages/page_statistic_by_geo_country',
    'fivetran/linkedin_company_pages/page_statistic_by_industry',
    'fivetran/linkedin_company_pages/page_statistic_by_seniority',
    'fivetran/linkedin_company_pages/page_statistic_by_staff_count_range',
    'fivetran/linkedin_company_pages/post_carousel_card',
    'fivetran/linkedin_company_pages/post_content',
    'fivetran/linkedin_company_pages/post_content_poll_option',
    'fivetran/linkedin_company_pages/post_distribution_target_industries',
    'fivetran/linkedin_company_pages/post_distribution_target_interface_locales',
    'fivetran/linkedin_company_pages/post_distribution_target_job_functions',
    'fivetran/linkedin_company_pages/post_distribution_target_locations',
    'fivetran/linkedin_company_pages/post_distribution_target_seniorities',
    'fivetran/linkedin_company_pages/post_distribution_target_staff_count_ranges',
    'fivetran/linkedin_company_pages/post_multi_image',
    'fivetran/linkedin_company_pages/region',
    'fivetran/linkedin_company_pages/seniority',
    'fivetran/linkedin_company_pages/share_carousel_card',
    'fivetran/linkedin_company_pages/share_content',
    'fivetran/linkedin_company_pages/share_content_poll_option',
    'fivetran/linkedin_company_pages/share_distribution_target_industries',
    'fivetran/linkedin_company_pages/share_distribution_target_interface_locales',
    'fivetran/linkedin_company_pages/share_distribution_target_job_functions',
    'fivetran/linkedin_company_pages/share_distribution_target_locations',
    'fivetran/linkedin_company_pages/share_distribution_target_seniorities',
    'fivetran/linkedin_company_pages/share_distribution_target_staff_count_ranges',
    'fivetran/linkedin_company_pages/share_history',
    'fivetran/linkedin_company_pages/share_multi_image',
    'fivetran/linkedin_company_pages/share_share_statistic',
    'fivetran/linkedin_company_pages/share_social_metadata_summary',
    'fivetran/linkedin_company_pages/share_statistic',
    'fivetran/linkedin_company_pages/social_metadata_summary',
    'fivetran/linkedin_company_pages/time_bound_follower_statistic',
    'fivetran/linkedin_company_pages/time_bound_page_statistic',
    'fivetran/linkedin_company_pages/time_bound_share_statistic',
    'fivetran/linkedin_company_pages/total_follower_statistic',
    'fivetran/linkedin_company_pages/total_page_statistic',
    'fivetran/linkedin_company_pages/total_share_statistic',
    'fivetran/linkedin_company_pages/ugc_post_history',
    'fivetran/linkedin_company_pages/ugc_post_share_statistic',
    'fivetran/linkedin_company_pages/ugc_post_social_metadata_summary',
    'fivetran/outreach/account',
    'fivetran/outreach/account_tag',
    'fivetran/outreach/active_step_mailing',
    'fivetran/outreach/active_step_task',
    'fivetran/outreach/data_connection',
    'fivetran/outreach/duty',
    'fivetran/outreach/email_address',
    'fivetran/outreach/event',
    'fivetran/outreach/mailing',
    'fivetran/outreach/mailing_recipient',
    'fivetran/outreach/mailing_reference',
    'fivetran/outreach/prospect',
    'fivetran/outreach/prospect_email',
    'fivetran/outreach/prospect_favorite',
    'fivetran/outreach/prospect_home_phone',
    'fivetran/outreach/prospect_mobile_phone',
    'fivetran/outreach/prospect_other_phone',
    'fivetran/outreach/prospect_tag',
    'fivetran/outreach/prospect_voip_phone',
    'fivetran/outreach/prospect_work_phone',
    'fivetran/outreach/sequence',
    'fivetran/outreach/sequence_state',
    'fivetran/outreach/sequence_step',
    'fivetran/outreach/sequence_tag',
    'fivetran/outreach/sequence_template',
    'fivetran/outreach/user_duty',
    'fivetran/outreach/user_email_recipients',
    'fivetran/outreach/user_team',
    'fivetran/outreach/users',
    'fivetran/reddit_ads/account_conversions_report',
    'fivetran/reddit_ads/account_report',
    'fivetran/reddit_ads/ad',
    'fivetran/reddit_ads/ad_conversions_report',
    'fivetran/reddit_ads/ad_group',
    'fivetran/reddit_ads/ad_group_conversions_report',
    'fivetran/reddit_ads/ad_group_report',
    'fivetran/reddit_ads/ad_report',
    'fivetran/reddit_ads/campaign',
    'fivetran/reddit_ads/campaign_report',
    'fivetran/reddit_ads/click_tracker',
    'fivetran/reddit_ads/pixel_partner_reference',
    'fivetran/reddit_ads/schedule',
    'fivetran/salesforce/account',
    'fivetran/salesforce/account_history',
    'fivetran/salesforce/account_ownership_c',
    'fivetran/salesforce/campaign',
    'fivetran/salesforce/campaign_member',
    'fivetran/salesforce/contact',
    'fivetran/salesforce/contract',
    'fivetran/salesforce/event',
    'fivetran/salesforce/leadfeederapp_website_visit_c',
    'fivetran/salesforce/opportunity',
    'fivetran/salesforce/opportunity_field_history',
    'fivetran/salesforce/opportunity_history',
    'fivetran/salesforce/opportunity_line_item',
    'fivetran/salesforce/organization_c',
    'fivetran/salesforce/partner',
    'fivetran/salesforce/product_2',
    'fivetran/salesforce/sales_cycle_c',
    'fivetran/salesforce/task',
    'fivetran/salesforce/user',
    'fivetran/salesforce/user_role',
    'fivetran/youtube_analytics/channel',
    'fivetran/youtube_analytics/channel_combined_a_2',
    'fivetran/youtube_analytics/playlist',
    'fivetran/youtube_analytics/playlist_combined_a_1',
    'fivetran/youtube_analytics/video',
    'fivetran/zoom/channel',
    'fivetran/zoom/meeting',
    'fivetran/zoom/meeting_participant',
    'fivetran/zoom/meeting_report',
    'fivetran/zoom/meeting_report_custom_key',
    'fivetran/zoom/meeting_report_tracking',
    'fivetran/zoom/user_custom_attribute',
    'fivetran/zoom/user_group',
    'fivetran/zoom/user_im_group',
    'fivetran/zoom/users',
    'fivetran/zoom/webinar',
    'fivetran/zoom/webinar_absentee',
    'fivetran/zoom/webinar_panelist',
    'fivetran/zoom/webinar_participant',
    'fivetran/zoom/webinar_poll',
    'fivetran/zoom/webinar_poll_question',
    'fivetran/zoom/webinar_poll_question_answer',
    'fivetran/zoom/webinar_poll_question_prompt',
    'fivetran/zoom/webinar_question_and_answer',
    'fivetran/zoom/webinar_question_and_answer_question',
    'fivetran/zoom/webinar_question_and_answer_question_detail',
    'fivetran/zoom/webinar_registrant',
    'fivetran/zoom/webinar_registrant_custom_question',
    'fivetran/zoom/webinar_report',
    'fivetran/zoom/webinar_report_custom_key',
    'fivetran/zoom/webinar_report_tracking',
    'fivetran/zoom/webinar_tracking_source',
    'github_issues',
    'github_reactions_issues',
    'github_reactions_stargazers',
    'gong/gong_data_cloud/call_recordings',
    'gong/gong_data_cloud/call_transcripts',
    'gong/gong_data_cloud/calls',
    'gong/gong_data_cloud/conversation_contexts',
    'gong/gong_data_cloud/conversation_participants',
    'gong/gong_data_cloud/conversations',
    'gong/gong_data_cloud/emails',
    'gong/gong_data_cloud/meetings',
    'gong/gong_data_cloud/users',
    'gong_calls_transcript_ai',
    'hightouch_cloud_users',
    'hightouch_null_contact_names',
    'hightouch_org_activity_monthly',
    'hightouch_sales_cycles',
    'hightouch_sync_hubspot_company',
    'hightouch_sync_hubspot_contact',
    'hightouch_sync_hubspot_organization',
    'hightouch_sync_salesforce_account',
    'hightouch_user_attribution',
    'hubspot_companies',
    'hubspot_deals',
    'hubspot_products',
    'hubspot_quotes',
    'hubspot_tickets',
    'inactive_snowflake_clones',
    'main/public/alert_policies',
    'main/public/alerts',
    'main/public/alerts_alert_policies_new',
    'main/public/asset_keys',
    'main/public/asset_materializations',
    'main/public/asset_observations',
    'main/public/catalog_views',
    'main/public/customer_info',
    'main/public/deployments',
    'main/public/event_logs_partitioned',
    'main/public/event_logs_view',
    'main/public/jobs',
    'main/public/notifications',
    'main/public/onboarding_checklist',
    'main/public/organizations',
    'main/public/permissions',
    'main/public/repository_locations_data',
    'main/public/run_tags',
    'main/public/runs',
    'main/public/serverless_agents',
    'main/public/session_tokens',
    'main/public/teams',
    'main/public/teams_permissions',
    'main/public/teams_users',
    'main/public/users',
    'main/public/users_organizations',
    'main/public/users_permissions',
    'org_performance_metrics',
    'pipelines_builds',
    'postgres/usage_metrics_daily_jobs_aggregated_reporting',
    'product_operations/insights/reporting_asset_materialization_metrics',
    'public/salesforce_contract_info',
    'purina/oss_analytics/dagster_pypi_downloads',
    'purina/prod_telemetry/oss_telemetry_events_raw',
    'pylon/pylon/pylon_issues',
    'sandbox//abm_activity_scoring',
    'sandbox//abm_company_activity',
    'sandbox//abm_company_intent_scores',
    'sandbox//abm_contact_activity',
    'sandbox//abm_contact_intent_scores',
    'sandbox//account_contract_activity',
    'sandbox//account_owner_changelog',
    'sandbox//account_source_changelog',
    'sandbox//accounts',
    'sandbox//accounts_by_day',
    'sandbox//ad_spend_by_day',
    'sandbox//adgroup_performance_by_date',
    'sandbox//arr_by_month',
    'sandbox//asset_check_executions',
    'sandbox//asset_event_metadata',
    'sandbox//asset_groups',
    'sandbox//attributed_conversions',
    'sandbox//base_graph_metrics',
    'sandbox//base_sales_cycles',
    'sandbox//base_step_metrics',
    'sandbox//bigquery_cost_metadata',
    'sandbox//bing_ad_group_stats',
    'sandbox//buildkite_builds',
    'sandbox//campaigns',
    'sandbox//cloud_product_alert_policies',
    'sandbox//cloud_product_alerts',
    'sandbox//cloud_product_asset_keys',
    'sandbox//cloud_product_asset_materializations',
    'sandbox//cloud_product_asset_observations',
    'sandbox//cloud_product_catalog_views',
    'sandbox//cloud_product_customer_info',
    'sandbox//cloud_product_deployments',
    'sandbox//cloud_product_event_logs',
    'sandbox//cloud_product_jobs',
    'sandbox//cloud_product_notifications',
    'sandbox//cloud_product_organizations',
    'sandbox//cloud_product_repository_locations_data',
    'sandbox//cloud_product_runs',
    'sandbox//cloud_product_session_tokens',
    'sandbox//cloud_product_teams_users',
    'sandbox//cloud_product_user_events_counts',
    'sandbox//cloud_product_user_organizations',
    'sandbox//cloud_product_user_roles',
    'sandbox//cloud_product_users',
    'sandbox//cloud_users',
    'sandbox//code_location_asset_checks',
    'sandbox//code_location_assets',
    'sandbox//code_location_external_repo_metadata',
    'sandbox//code_location_jobs',
    'sandbox//code_location_library_versions',
    'sandbox//code_location_metadata',
    'sandbox//code_location_partitions',
    'sandbox//code_location_pipelines',
    'sandbox//code_location_repo_metadata',
    'sandbox//code_location_resources',
    'sandbox//code_location_schedules',
    'sandbox//code_location_sensors',
    'sandbox//common_room_activities',
    'sandbox//common_room_community_members',
    'sandbox//common_room_groups',
    'sandbox//contacts',
    'sandbox//conversion_events',
    'sandbox//country_codes',
    'sandbox//credit_utilization',
    'sandbox//credit_utilization_forecast',
    'sandbox//current_credit_utilization',
    'sandbox//dagster_user_roles',
    'sandbox//deployment_insights_usage_daily',
    'sandbox//dim_accounts',
    'sandbox//dim_accounts_by_day',
    'sandbox//dim_campaigns',
    'sandbox//dim_contacts',
    'sandbox//dim_opportunities',
    'sandbox//dim_opportunities_by_day',
    'sandbox//dim_organizations',
    'sandbox//dim_segment_users',
    'sandbox//dim_users',
    'sandbox//education_course_reviews',
    'sandbox//education_courses',
    'sandbox//education_enrollments',
    'sandbox//education_users',
    'sandbox//education_web_attributed_conversions',
    'sandbox//event_score_mapping',
    'sandbox//excludable_email_domains',
    'sandbox//execution_time_metadata',
    'sandbox//fct_gong_meeting_participants',
    'sandbox//fct_gong_meetings',
    'sandbox//fct_outreach_mailings',
    'sandbox//fct_runs',
    'sandbox//fct_segment_cloud_page_visits',
    'sandbox//fct_segment_dagster_u_page_visits',
    'sandbox//fct_segment_docs_page_visits',
    'sandbox//fct_segment_web_page_visits',
    'sandbox//fct_steps',
    'sandbox//fct_zoom_webinar_registration',
    'sandbox//first_touch',
    'sandbox//first_user_web_session',
    'sandbox//form_fill_attribution',
    'sandbox//gong_conversation_participants',
    'sandbox//gong_conversations',
    'sandbox//gong_emails',
    'sandbox//gong_meetings',
    'sandbox//gong_users',
    'sandbox//google_ads_ad_group_stats',
    'sandbox//google_ads_ad_groups',
    'sandbox//google_ads_adgroup_stats',
    'sandbox//google_ads_campaign_stats',
    'sandbox//google_ads_campaigns',
    'sandbox//google_ads_campaigns_wo_ad_group_stats',
    'sandbox//google_analytics_page_report',
    'sandbox//google_analytics_traffic_session_default_group',
    'sandbox//google_analytics_traffic_session_source_medium_report',
    'sandbox//gtm_user_activity',
    'sandbox//gtm_user_attribution',
    'sandbox//gtm_user_lead_source',
    'sandbox//gtm_user_mappings',
    'sandbox//hubspot_companies',
    'sandbox//hubspot_contact_form_submissions',
    'sandbox//hubspot_contacts',
    'sandbox//hubspot_organizations',
    'sandbox//hubspot_source_drill_level_2_labels',
    'sandbox//insights_asset_materialization_metrics',
    'sandbox//instance_type_priority',
    'sandbox//int_sessionized_pageviews',
    'sandbox//int_sessions_aggregated',
    'sandbox//int_stripe_customer_invoices',
    'sandbox//int_users_stitched',
    'sandbox//linkedin_ads_daily_campaign',
    'sandbox//maps_alerts',
    'sandbox//maps_organizations',
    'sandbox//marketing_event_attendees',
    'sandbox//marketing_events',
    'sandbox//marketing_wbr_metrics_by_date',
    'sandbox//materialization_metadata',
    'sandbox//non_opportunity_stages',
    'sandbox//onboarding_events',
    'sandbox//opportunities',
    'sandbox//opportunities_by_campaign',
    'sandbox//opportunities_by_day',
    'sandbox//opportunity_fiscal_qtr_start_snapshots',
    'sandbox//opportunity_snapshots',
    'sandbox//opportunity_stages',
    'sandbox//opportunity_yield',
    'sandbox//org_activity_monthly',
    'sandbox//org_deployments_daily',
    'sandbox//org_info',
    'sandbox//organization_adoption_daily',
    'sandbox//organization_conversion_info',
    'sandbox//organization_library_versions',
    'sandbox//organization_library_versions_daily',
    'sandbox//organization_milestones',
    'sandbox//organization_usage_daily',
    'sandbox//organizations',
    'sandbox//organizations_by_day',
    'sandbox//oss_instance_events_daily',
    'sandbox//oss_instance_events_weekly',
    'sandbox//oss_instances_daily',
    'sandbox//outreach_accounts',
    'sandbox//outreach_events',
    'sandbox//outreach_mailings',
    'sandbox//outreach_prospects',
    'sandbox//outreach_sequences',
    'sandbox//product_engagement',
    'sandbox//pylon_issues',
    'sandbox//pypi_downloads_weekly',
    'sandbox//reddit_ads_ad_group_report',
    'sandbox//reddit_ads_ad_groups',
    'sandbox//reddit_ads_campaign_report',
    'sandbox//reddit_ads_campaigns',
    'sandbox//referrer_mapping',
    'sandbox//reporting_contract_info',
    'sandbox//sales_activities',
    'sandbox//sales_cycle_stage_activities',
    'sandbox//sales_cycle_stages',
    'sandbox//sales_cycles',
    'sandbox//salesforce_account_history',
    'sandbox//salesforce_accounts',
    'sandbox//salesforce_campaign_members',
    'sandbox//salesforce_campaigns',
    'sandbox//salesforce_contacts',
    'sandbox//salesforce_contracts',
    'sandbox//salesforce_events',
    'sandbox//salesforce_leaderfeeder_sessions',
    'sandbox//salesforce_opp_stage_mapping',
    'sandbox//salesforce_opportunities',
    'sandbox//salesforce_opportunity_history',
    'sandbox//salesforce_opportunity_line_item',
    'sandbox//salesforce_organizations',
    'sandbox//salesforce_partners',
    'sandbox//salesforce_tasks',
    'sandbox//salesforce_users',
    'sandbox//segment_cloud_identifies',
    'sandbox//segment_cloud_pages',
    'sandbox//segment_cloud_tracks',
    'sandbox//segment_cloud_users',
    'sandbox//segment_dagster_u_identifies',
    'sandbox//segment_dagster_u_pages',
    'sandbox//segment_dagster_u_sessions',
    'sandbox//segment_dagster_u_tracks',
    'sandbox//segment_dagster_u_users',
    'sandbox//segment_docs_pages',
    'sandbox//segment_web_hubspot_form_submits',
    'sandbox//segment_web_identifies',
    'sandbox//segment_web_pages',
    'sandbox//segment_web_sessions',
    'sandbox//self_serve_plan_type_monthly',
    'sandbox//self_serve_stripe_products',
    'sandbox//snapshot_hubspot_companies',
    'sandbox//snapshot_salesforce_accounts',
    'sandbox//snapshot_salesforce_opportunities',
    'sandbox//snowflake_cost_observation_metadata',
    'sandbox//statsig_user_activity_daily',
    'sandbox//stg_aws__code_location_asset_checks',
    'sandbox//stg_aws__code_location_assets',
    'sandbox//stg_aws__code_location_external_repo_metadata',
    'sandbox//stg_aws__code_location_jobs',
    'sandbox//stg_aws__code_location_metadata',
    'sandbox//stg_aws__code_location_partitions',
    'sandbox//stg_aws__code_location_pipelines',
    'sandbox//stg_aws__code_location_repo_metadata',
    'sandbox//stg_aws__code_location_resources',
    'sandbox//stg_aws__code_location_schedules',
    'sandbox//stg_aws__code_location_sensors',
    'sandbox//stg_aws__common_room_activities',
    'sandbox//stg_aws__common_room_community_members',
    'sandbox//stg_aws__common_room_groups',
    'sandbox//stg_aws__user_licensed_roles',
    'sandbox//stg_bing__ad_group_history',
    'sandbox//stg_bing__ad_group_performance_daily_report',
    'sandbox//stg_bing__campaign_history',
    'sandbox//stg_buildkite__builds',
    'sandbox//stg_cloud_product__alert_policies',
    'sandbox//stg_cloud_product__alerts',
    'sandbox//stg_cloud_product__alerts_alert_policies',
    'sandbox//stg_cloud_product__asset_keys',
    'sandbox//stg_cloud_product__asset_materializations',
    'sandbox//stg_cloud_product__asset_observations',
    'sandbox//stg_cloud_product__catalog_views',
    'sandbox//stg_cloud_product__customer_info',
    'sandbox//stg_cloud_product__deployments',
    'sandbox//stg_cloud_product__event_logs',
    'sandbox//stg_cloud_product__jobs',
    'sandbox//stg_cloud_product__notifications',
    'sandbox//stg_cloud_product__onboarding_checklist',
    'sandbox//stg_cloud_product__organizations',
    'sandbox//stg_cloud_product__permissions',
    'sandbox//stg_cloud_product__repository_locations_data',
    'sandbox//stg_cloud_product__run_tags',
    'sandbox//stg_cloud_product__runs',
    'sandbox//stg_cloud_product__session_tokens',
    'sandbox//stg_cloud_product__teams',
    'sandbox//stg_cloud_product__teams_permissions',
    'sandbox//stg_cloud_product__teams_users',
    'sandbox//stg_cloud_product__user_events_counts',
    'sandbox//stg_cloud_product__user_organizations',
    'sandbox//stg_cloud_product__users',
    'sandbox//stg_cloud_product__users_permissions',
    'sandbox//stg_gong__conversation_contexts',
    'sandbox//stg_gong__conversation_participants',
    'sandbox//stg_gong__conversations',
    'sandbox//stg_gong__emails',
    'sandbox//stg_gong__meetings',
    'sandbox//stg_gong__users',
    'sandbox//stg_google_ads__ad_group_stats',
    'sandbox//stg_google_ads__ad_groups',
    'sandbox//stg_google_ads__campaign_stats',
    'sandbox//stg_google_ads__campaigns',
    'sandbox//stg_google_analytics__page_report',
    'sandbox//stg_google_analytics__session_source_medium',
    'sandbox//stg_google_analytics__traffic_default_group',
    'sandbox//stg_google_sheets__nb_sales_rep_quotas',
    'sandbox//stg_google_sheets__sales_rep_quotas',
    'sandbox//stg_hubspot__company',
    'sandbox//stg_hubspot__contact_first_touch',
    'sandbox//stg_hubspot__contact_form_submissions',
    'sandbox//stg_hubspot__contact_lifecycle_changes',
    'sandbox//stg_hubspot__contact_web_touches',
    'sandbox//stg_hubspot__contacts',
    'sandbox//stg_hubspot__forms',
    'sandbox//stg_hubspot__organization',
    'sandbox//stg_insights__asset_materialization_metrics',
    'sandbox//stg_linkedin__ad_analytics_by_campaign',
    'sandbox//stg_linkedin__campaign_history',
    'sandbox//stg_outreach__account',
    'sandbox//stg_outreach__data_connection',
    'sandbox//stg_outreach__email_address',
    'sandbox//stg_outreach__event',
    'sandbox//stg_outreach__mailing',
    'sandbox//stg_outreach__prospect',
    'sandbox//stg_outreach__sequence',
    'sandbox//stg_pylon__pylon_issues',
    'sandbox//stg_pypi__weekly_downloads',
    'sandbox//stg_reddit_ads__ad_group',
    'sandbox//stg_reddit_ads__ad_group_report',
    'sandbox//stg_reddit_ads__campaign',
    'sandbox//stg_reddit_ads__campaign_report',
    'sandbox//stg_salesforce__account_history',
    'sandbox//stg_salesforce__accounts',
    'sandbox//stg_salesforce__campaign_members',
    'sandbox//stg_salesforce__campaigns',
    'sandbox//stg_salesforce__contacts',
    'sandbox//stg_salesforce__contracts',
    'sandbox//stg_salesforce__events',
    'sandbox//stg_salesforce__leadfeederapp_website_visit_c',
    'sandbox//stg_salesforce__opportunities',
    'sandbox//stg_salesforce__opportunity_history',
    'sandbox//stg_salesforce__opportunity_line_item',
    'sandbox//stg_salesforce__organizations',
    'sandbox//stg_salesforce__partners',
    'sandbox//stg_salesforce__product2',
    'sandbox//stg_salesforce__tasks',
    'sandbox//stg_salesforce__user_roles',
    'sandbox//stg_salesforce__users',
    'sandbox//stg_scout__queries',
    'sandbox//stg_segment_cloud__identifies',
    'sandbox//stg_segment_cloud__pages',
    'sandbox//stg_segment_cloud__tracks',
    'sandbox//stg_segment_cloud__trial_start',
    'sandbox//stg_segment_dagster_u__certificate_record_downloaded',
    'sandbox//stg_segment_dagster_u__course_landing_page',
    'sandbox//stg_segment_dagster_u__identifies',
    'sandbox//stg_segment_dagster_u__pages',
    'sandbox//stg_segment_dagster_u__quiz_start_page',
    'sandbox//stg_segment_dagster_u__signup',
    'sandbox//stg_segment_dagster_u__tracks',
    'sandbox//stg_segment_docs__pages',
    'sandbox//stg_segment_web__hubspot_form_submit',
    'sandbox//stg_segment_web__identifies',
    'sandbox//stg_segment_web__pages',
    'sandbox//stg_slack__member_metrics',
    'sandbox//stg_snapshot__hubspot_company',
    'sandbox//stg_snapshot__salesforce_account',
    'sandbox//stg_snapshot__salesforce_opportunities',
    'sandbox//stg_stripe__balance_transactions',
    'sandbox//stg_stripe__charges',
    'sandbox//stg_stripe__customers',
    'sandbox//stg_stripe__invoice_line_items',
    'sandbox//stg_stripe__invoices',
    'sandbox//stg_stripe__plans',
    'sandbox//stg_stripe__subscription_items',
    'sandbox//stg_stripe__subscription_schedule_phases',
    'sandbox//stg_stripe__subscription_schedules',
    'sandbox//stg_stripe__subscriptions',
    'sandbox//stg_stripe__subscriptions_metadata',
    'sandbox//stg_telemetry__events',
    'sandbox//stg_thinkific__course_reviews',
    'sandbox//stg_thinkific__courses',
    'sandbox//stg_thinkific__enrollments',
    'sandbox//stg_thinkific__users',
    'sandbox//stg_youtube__channel',
    'sandbox//stg_youtube__channel_combined',
    'sandbox//stg_youtube__playlist',
    'sandbox//stg_youtube__playlist_combined',
    'sandbox//stg_youtube__video',
    'sandbox//stg_zoom__webinar',
    'sandbox//stg_zoom__webinar_absentee',
    'sandbox//stg_zoom__webinar_participant',
    'sandbox//stg_zoom__webinar_registrant',
    'sandbox//stripe_customers',
    'sandbox//stripe_invoices',
    'sandbox//stripe_subscriptions',
    'sandbox//sync_hubspot_company',
    'sandbox//sync_hubspot_contact',
    'sandbox//sync_hubspot_organization',
    'sandbox//sync_salesforce_account',
    'sandbox//telemetry_events',
    'sandbox//telemetry_example_map',
    'sandbox//time_spine',
    'sandbox//title_mappings',
    'sandbox//usage_metrics_daily',
    'sandbox//usage_metrics_daily_jobs_aggregated',
    'sandbox//user_activity_daily',
    'sandbox//user_attribution',
    'sandbox//user_attribution_dagster_u',
    'sandbox//user_organizations',
    'sandbox//web_attributed_conversions',
    'sandbox//website_visits_cloud',
    'sandbox//website_visits_dagster_university',
    'sandbox//website_visits_docs',
    'sandbox//website_visits_marketing',
    'sandbox//youtube_device_types',
    'sandbox//youtube_operating_system',
    'sandbox//youtube_playback_location_type',
    'sandbox//youtube_playlists',
    'sandbox//youtube_traffic_codes',
    'sandbox//youtube_video_views_overtime',
    'sandbox//youtube_videos',
    'sandbox//zoom_registrants',
    'sandbox//zoom_webinars',
    'sandbox/snapshots/arr_by_month_daily_snapshot',
    'sandbox/snapshots/deployments_snapshot',
    'sandbox/snapshots/hubspot_company_daily_snapshot',
    'sandbox/snapshots/hubspot_contact_daily_snapshot',
    'sandbox/snapshots/organizations_snapshot',
    'sandbox/snapshots/salesforce_accounts_daily_snapshot',
    'sandbox/snapshots/salesforce_opportunities_daily_snapshot',
    'sandbox/snapshots/user_organizations_snapshot',
    'scoutos_app_runs',
    'segment/dagster_cloud/accounts',
    'segment/dagster_cloud/identifies',
    'segment/dagster_cloud/pages',
    'segment/dagster_cloud/tracks',
    'segment/dagster_cloud/trial_start',
    'segment/dagster_cloud/users',
    'segment/dagster_docs/pages',
    'segment/dagster_io/hubspot_form_submit',
    'segment/dagster_io/identifies',
    'segment/dagster_io/pages',
    'segment/dagster_university/certificate_record_downloaded',
    'segment/dagster_university/course_landing_page',
    'segment/dagster_university/identifies',
    'segment/dagster_university/pages',
    'segment/dagster_university/quiz_start_page',
    'segment/dagster_university/signup',
    'segment/dagster_university/tracks',
    'segment/dagster_university/users',
    'segment/dagster_university/viewed_iframe',
    'shard1/public/alert_policies',
    'shard1/public/alerts',
    'shard1/public/asset_keys',
    'shard1/public/asset_materializations',
    'shard1/public/asset_observations',
    'shard1/public/event_logs_partitioned',
    'shard1/public/event_logs_view',
    'shard1/public/jobs',
    'shard1/public/notifications',
    'shard1/public/repository_locations_data',
    'shard1/public/run_tags',
    'shard1/public/runs',
    'slack/dagster/member_metrics',
    'sling/cloud_product/alert_policies',
    'sling/cloud_product/alerts',
    'sling/cloud_product/alerts_alert_policies_new',
    'sling/cloud_product/asset_keys',
    'sling/cloud_product/asset_materializations',
    'sling/cloud_product/asset_observations',
    'sling/cloud_product/catalog_views',
    'sling/cloud_product/customer_info',
    'sling/cloud_product/deployments',
    'sling/cloud_product/event_logs',
    'sling/cloud_product/jobs',
    'sling/cloud_product/notifications',
    'sling/cloud_product/onboarding_checklist',
    'sling/cloud_product/organizations',
    'sling/cloud_product/permissions',
    'sling/cloud_product/repository_locations_data',
    'sling/cloud_product/run_tags',
    'sling/cloud_product/runs',
    'sling/cloud_product/serverless_agents',
    'sling/cloud_product/session_tokens',
    'sling/cloud_product/teams',
    'sling/cloud_product/teams_permissions',
    'sling/cloud_product/teams_users',
    'sling/cloud_product/user_events_counts',
    'sling/cloud_product/users',
    'sling/cloud_product/users_organizations',
    'sling/cloud_product/users_organizations_current_state_ids',
    'sling/cloud_product/users_permissions',
    'sling/cloud_product_shard1/alert_policies',
    'sling/cloud_product_shard1/alerts',
    'sling/cloud_product_shard1/asset_keys',
    'sling/cloud_product_shard1/asset_materializations',
    'sling/cloud_product_shard1/asset_observations',
    'sling/cloud_product_shard1/event_logs',
    'sling/cloud_product_shard1/jobs',
    'sling/cloud_product_shard1/notifications',
    'sling/cloud_product_shard1/repository_locations_data',
    'sling/cloud_product_shard1/run_tags',
    'sling/cloud_product_shard1/runs',
    'sling/cloud_product_shard1/user_events_counts',
    'stripe_pipeline/stripe/balance_transactions',
    'stripe_pipeline/stripe/charges',
    'stripe_pipeline/stripe/coupons',
    'stripe_pipeline/stripe/customers',
    'stripe_pipeline/stripe/invoice_line_items',
    'stripe_pipeline/stripe/invoices',
    'stripe_pipeline/stripe/plans',
    'stripe_pipeline/stripe/subscription_items',
    'stripe_pipeline/stripe/subscription_schedule_phases',
    'stripe_pipeline/stripe/subscription_schedules',
    'stripe_pipeline/stripe/subscriptions',
    'stripe_pipeline/stripe/subscriptions_metadata',
    'thinkific_courses',
    'thinkific_enrollments',
    'thinkific_users',
    'user_activity_metrics',
  ])
# ---
# name: test_assets_snapshot[True].1
  list([
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/asset_checks',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/asset_checks',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/assets',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/assets',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/external_repo_metadata',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/external_repo_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/jobs',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/jobs',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/metadata',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/partitions',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/partitions',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/pipelines',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/pipelines',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/repo_metadata',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/repo_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/resources',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/resources',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/schedules',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/schedules',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Assets for AWS workspace replication data',
      'group_name': 'aws',
      'key': '/staging/sensors',
      'metadata': dict({
        'aws_account': '',
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
        's3_location': 's3:///staging/sensors',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/user_roles',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'asset_checks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_asset_checks',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'assets',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_assets',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'external_repo_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_external_repo_metadata',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'jobs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_jobs',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_metadata',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'partitions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_partitions',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'pipelines',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_pipelines',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'repo_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_repo_metadata',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'resources',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_resources',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'schedules',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_schedules',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              '',
              'staging',
              'sensors',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake stages for AWS data, creates new stages for new assets, refreses existing stages.',
      'group_name': 'aws_stages',
      'key': 'aws/cloud-prod/workspace_staging_sensors',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'user_roles',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/user_roles_ext',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_asset_checks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_asset_checks_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_assets',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_assets_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_external_repo_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_external_repo_metadata_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_jobs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_jobs_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_metadata_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_partitions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_partitions_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_pipelines',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_pipelines_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_repo_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_repo_metadata_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_resources',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_resources_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_schedules',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_schedules_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'cloud-prod',
              'workspace_staging_sensors',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external tables for AWS data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/cloud_prod/workspace_staging_sensors_ext',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/ext_common_room_activities',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/ext_common_room_community_members',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/ext_common_room_groups',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/user_roles_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_asset_checks_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_assets_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_external_repo_metadata_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_jobs_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_metadata_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_partitions_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_pipelines_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_repo_metadata_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_resources_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_schedules_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'aws/dev/workspace_staging_sensors_ext',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'elementl',
              'stage_common_room_activities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external table for Common Room export data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/elementl/ext_common_room_activities',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'elementl',
              'stage_common_room_community_members',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external table for Common Room export data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/elementl/ext_common_room_community_members',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'elementl',
              'stage_common_room_groups',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external table for Common Room export data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/elementl/ext_common_room_groups',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Snowflake stages for Common Room export data.',
      'group_name': 'aws_stages',
      'key': 'aws/elementl/stage_common_room_activities',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Snowflake stages for Common Room export data.',
      'group_name': 'aws_stages',
      'key': 'aws/elementl/stage_common_room_community_members',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Snowflake stages for Common Room export data.',
      'group_name': 'aws_stages',
      'key': 'aws/elementl/stage_common_room_groups',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Snowflake stage for open source telemetry data.',
      'group_name': 'aws_stages',
      'key': 'aws/oss_telemetry/oss_telemetry_prod',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'oss_telemetry',
              'oss_telemetry_prod',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Snowflake external table for open source telemetry data.',
      'group_name': 'aws_external_tables',
      'key': 'aws/oss_telemetry/oss_telemetry_prod_ext',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        AWS updates the monthly cost report once an hour, overwriting the existing
        files for the current month.
      ''',
      'group_name': 'default',
      'key': 'aws_cost_report',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'buildkite_v2',
      'key': 'buildkite_source_v2_pipelines',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Hubspot companies resource.',
      'group_name': 'hubspot',
      'key': 'dlt/hubspot/companies',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'hubspot_deals',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Hubspot deals resource.',
      'group_name': 'hubspot',
      'key': 'dlt/hubspot/deals',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'hubspot_products',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Hubspot products resource.',
      'group_name': 'hubspot',
      'key': 'dlt/hubspot/products',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'hubspot_quotes',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Hubspot quotes resource.',
      'group_name': 'hubspot',
      'key': 'dlt/hubspot/quotes',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'hubspot_tickets',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Hubspot tickets resource.',
      'group_name': 'hubspot',
      'key': 'dlt/hubspot/tickets',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'buildkite_source_v2_pipelines',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'buildkite_v2',
      'key': 'dlt_buildkite_source_v2_builds',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'buildkite_source_v2_pipelines',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'buildkite_v2',
      'key': 'dlt_buildkite_source_v2_pipelines',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'github_reactions_issues',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'github',
      'key': 'dlt_github_reactions_issues',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'github_reactions_stargazers',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'github',
      'key': 'dlt_github_reactions_stargazers',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'pipelines_builds',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'buildkite',
      'key': 'dlt_pipelines_builds',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'thinkific_courses',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'thinkific',
      'key': 'dlt_thinkific_course_reviews',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'thinkific_courses',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'thinkific',
      'key': 'dlt_thinkific_courses',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'thinkific_enrollments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'thinkific',
      'key': 'dlt_thinkific_enrollments',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'thinkific_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'thinkific',
      'key': 'dlt_thinkific_users',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dlt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/account_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'account_history',
        'dagster/table_name': 'fivetran.bingads.account_history',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/ad_group_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'ad_group_history',
        'dagster/table_name': 'fivetran.bingads.ad_group_history',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/ad_group_performance_daily_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'ad_group_performance_daily_report',
        'dagster/table_name': 'fivetran.bingads.ad_group_performance_daily_report',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'ad_history',
        'dagster/table_name': 'fivetran.bingads.ad_history',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/asset_group_attribute_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'asset_group_attribute_history',
        'dagster/table_name': 'fivetran.bingads.asset_group_attribute_history',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/asset_group_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'asset_group_history',
        'dagster/table_name': 'fivetran.bingads.asset_group_history',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/campaign_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'campaign_history',
        'dagster/table_name': 'fivetran.bingads.campaign_history',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/product_dimension_impression_performance_max_daily_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'product_dimension_impression_performance_max_daily_report',
        'dagster/table_name': 'fivetran.bingads.product_dimension_impression_performance_max_daily_report',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/product_dimension_impression_performance_max_hourly_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'product_dimension_impression_performance_max_hourly_report',
        'dagster/table_name': 'fivetran.bingads.product_dimension_impression_performance_max_hourly_report',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/product_dimension_performance_max_daily_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'product_dimension_performance_max_daily_report',
        'dagster/table_name': 'fivetran.bingads.product_dimension_performance_max_daily_report',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_bingads',
      'key': 'fivetran/bingads/product_dimension_performance_max_hourly_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/bingads/bingads',
        ),
        'dagster-fivetran/connector_id': 'perkiness_parsley',
        'dagster-fivetran/destination_schema_name': 'bingads',
        'dagster-fivetran/destination_table_name': 'product_dimension_performance_max_hourly_report',
        'dagster/table_name': 'fivetran.bingads.product_dimension_performance_max_hourly_report',
        'group_name': 'fivetran_bingads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/account',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'account',
        'dagster/table_name': 'fivetran.fivetran_metadata.account',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/column_lineage',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'column_lineage',
        'dagster/table_name': 'fivetran.fivetran_metadata.column_lineage',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/connection',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'connection',
        'dagster/table_name': 'fivetran.fivetran_metadata.connection',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/connector',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'connector',
        'dagster/table_name': 'fivetran.fivetran_metadata.connector',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/connector_sdk_log',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'connector_sdk_log',
        'dagster/table_name': 'fivetran.fivetran_metadata.connector_sdk_log',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/connector_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'connector_type',
        'dagster/table_name': 'fivetran.fivetran_metadata.connector_type',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/credits_used',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'credits_used',
        'dagster/table_name': 'fivetran.fivetran_metadata.credits_used',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/destination',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'destination',
        'dagster/table_name': 'fivetran.fivetran_metadata.destination',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/destination_column_change_event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'destination_column_change_event',
        'dagster/table_name': 'fivetran.fivetran_metadata.destination_column_change_event',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/destination_column_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'destination_column_metadata',
        'dagster/table_name': 'fivetran.fivetran_metadata.destination_column_metadata',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/destination_schema_change_event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'destination_schema_change_event',
        'dagster/table_name': 'fivetran.fivetran_metadata.destination_schema_change_event',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/destination_schema_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'destination_schema_metadata',
        'dagster/table_name': 'fivetran.fivetran_metadata.destination_schema_metadata',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/destination_table_change_event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'destination_table_change_event',
        'dagster/table_name': 'fivetran.fivetran_metadata.destination_table_change_event',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/destination_table_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'destination_table_metadata',
        'dagster/table_name': 'fivetran.fivetran_metadata.destination_table_metadata',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/incremental_mar',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'incremental_mar',
        'dagster/table_name': 'fivetran.fivetran_metadata.incremental_mar',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/log',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'log',
        'dagster/table_name': 'fivetran.fivetran_metadata.log',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/resource_membership',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'resource_membership',
        'dagster/table_name': 'fivetran.fivetran_metadata.resource_membership',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/role',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'role',
        'dagster/table_name': 'fivetran.fivetran_metadata.role',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/role_connector_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'role_connector_type',
        'dagster/table_name': 'fivetran.fivetran_metadata.role_connector_type',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/role_permission',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'role_permission',
        'dagster/table_name': 'fivetran.fivetran_metadata.role_permission',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/schema_lineage',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'schema_lineage',
        'dagster/table_name': 'fivetran.fivetran_metadata.schema_lineage',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/source_column_change_event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'source_column_change_event',
        'dagster/table_name': 'fivetran.fivetran_metadata.source_column_change_event',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/source_column_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'source_column_metadata',
        'dagster/table_name': 'fivetran.fivetran_metadata.source_column_metadata',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/source_foreign_key_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'source_foreign_key_metadata',
        'dagster/table_name': 'fivetran.fivetran_metadata.source_foreign_key_metadata',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/source_schema_change_event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'source_schema_change_event',
        'dagster/table_name': 'fivetran.fivetran_metadata.source_schema_change_event',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/source_schema_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'source_schema_metadata',
        'dagster/table_name': 'fivetran.fivetran_metadata.source_schema_metadata',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/source_table_change_event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'source_table_change_event',
        'dagster/table_name': 'fivetran.fivetran_metadata.source_table_change_event',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/source_table_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'source_table_metadata',
        'dagster/table_name': 'fivetran.fivetran_metadata.source_table_metadata',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/table_lineage',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'table_lineage',
        'dagster/table_name': 'fivetran.fivetran_metadata.table_lineage',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/team',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'team',
        'dagster/table_name': 'fivetran.fivetran_metadata.team',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/team_membership',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'team_membership',
        'dagster/table_name': 'fivetran.fivetran_metadata.team_membership',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/transformation_runs',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'transformation_runs',
        'dagster/table_name': 'fivetran.fivetran_metadata.transformation_runs',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/usage_cost',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'usage_cost',
        'dagster/table_name': 'fivetran.fivetran_metadata.usage_cost',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_fivetran_metadata',
      'key': 'fivetran/fivetran_metadata/user',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/fivetran_log/fivetran_metadata',
        ),
        'dagster-fivetran/connector_id': 'aqueous_assessed',
        'dagster-fivetran/destination_schema_name': 'fivetran_metadata',
        'dagster-fivetran/destination_table_name': 'user',
        'dagster/table_name': 'fivetran.fivetran_metadata.user',
        'group_name': 'fivetran_fivetran_metadata',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/account_stats',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'account_stats',
        'dagster/table_name': 'fivetran.google_ads.account_stats',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_custom_parameter_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_custom_parameter_history',
        'dagster/table_name': 'fivetran.google_ads.ad_custom_parameter_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_group_bid_modifier_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_bid_modifier_history',
        'dagster/table_name': 'fivetran.google_ads.ad_group_bid_modifier_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_group_bidding_strategy_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_bidding_strategy_history',
        'dagster/table_name': 'fivetran.google_ads.ad_group_bidding_strategy_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_group_custom_parameter_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_custom_parameter_history',
        'dagster/table_name': 'fivetran.google_ads.ad_group_custom_parameter_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_group_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_history',
        'dagster/table_name': 'fivetran.google_ads.ad_group_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_group_label_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_label_history',
        'dagster/table_name': 'fivetran.google_ads.ad_group_label_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_group_stats',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_stats',
        'dagster/table_name': 'fivetran.google_ads.ad_group_stats',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_history',
        'dagster/table_name': 'fivetran.google_ads.ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_label_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_label_history',
        'dagster/table_name': 'fivetran.google_ads.ad_label_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_policy_topic_constraint_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_policy_topic_constraint_history',
        'dagster/table_name': 'fivetran.google_ads.ad_policy_topic_constraint_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_policy_topic_evidence_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_policy_topic_evidence_history',
        'dagster/table_name': 'fivetran.google_ads.ad_policy_topic_evidence_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_policy_topic_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_policy_topic_history',
        'dagster/table_name': 'fivetran.google_ads.ad_policy_topic_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/ad_stats',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'ad_stats',
        'dagster/table_name': 'fivetran.google_ads.ad_stats',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/app_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'app_ad_history',
        'dagster/table_name': 'fivetran.google_ads.app_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/app_engagement_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'app_engagement_ad_history',
        'dagster/table_name': 'fivetran.google_ads.app_engagement_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/call_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'call_ad_history',
        'dagster/table_name': 'fivetran.google_ads.call_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_app_campaign_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_app_campaign_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_app_campaign_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_bid_modifier_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_bid_modifier_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_bid_modifier_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_bidding_strategy_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_bidding_strategy_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_bidding_strategy_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_budget_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_budget_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_budget_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_dynamic_search_ads_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_dynamic_search_ads_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_dynamic_search_ads_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_geo_target_type_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_geo_target_type_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_geo_target_type_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_hotel_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_hotel_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_hotel_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_label_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_label_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_label_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_local_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_local_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_local_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_network_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_network_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_network_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_optimization_goal_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_optimization_goal_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_optimization_goal_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_real_time_bidding_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_real_time_bidding_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_real_time_bidding_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_shopping_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_shopping_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_shopping_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_stats',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_stats',
        'dagster/table_name': 'fivetran.google_ads.campaign_stats',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_targeting_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_targeting_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_targeting_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/campaign_tracking_setting_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'campaign_tracking_setting_history',
        'dagster/table_name': 'fivetran.google_ads.campaign_tracking_setting_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/demand_gen_carousel_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'demand_gen_carousel_ad_history',
        'dagster/table_name': 'fivetran.google_ads.demand_gen_carousel_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/demand_gen_multi_asset_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'demand_gen_multi_asset_ad_history',
        'dagster/table_name': 'fivetran.google_ads.demand_gen_multi_asset_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/demand_gen_product_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'demand_gen_product_ad_history',
        'dagster/table_name': 'fivetran.google_ads.demand_gen_product_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/display_upload_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'display_upload_ad_history',
        'dagster/table_name': 'fivetran.google_ads.display_upload_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/expanded_dynamic_search_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'expanded_dynamic_search_ad_history',
        'dagster/table_name': 'fivetran.google_ads.expanded_dynamic_search_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/expanded_text_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'expanded_text_ad_history',
        'dagster/table_name': 'fivetran.google_ads.expanded_text_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/hotel_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'hotel_ad_history',
        'dagster/table_name': 'fivetran.google_ads.hotel_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/image_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'image_ad_history',
        'dagster/table_name': 'fivetran.google_ads.image_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/lead_form_submission_data',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'lead_form_submission_data',
        'dagster/table_name': 'fivetran.google_ads.lead_form_submission_data',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/legacy_app_install_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'legacy_app_install_ad_history',
        'dagster/table_name': 'fivetran.google_ads.legacy_app_install_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/legacy_responsive_display_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'legacy_responsive_display_ad_history',
        'dagster/table_name': 'fivetran.google_ads.legacy_responsive_display_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/local_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'local_ad_history',
        'dagster/table_name': 'fivetran.google_ads.local_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/local_services_lead',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'local_services_lead',
        'dagster/table_name': 'fivetran.google_ads.local_services_lead',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/local_services_lead_conversations',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'local_services_lead_conversations',
        'dagster/table_name': 'fivetran.google_ads.local_services_lead_conversations',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/responsive_display_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'responsive_display_ad_history',
        'dagster/table_name': 'fivetran.google_ads.responsive_display_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/responsive_search_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'responsive_search_ad_history',
        'dagster/table_name': 'fivetran.google_ads.responsive_search_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/search_keyword_stats',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'search_keyword_stats',
        'dagster/table_name': 'fivetran.google_ads.search_keyword_stats',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/search_term_keyword_stats',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'search_term_keyword_stats',
        'dagster/table_name': 'fivetran.google_ads.search_term_keyword_stats',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/search_term_stats',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'search_term_stats',
        'dagster/table_name': 'fivetran.google_ads.search_term_stats',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/shopping_comparison_listing_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'shopping_comparison_listing_ad_history',
        'dagster/table_name': 'fivetran.google_ads.shopping_comparison_listing_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/shopping_product_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'shopping_product_ad_history',
        'dagster/table_name': 'fivetran.google_ads.shopping_product_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/shopping_smart_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'shopping_smart_ad_history',
        'dagster/table_name': 'fivetran.google_ads.shopping_smart_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/smart_campaign_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'smart_campaign_ad_history',
        'dagster/table_name': 'fivetran.google_ads.smart_campaign_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/text_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'text_ad_history',
        'dagster/table_name': 'fivetran.google_ads.text_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/video_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'video_ad_history',
        'dagster/table_name': 'fivetran.google_ads.video_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_ads',
      'key': 'fivetran/google_ads/video_responsive_ad_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_ads/google_ads',
        ),
        'dagster-fivetran/connector_id': 'flee_plea',
        'dagster-fivetran/destination_schema_name': 'google_ads',
        'dagster-fivetran/destination_table_name': 'video_responsive_ad_history',
        'dagster/table_name': 'fivetran.google_ads.video_responsive_ad_history',
        'group_name': 'fivetran_google_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_analytics_4',
      'key': 'fivetran/google_analytics_4/pages_path_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_analytics_4/google_analytics_4',
        ),
        'dagster-fivetran/connector_id': 'riot_native',
        'dagster-fivetran/destination_schema_name': 'google_analytics_4',
        'dagster-fivetran/destination_table_name': 'pages_path_report',
        'dagster/table_name': 'fivetran.google_analytics_4.pages_path_report',
        'group_name': 'fivetran_google_analytics_4',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_analytics_4',
      'key': 'fivetran/google_analytics_4/pages_title_and_screen_class_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_analytics_4/google_analytics_4',
        ),
        'dagster-fivetran/connector_id': 'riot_native',
        'dagster-fivetran/destination_schema_name': 'google_analytics_4',
        'dagster-fivetran/destination_table_name': 'pages_title_and_screen_class_report',
        'dagster/table_name': 'fivetran.google_analytics_4.pages_title_and_screen_class_report',
        'group_name': 'fivetran_google_analytics_4',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_analytics_4',
      'key': 'fivetran/google_analytics_4/properties',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_analytics_4/google_analytics_4',
        ),
        'dagster-fivetran/connector_id': 'riot_native',
        'dagster-fivetran/destination_schema_name': 'google_analytics_4',
        'dagster-fivetran/destination_table_name': 'properties',
        'dagster/table_name': 'fivetran.google_analytics_4.properties',
        'group_name': 'fivetran_google_analytics_4',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_analytics_4',
      'key': 'fivetran/google_analytics_4/traffic_acquisition_session_default_channel_grouping_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_analytics_4/google_analytics_4',
        ),
        'dagster-fivetran/connector_id': 'riot_native',
        'dagster-fivetran/destination_schema_name': 'google_analytics_4',
        'dagster-fivetran/destination_table_name': 'traffic_acquisition_session_default_channel_grouping_report',
        'dagster/table_name': 'fivetran.google_analytics_4.traffic_acquisition_session_default_channel_grouping_report',
        'group_name': 'fivetran_google_analytics_4',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_analytics_4',
      'key': 'fivetran/google_analytics_4/traffic_acquisition_session_source_medium_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_analytics_4/google_analytics_4',
        ),
        'dagster-fivetran/connector_id': 'riot_native',
        'dagster-fivetran/destination_schema_name': 'google_analytics_4',
        'dagster-fivetran/destination_table_name': 'traffic_acquisition_session_source_medium_report',
        'dagster/table_name': 'fivetran.google_analytics_4.traffic_acquisition_session_source_medium_report',
        'group_name': 'fivetran_google_analytics_4',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_sheets',
      'key': 'fivetran/google_sheets/nb_sales_rep_quotas',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_sheets/google_sheets.nb_sales_rep_quotas',
        ),
        'dagster-fivetran/connector_id': 'promotion_secretory',
        'dagster-fivetran/destination_schema_name': 'google_sheets',
        'dagster-fivetran/destination_table_name': 'nb_sales_rep_quotas',
        'dagster/table_name': 'fivetran.google_sheets.nb_sales_rep_quotas',
        'group_name': 'fivetran_google_sheets',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_google_sheets',
      'key': 'fivetran/google_sheets/sales_rep_quotas',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/google_sheets/google_sheets.sales_rep_quotas',
        ),
        'dagster-fivetran/connector_id': 'penpal_barricade',
        'dagster-fivetran/destination_schema_name': 'google_sheets',
        'dagster-fivetran/destination_table_name': 'sales_rep_quotas',
        'dagster/table_name': 'fivetran.google_sheets.sales_rep_quotas',
        'group_name': 'fivetran_google_sheets',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/association_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'association_type',
        'dagster/table_name': 'fivetran.hubspot.association_type',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/company',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'company',
        'dagster/table_name': 'fivetran.hubspot.company',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/company_company',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'company_company',
        'dagster/table_name': 'fivetran.hubspot.company_company',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/contact',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'contact',
        'dagster/table_name': 'fivetran.hubspot.contact',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/contact_company',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'contact_company',
        'dagster/table_name': 'fivetran.hubspot.contact_company',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/contact_contact',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'contact_contact',
        'dagster/table_name': 'fivetran.hubspot.contact_contact',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/contact_form_submission',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'contact_form_submission',
        'dagster/table_name': 'fivetran.hubspot.contact_form_submission',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/form',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'form',
        'dagster/table_name': 'fivetran.hubspot.form',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/organizations',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'organizations',
        'dagster/table_name': 'fivetran.hubspot.organizations',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/organizations_to_company',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'organizations_to_company',
        'dagster/table_name': 'fivetran.hubspot.organizations_to_company',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_hubspot',
      'key': 'fivetran/hubspot/users',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/hubspot/hubspot',
        ),
        'dagster-fivetran/connector_id': 'museum_odious',
        'dagster-fivetran/destination_schema_name': 'hubspot',
        'dagster-fivetran/destination_table_name': 'users',
        'dagster/table_name': 'fivetran.hubspot.users',
        'group_name': 'fivetran_hubspot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/action',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'action',
        'dagster/table_name': 'fivetran.incidentio.action',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_entry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_entry',
        'dagster/table_name': 'fivetran.incidentio.catalog_entry',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_entry_aliases',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_entry_aliases',
        'dagster/table_name': 'fivetran.incidentio.catalog_entry_aliases',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_entry_attribute_array_value',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_entry_attribute_array_value',
        'dagster/table_name': 'fivetran.incidentio.catalog_entry_attribute_array_value',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_entry_attribute_value',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_entry_attribute_value',
        'dagster/table_name': 'fivetran.incidentio.catalog_entry_attribute_value',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_resource',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_resource',
        'dagster/table_name': 'fivetran.incidentio.catalog_resource',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_type',
        'dagster/table_name': 'fivetran.incidentio.catalog_type',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_type_annotation',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_type_annotation',
        'dagster/table_name': 'fivetran.incidentio.catalog_type_annotation',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_type_required_integration',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_type_required_integration',
        'dagster/table_name': 'fivetran.incidentio.catalog_type_required_integration',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/catalog_type_schema_attribute',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'catalog_type_schema_attribute',
        'dagster/table_name': 'fivetran.incidentio.catalog_type_schema_attribute',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/custom_field',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'custom_field',
        'dagster/table_name': 'fivetran.incidentio.custom_field',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/custom_field_option',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'custom_field_option',
        'dagster/table_name': 'fivetran.incidentio.custom_field_option',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/follow_up_incident',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'follow_up_incident',
        'dagster/table_name': 'fivetran.incidentio.follow_up_incident',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/identity_utility_role',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'identity_utility_role',
        'dagster/table_name': 'fivetran.incidentio.identity_utility_role',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident',
        'dagster/table_name': 'fivetran.incidentio.incident',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_attachment',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_attachment',
        'dagster/table_name': 'fivetran.incidentio.incident_attachment',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_custom_field_entry_value',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_custom_field_entry_value',
        'dagster/table_name': 'fivetran.incidentio.incident_custom_field_entry_value',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_role',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_role',
        'dagster/table_name': 'fivetran.incidentio.incident_role',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_role_assignment',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_role_assignment',
        'dagster/table_name': 'fivetran.incidentio.incident_role_assignment',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_status',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_status',
        'dagster/table_name': 'fivetran.incidentio.incident_status',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_timestamp',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_timestamp',
        'dagster/table_name': 'fivetran.incidentio.incident_timestamp',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_timestamp_value',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_timestamp_value',
        'dagster/table_name': 'fivetran.incidentio.incident_timestamp_value',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_type',
        'dagster/table_name': 'fivetran.incidentio.incident_type',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/incident_update',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'incident_update',
        'dagster/table_name': 'fivetran.incidentio.incident_update',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/severity',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'severity',
        'dagster/table_name': 'fivetran.incidentio.severity',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_incidentio',
      'key': 'fivetran/incidentio/users',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/incidentio/incidentio',
        ),
        'dagster-fivetran/connector_id': 'contrast_mulberry',
        'dagster-fivetran/destination_schema_name': 'incidentio',
        'dagster-fivetran/destination_table_name': 'users',
        'dagster/table_name': 'fivetran.incidentio.users',
        'group_name': 'fivetran_incidentio',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'fivetran/information_schema/columns',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/attachment',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'attachment',
        'dagster/table_name': 'fivetran.linear.attachment',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/attachment_metadata',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'attachment_metadata',
        'dagster/table_name': 'fivetran.linear.attachment_metadata',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/comment',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'comment',
        'dagster/table_name': 'fivetran.linear.comment',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/cycle',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'cycle',
        'dagster/table_name': 'fivetran.linear.cycle',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/cycle_uncompleted_issue',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'cycle_uncompleted_issue',
        'dagster/table_name': 'fivetran.linear.cycle_uncompleted_issue',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/document',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'document',
        'dagster/table_name': 'fivetran.linear.document',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/external_user',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'external_user',
        'dagster/table_name': 'fivetran.linear.external_user',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/initiative',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'initiative',
        'dagster/table_name': 'fivetran.linear.initiative',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/initiative_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'initiative_history',
        'dagster/table_name': 'fivetran.linear.initiative_history',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/initiative_to_project',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'initiative_to_project',
        'dagster/table_name': 'fivetran.linear.initiative_to_project',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/integration',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'integration',
        'dagster/table_name': 'fivetran.linear.integration',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/issue',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'issue',
        'dagster/table_name': 'fivetran.linear.issue',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/issue_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'issue_history',
        'dagster/table_name': 'fivetran.linear.issue_history',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/issue_label',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'issue_label',
        'dagster/table_name': 'fivetran.linear.issue_label',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/issue_subscriber',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'issue_subscriber',
        'dagster/table_name': 'fivetran.linear.issue_subscriber',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/label',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'label',
        'dagster/table_name': 'fivetran.linear.label',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/label_children',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'label_children',
        'dagster/table_name': 'fivetran.linear.label_children',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/organization',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'organization',
        'dagster/table_name': 'fivetran.linear.organization',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project',
        'dagster/table_name': 'fivetran.linear.project',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project_member',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project_member',
        'dagster/table_name': 'fivetran.linear.project_member',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project_milestone',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project_milestone',
        'dagster/table_name': 'fivetran.linear.project_milestone',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project_status',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project_status',
        'dagster/table_name': 'fivetran.linear.project_status',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project_team',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project_team',
        'dagster/table_name': 'fivetran.linear.project_team',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project_update',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project_update',
        'dagster/table_name': 'fivetran.linear.project_update',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project_update_comment',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project_update_comment',
        'dagster/table_name': 'fivetran.linear.project_update_comment',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/project_update_reaction',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'project_update_reaction',
        'dagster/table_name': 'fivetran.linear.project_update_reaction',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/roadmap',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'roadmap',
        'dagster/table_name': 'fivetran.linear.roadmap',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/roadmap_to_project',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'roadmap_to_project',
        'dagster/table_name': 'fivetran.linear.roadmap_to_project',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/team',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'team',
        'dagster/table_name': 'fivetran.linear.team',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/team_member',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'team_member',
        'dagster/table_name': 'fivetran.linear.team_member',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/team_membership',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'team_membership',
        'dagster/table_name': 'fivetran.linear.team_membership',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/team_project',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'team_project',
        'dagster/table_name': 'fivetran.linear.team_project',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/users',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'users',
        'dagster/table_name': 'fivetran.linear.users',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linear',
      'key': 'fivetran/linear/workflow_state',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linear/linear',
        ),
        'dagster-fivetran/connector_id': 'zookeeper_intuitive',
        'dagster-fivetran/destination_schema_name': 'linear',
        'dagster-fivetran/destination_table_name': 'workflow_state',
        'dagster/table_name': 'fivetran.linear.workflow_state',
        'group_name': 'fivetran_linear',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/account_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'account_history',
        'dagster/table_name': 'fivetran.linkedin_ads.account_history',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/account_user_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'account_user_history',
        'dagster/table_name': 'fivetran.linkedin_ads.account_user_history',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/ad_analytics_by_campaign',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'ad_analytics_by_campaign',
        'dagster/table_name': 'fivetran.linkedin_ads.ad_analytics_by_campaign',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/ad_analytics_by_creative',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'ad_analytics_by_creative',
        'dagster/table_name': 'fivetran.linkedin_ads.ad_analytics_by_creative',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/campaign_group_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'campaign_group_history',
        'dagster/table_name': 'fivetran.linkedin_ads.campaign_group_history',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/campaign_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'campaign_history',
        'dagster/table_name': 'fivetran.linkedin_ads.campaign_history',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/creative_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'creative_history',
        'dagster/table_name': 'fivetran.linkedin_ads.creative_history',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/lead_form_response_multiple_choice_answers',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'lead_form_response_multiple_choice_answers',
        'dagster/table_name': 'fivetran.linkedin_ads.lead_form_response_multiple_choice_answers',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_ads',
      'key': 'fivetran/linkedin_ads/sponsored_message_option',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_ads/linkedin_ads',
        ),
        'dagster-fivetran/connector_id': 'sublimity_inoculated',
        'dagster-fivetran/destination_schema_name': 'linkedin_ads',
        'dagster-fivetran/destination_table_name': 'sponsored_message_option',
        'dagster/table_name': 'fivetran.linkedin_ads.sponsored_message_option',
        'group_name': 'fivetran_linkedin_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_alternative_names',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_alternative_names',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_alternative_names',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_followers_by_association_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_followers_by_association_type',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_followers_by_association_type',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_followers_by_function',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_followers_by_function',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_followers_by_function',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_followers_by_geo',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_followers_by_geo',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_followers_by_geo',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_followers_by_geo_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_followers_by_geo_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_followers_by_geo_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_followers_by_industry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_followers_by_industry',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_followers_by_industry',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_followers_by_seniority',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_followers_by_seniority',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_followers_by_seniority',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_followers_by_staff_count_range',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_followers_by_staff_count_range',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_followers_by_staff_count_range',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_industries',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_industries',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_industries',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_localized_specialties',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_localized_specialties',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_localized_specialties',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_function',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_function',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_function',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_geo',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_geo',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_geo',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_geo_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_geo_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_geo_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_industry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_industry',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_industry',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_region',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_region',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_region',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_seniority',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_seniority',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_seniority',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_page_statistic_by_staff_count_range',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_page_statistic_by_staff_count_range',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_page_statistic_by_staff_count_range',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_share',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_share',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_share',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_time_bound_follower_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_time_bound_follower_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_time_bound_follower_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_time_bound_page_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_time_bound_page_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_time_bound_page_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_time_bound_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_time_bound_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_time_bound_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_total_follower_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_total_follower_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_total_follower_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_total_page_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_total_page_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_total_page_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_total_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_total_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_total_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/brand_ugc_post',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'brand_ugc_post',
        'dagster/table_name': 'fivetran.linkedin_company_pages.brand_ugc_post',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/comment_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'comment_history',
        'dagster/table_name': 'fivetran.linkedin_company_pages.comment_history',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/comment_on_comment',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'comment_on_comment',
        'dagster/table_name': 'fivetran.linkedin_company_pages.comment_on_comment',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/comment_on_share',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'comment_on_share',
        'dagster/table_name': 'fivetran.linkedin_company_pages.comment_on_share',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/comment_on_ugc_post',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'comment_on_ugc_post',
        'dagster/table_name': 'fivetran.linkedin_company_pages.comment_on_ugc_post',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/comment_social_metadata_summary',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'comment_social_metadata_summary',
        'dagster/table_name': 'fivetran.linkedin_company_pages.comment_social_metadata_summary',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/followers_by_association_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'followers_by_association_type',
        'dagster/table_name': 'fivetran.linkedin_company_pages.followers_by_association_type',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/followers_by_function',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'followers_by_function',
        'dagster/table_name': 'fivetran.linkedin_company_pages.followers_by_function',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/followers_by_geo',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'followers_by_geo',
        'dagster/table_name': 'fivetran.linkedin_company_pages.followers_by_geo',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/followers_by_geo_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'followers_by_geo_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.followers_by_geo_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/followers_by_industry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'followers_by_industry',
        'dagster/table_name': 'fivetran.linkedin_company_pages.followers_by_industry',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/followers_by_seniority',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'followers_by_seniority',
        'dagster/table_name': 'fivetran.linkedin_company_pages.followers_by_seniority',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/followers_by_staff_count_range',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'followers_by_staff_count_range',
        'dagster/table_name': 'fivetran.linkedin_company_pages.followers_by_staff_count_range',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/function',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'function',
        'dagster/table_name': 'fivetran.linkedin_company_pages.function',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/geo',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'geo',
        'dagster/table_name': 'fivetran.linkedin_company_pages.geo',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/industry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'industry',
        'dagster/table_name': 'fivetran.linkedin_company_pages.industry',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_alternative_names',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_alternative_names',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_alternative_names',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_followers_by_association_type',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_followers_by_association_type',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_followers_by_association_type',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_followers_by_function',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_followers_by_function',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_followers_by_function',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_followers_by_geo',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_followers_by_geo',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_followers_by_geo',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_followers_by_geo_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_followers_by_geo_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_followers_by_geo_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_followers_by_industry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_followers_by_industry',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_followers_by_industry',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_followers_by_seniority',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_followers_by_seniority',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_followers_by_seniority',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_followers_by_staff_count_range',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_followers_by_staff_count_range',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_followers_by_staff_count_range',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_groups',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_groups',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_groups',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_industries',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_industries',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_industries',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_localized_specialties',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_localized_specialties',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_localized_specialties',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_locations',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_locations',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_locations',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_function',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_function',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_function',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_geo',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_geo',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_geo',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_geo_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_geo_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_geo_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_industry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_industry',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_industry',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_region',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_region',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_region',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_seniority',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_seniority',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_seniority',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_page_statistic_by_staff_count_range',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_page_statistic_by_staff_count_range',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_page_statistic_by_staff_count_range',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_share',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_share',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_share',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_time_bound_follower_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_time_bound_follower_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_time_bound_follower_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_time_bound_page_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_time_bound_page_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_time_bound_page_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_time_bound_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_time_bound_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_time_bound_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_total_follower_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_total_follower_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_total_follower_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_total_page_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_total_page_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_total_page_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_total_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_total_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_total_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/organization_ugc_post',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'organization_ugc_post',
        'dagster/table_name': 'fivetran.linkedin_company_pages.organization_ugc_post',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/page_statistic_by_function',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'page_statistic_by_function',
        'dagster/table_name': 'fivetran.linkedin_company_pages.page_statistic_by_function',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/page_statistic_by_geo',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'page_statistic_by_geo',
        'dagster/table_name': 'fivetran.linkedin_company_pages.page_statistic_by_geo',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/page_statistic_by_geo_country',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'page_statistic_by_geo_country',
        'dagster/table_name': 'fivetran.linkedin_company_pages.page_statistic_by_geo_country',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/page_statistic_by_industry',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'page_statistic_by_industry',
        'dagster/table_name': 'fivetran.linkedin_company_pages.page_statistic_by_industry',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/page_statistic_by_seniority',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'page_statistic_by_seniority',
        'dagster/table_name': 'fivetran.linkedin_company_pages.page_statistic_by_seniority',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/page_statistic_by_staff_count_range',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'page_statistic_by_staff_count_range',
        'dagster/table_name': 'fivetran.linkedin_company_pages.page_statistic_by_staff_count_range',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_carousel_card',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_carousel_card',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_carousel_card',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_content',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_content',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_content',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_content_poll_option',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_content_poll_option',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_content_poll_option',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_distribution_target_industries',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_distribution_target_industries',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_distribution_target_industries',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_distribution_target_interface_locales',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_distribution_target_interface_locales',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_distribution_target_interface_locales',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_distribution_target_job_functions',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_distribution_target_job_functions',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_distribution_target_job_functions',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_distribution_target_locations',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_distribution_target_locations',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_distribution_target_locations',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_distribution_target_seniorities',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_distribution_target_seniorities',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_distribution_target_seniorities',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_distribution_target_staff_count_ranges',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_distribution_target_staff_count_ranges',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_distribution_target_staff_count_ranges',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/post_multi_image',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'post_multi_image',
        'dagster/table_name': 'fivetran.linkedin_company_pages.post_multi_image',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/region',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'region',
        'dagster/table_name': 'fivetran.linkedin_company_pages.region',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/seniority',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'seniority',
        'dagster/table_name': 'fivetran.linkedin_company_pages.seniority',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_carousel_card',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_carousel_card',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_carousel_card',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_content',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_content',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_content',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_content_poll_option',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_content_poll_option',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_content_poll_option',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_distribution_target_industries',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_distribution_target_industries',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_distribution_target_industries',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_distribution_target_interface_locales',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_distribution_target_interface_locales',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_distribution_target_interface_locales',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_distribution_target_job_functions',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_distribution_target_job_functions',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_distribution_target_job_functions',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_distribution_target_locations',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_distribution_target_locations',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_distribution_target_locations',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_distribution_target_seniorities',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_distribution_target_seniorities',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_distribution_target_seniorities',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_distribution_target_staff_count_ranges',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_distribution_target_staff_count_ranges',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_distribution_target_staff_count_ranges',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_history',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_history',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_multi_image',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_multi_image',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_multi_image',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_social_metadata_summary',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_social_metadata_summary',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_social_metadata_summary',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/social_metadata_summary',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'social_metadata_summary',
        'dagster/table_name': 'fivetran.linkedin_company_pages.social_metadata_summary',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/time_bound_follower_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'time_bound_follower_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.time_bound_follower_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/time_bound_page_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'time_bound_page_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.time_bound_page_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/time_bound_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'time_bound_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.time_bound_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/total_follower_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'total_follower_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.total_follower_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/total_page_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'total_page_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.total_page_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/total_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'total_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.total_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/ugc_post_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'ugc_post_history',
        'dagster/table_name': 'fivetran.linkedin_company_pages.ugc_post_history',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/ugc_post_share_statistic',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'ugc_post_share_statistic',
        'dagster/table_name': 'fivetran.linkedin_company_pages.ugc_post_share_statistic',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_linkedin_company_pages',
      'key': 'fivetran/linkedin_company_pages/ugc_post_social_metadata_summary',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/linkedin_company_pages/linkedin_company_pages',
        ),
        'dagster-fivetran/connector_id': 'sheep_motivate',
        'dagster-fivetran/destination_schema_name': 'linkedin_company_pages',
        'dagster-fivetran/destination_table_name': 'ugc_post_social_metadata_summary',
        'dagster/table_name': 'fivetran.linkedin_company_pages.ugc_post_social_metadata_summary',
        'group_name': 'fivetran_linkedin_company_pages',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/account',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'account',
        'dagster/table_name': 'fivetran.outreach.account',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/account_tag',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'account_tag',
        'dagster/table_name': 'fivetran.outreach.account_tag',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/active_step_mailing',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'active_step_mailing',
        'dagster/table_name': 'fivetran.outreach.active_step_mailing',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/active_step_task',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'active_step_task',
        'dagster/table_name': 'fivetran.outreach.active_step_task',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/data_connection',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'data_connection',
        'dagster/table_name': 'fivetran.outreach.data_connection',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/duty',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'duty',
        'dagster/table_name': 'fivetran.outreach.duty',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/email_address',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'email_address',
        'dagster/table_name': 'fivetran.outreach.email_address',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'event',
        'dagster/table_name': 'fivetran.outreach.event',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/mailing',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'mailing',
        'dagster/table_name': 'fivetran.outreach.mailing',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/mailing_recipient',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'mailing_recipient',
        'dagster/table_name': 'fivetran.outreach.mailing_recipient',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/mailing_reference',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'mailing_reference',
        'dagster/table_name': 'fivetran.outreach.mailing_reference',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect',
        'dagster/table_name': 'fivetran.outreach.prospect',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_email',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_email',
        'dagster/table_name': 'fivetran.outreach.prospect_email',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_favorite',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_favorite',
        'dagster/table_name': 'fivetran.outreach.prospect_favorite',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_home_phone',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_home_phone',
        'dagster/table_name': 'fivetran.outreach.prospect_home_phone',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_mobile_phone',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_mobile_phone',
        'dagster/table_name': 'fivetran.outreach.prospect_mobile_phone',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_other_phone',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_other_phone',
        'dagster/table_name': 'fivetran.outreach.prospect_other_phone',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_tag',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_tag',
        'dagster/table_name': 'fivetran.outreach.prospect_tag',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_voip_phone',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_voip_phone',
        'dagster/table_name': 'fivetran.outreach.prospect_voip_phone',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/prospect_work_phone',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'prospect_work_phone',
        'dagster/table_name': 'fivetran.outreach.prospect_work_phone',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/sequence',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'sequence',
        'dagster/table_name': 'fivetran.outreach.sequence',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/sequence_state',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'sequence_state',
        'dagster/table_name': 'fivetran.outreach.sequence_state',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/sequence_step',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'sequence_step',
        'dagster/table_name': 'fivetran.outreach.sequence_step',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/sequence_tag',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'sequence_tag',
        'dagster/table_name': 'fivetran.outreach.sequence_tag',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/sequence_template',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'sequence_template',
        'dagster/table_name': 'fivetran.outreach.sequence_template',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/user_duty',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'user_duty',
        'dagster/table_name': 'fivetran.outreach.user_duty',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/user_email_recipients',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'user_email_recipients',
        'dagster/table_name': 'fivetran.outreach.user_email_recipients',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/user_team',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'user_team',
        'dagster/table_name': 'fivetran.outreach.user_team',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_outreach',
      'key': 'fivetran/outreach/users',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/outreach/outreach',
        ),
        'dagster-fivetran/connector_id': 'surfer_kangaroo',
        'dagster-fivetran/destination_schema_name': 'outreach',
        'dagster-fivetran/destination_table_name': 'users',
        'dagster/table_name': 'fivetran.outreach.users',
        'group_name': 'fivetran_outreach',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/account_conversions_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'account_conversions_report',
        'dagster/table_name': 'fivetran.reddit_ads.account_conversions_report',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/account_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'account_report',
        'dagster/table_name': 'fivetran.reddit_ads.account_report',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/ad',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'ad',
        'dagster/table_name': 'fivetran.reddit_ads.ad',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/ad_conversions_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'ad_conversions_report',
        'dagster/table_name': 'fivetran.reddit_ads.ad_conversions_report',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/ad_group',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'ad_group',
        'dagster/table_name': 'fivetran.reddit_ads.ad_group',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/ad_group_conversions_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_conversions_report',
        'dagster/table_name': 'fivetran.reddit_ads.ad_group_conversions_report',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/ad_group_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'ad_group_report',
        'dagster/table_name': 'fivetran.reddit_ads.ad_group_report',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/ad_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'ad_report',
        'dagster/table_name': 'fivetran.reddit_ads.ad_report',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/campaign',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'campaign',
        'dagster/table_name': 'fivetran.reddit_ads.campaign',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'fivetran/reddit_ads/campaign_report',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/click_tracker',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'click_tracker',
        'dagster/table_name': 'fivetran.reddit_ads.click_tracker',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/pixel_partner_reference',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'pixel_partner_reference',
        'dagster/table_name': 'fivetran.reddit_ads.pixel_partner_reference',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_reddit_ads',
      'key': 'fivetran/reddit_ads/schedule',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/reddit_ads/reddit_ads',
        ),
        'dagster-fivetran/connector_id': 'sedimentary_unmanned',
        'dagster-fivetran/destination_schema_name': 'reddit_ads',
        'dagster-fivetran/destination_table_name': 'schedule',
        'dagster/table_name': 'fivetran.reddit_ads.schedule',
        'group_name': 'fivetran_reddit_ads',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/account',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'account',
        'dagster/table_name': 'fivetran.salesforce.account',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/account_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'account_history',
        'dagster/table_name': 'fivetran.salesforce.account_history',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/account_ownership_c',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'account_ownership_c',
        'dagster/table_name': 'fivetran.salesforce.account_ownership_c',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/campaign',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'campaign',
        'dagster/table_name': 'fivetran.salesforce.campaign',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/campaign_member',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'campaign_member',
        'dagster/table_name': 'fivetran.salesforce.campaign_member',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/contact',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'contact',
        'dagster/table_name': 'fivetran.salesforce.contact',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/contract',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'contract',
        'dagster/table_name': 'fivetran.salesforce.contract',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/event',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'event',
        'dagster/table_name': 'fivetran.salesforce.event',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/leadfeederapp_website_visit_c',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'leadfeederapp_website_visit_c',
        'dagster/table_name': 'fivetran.salesforce.leadfeederapp_website_visit_c',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/opportunity',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'opportunity',
        'dagster/table_name': 'fivetran.salesforce.opportunity',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/opportunity_field_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'opportunity_field_history',
        'dagster/table_name': 'fivetran.salesforce.opportunity_field_history',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/opportunity_history',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'opportunity_history',
        'dagster/table_name': 'fivetran.salesforce.opportunity_history',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/opportunity_line_item',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'opportunity_line_item',
        'dagster/table_name': 'fivetran.salesforce.opportunity_line_item',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/organization_c',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'organization_c',
        'dagster/table_name': 'fivetran.salesforce.organization_c',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/partner',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'partner',
        'dagster/table_name': 'fivetran.salesforce.partner',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/product_2',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'product_2',
        'dagster/table_name': 'fivetran.salesforce.product_2',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/sales_cycle_c',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'sales_cycle_c',
        'dagster/table_name': 'fivetran.salesforce.sales_cycle_c',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/task',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'task',
        'dagster/table_name': 'fivetran.salesforce.task',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/user',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'user',
        'dagster/table_name': 'fivetran.salesforce.user',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_salesforce',
      'key': 'fivetran/salesforce/user_role',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/salesforce/salesforce',
        ),
        'dagster-fivetran/connector_id': 'unfamiliar_eye',
        'dagster-fivetran/destination_schema_name': 'salesforce',
        'dagster-fivetran/destination_table_name': 'user_role',
        'dagster/table_name': 'fivetran.salesforce.user_role',
        'group_name': 'fivetran_salesforce',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_youtube_analytics',
      'key': 'fivetran/youtube_analytics/channel',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/youtube_analytics/youtube_analytics',
        ),
        'dagster-fivetran/connector_id': 'employee_doomed',
        'dagster-fivetran/destination_schema_name': 'youtube_analytics',
        'dagster-fivetran/destination_table_name': 'channel',
        'dagster/table_name': 'fivetran.youtube_analytics.channel',
        'group_name': 'fivetran_youtube_analytics',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_youtube_analytics',
      'key': 'fivetran/youtube_analytics/channel_combined_a_2',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/youtube_analytics/youtube_analytics',
        ),
        'dagster-fivetran/connector_id': 'employee_doomed',
        'dagster-fivetran/destination_schema_name': 'youtube_analytics',
        'dagster-fivetran/destination_table_name': 'channel_combined_a_2',
        'dagster/table_name': 'fivetran.youtube_analytics.channel_combined_a_2',
        'group_name': 'fivetran_youtube_analytics',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_youtube_analytics',
      'key': 'fivetran/youtube_analytics/playlist',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/youtube_analytics/youtube_analytics',
        ),
        'dagster-fivetran/connector_id': 'employee_doomed',
        'dagster-fivetran/destination_schema_name': 'youtube_analytics',
        'dagster-fivetran/destination_table_name': 'playlist',
        'dagster/table_name': 'fivetran.youtube_analytics.playlist',
        'group_name': 'fivetran_youtube_analytics',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_youtube_analytics',
      'key': 'fivetran/youtube_analytics/playlist_combined_a_1',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/youtube_analytics/youtube_analytics',
        ),
        'dagster-fivetran/connector_id': 'employee_doomed',
        'dagster-fivetran/destination_schema_name': 'youtube_analytics',
        'dagster-fivetran/destination_table_name': 'playlist_combined_a_1',
        'dagster/table_name': 'fivetran.youtube_analytics.playlist_combined_a_1',
        'group_name': 'fivetran_youtube_analytics',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_youtube_analytics',
      'key': 'fivetran/youtube_analytics/video',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/youtube_analytics/youtube_analytics',
        ),
        'dagster-fivetran/connector_id': 'employee_doomed',
        'dagster-fivetran/destination_schema_name': 'youtube_analytics',
        'dagster-fivetran/destination_table_name': 'video',
        'dagster/table_name': 'fivetran.youtube_analytics.video',
        'group_name': 'fivetran_youtube_analytics',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/channel',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'channel',
        'dagster/table_name': 'fivetran.zoom.channel',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/meeting',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'meeting',
        'dagster/column_schema': TableSchema(
          columns=list([
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'fivetran.zoom.meeting',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/meeting_participant',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'meeting_participant',
        'dagster/column_schema': TableSchema(
          columns=list([
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'fivetran.zoom.meeting_participant',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/meeting_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'meeting_report',
        'dagster/column_schema': TableSchema(
          columns=list([
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'fivetran.zoom.meeting_report',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/meeting_report_custom_key',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'meeting_report_custom_key',
        'dagster/table_name': 'fivetran.zoom.meeting_report_custom_key',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/meeting_report_tracking',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'meeting_report_tracking',
        'dagster/table_name': 'fivetran.zoom.meeting_report_tracking',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/user_custom_attribute',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'user_custom_attribute',
        'dagster/table_name': 'fivetran.zoom.user_custom_attribute',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/user_group',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'user_group',
        'dagster/table_name': 'fivetran.zoom.user_group',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/user_im_group',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'user_im_group',
        'dagster/table_name': 'fivetran.zoom.user_im_group',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/users',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'users',
        'dagster/table_name': 'fivetran.zoom.users',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar',
        'dagster/table_name': 'fivetran.zoom.webinar',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_absentee',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_absentee',
        'dagster/table_name': 'fivetran.zoom.webinar_absentee',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_panelist',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_panelist',
        'dagster/table_name': 'fivetran.zoom.webinar_panelist',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_participant',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_participant',
        'dagster/table_name': 'fivetran.zoom.webinar_participant',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_poll',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_poll',
        'dagster/table_name': 'fivetran.zoom.webinar_poll',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_poll_question',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_poll_question',
        'dagster/table_name': 'fivetran.zoom.webinar_poll_question',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_poll_question_answer',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_poll_question_answer',
        'dagster/table_name': 'fivetran.zoom.webinar_poll_question_answer',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_poll_question_prompt',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_poll_question_prompt',
        'dagster/table_name': 'fivetran.zoom.webinar_poll_question_prompt',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_question_and_answer',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_question_and_answer',
        'dagster/table_name': 'fivetran.zoom.webinar_question_and_answer',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_question_and_answer_question',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_question_and_answer_question',
        'dagster/table_name': 'fivetran.zoom.webinar_question_and_answer_question',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_question_and_answer_question_detail',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_question_and_answer_question_detail',
        'dagster/table_name': 'fivetran.zoom.webinar_question_and_answer_question_detail',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_registrant',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_registrant',
        'dagster/table_name': 'fivetran.zoom.webinar_registrant',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_registrant_custom_question',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_registrant_custom_question',
        'dagster/table_name': 'fivetran.zoom.webinar_registrant_custom_question',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_report',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_report',
        'dagster/table_name': 'fivetran.zoom.webinar_report',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_report_custom_key',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_report_custom_key',
        'dagster/table_name': 'fivetran.zoom.webinar_report_custom_key',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_report_tracking',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_report_tracking',
        'dagster/table_name': 'fivetran.zoom.webinar_report_tracking',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'fivetran_zoom',
      'key': 'fivetran/zoom/webinar_tracking_source',
      'metadata': dict({
        'connector_url': UrlMetadataValue(
          url='https://fivetran.com/dashboard/connectors/zoom/zoom',
        ),
        'dagster-fivetran/connector_id': 'paralleled_orchard',
        'dagster-fivetran/destination_schema_name': 'zoom',
        'dagster-fivetran/destination_table_name': 'webinar_tracking_source',
        'dagster/table_name': 'fivetran.zoom.webinar_tracking_source',
        'group_name': 'fivetran_zoom',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/fivetran': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Fetch Github Issues and Discussions and feed into Scout Support Bot.
        
        Since the Github API limits search results to 1000, we partition by updated at
        month, which should be enough to get all the issues and discussions. We use
        updated_at to ensure we don't miss any issues that are updated after the
        partition month. The underlying auto-materialize policy runs this asset every
        day to refresh all data for the current month.
      ''',
      'group_name': 'support_bot',
      'key': 'github_issues',
      'metadata': dict({
      }),
      'owners': list([
        'team:devrel',
      ]),
      'tags': dict({
        'dagster/kind/github': '',
        'dagster/kind/scout': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'github',
      'key': 'github_reactions_issues',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'github',
      'key': 'github_reactions_stargazers',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/call_recordings',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/call_transcripts',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/calls',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/conversation_contexts',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/conversation_participants',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/conversations',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/emails',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/meetings',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'gong/gong_data_cloud/users',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'call_recordings',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'call_transcripts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'calls',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'conversation_contexts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'conversation_participants',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'conversations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Gong Transcripts Reviewed by AI',
      'group_name': 'gong',
      'key': 'gong_calls_transcript_ai',
      'metadata': dict({
      }),
      'owners': list([
        'team:devrel',
      ]),
      'tags': dict({
        'dagster/kind/anthropic': '',
        'dagster/kind/slack': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_cloud_users',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/salesforce': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_null_contact_names',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/salesforce': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'org_activity_monthly',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_org_activity_monthly',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/salesforce': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sales_cycles',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_sales_cycles',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/salesforce': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sync_hubspot_company',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_sync_hubspot_company',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/hubspot': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sync_hubspot_contact',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_sync_hubspot_contact',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/hubspot': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sync_hubspot_organization',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_sync_hubspot_organization',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/hubspot': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sync_salesforce_account',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_sync_salesforce_account',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/salesforce': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_attribution',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'hightouch_syncs',
      'key': 'hightouch_user_attribution',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/hightouch': '',
        'dagster/kind/salesforce': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'hubspot',
      'key': 'hubspot_companies',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'hubspot',
      'key': 'hubspot_deals',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'hubspot',
      'key': 'hubspot_products',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'hubspot',
      'key': 'hubspot_quotes',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'hubspot',
      'key': 'hubspot_tickets',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Drops clone purina databases after 14 days of inactivity.',
      'group_name': 'default',
      'key': 'inactive_snowflake_clones',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/alert_policies',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/alerts',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/alerts_alert_policies_new',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/asset_keys',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/asset_materializations',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/asset_observations',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/catalog_views',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/customer_info',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/deployments',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/event_logs_partitioned',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/event_logs_view',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/jobs',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/notifications',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/onboarding_checklist',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/organizations',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/permissions',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/repository_locations_data',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/run_tags',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/runs',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/serverless_agents',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/session_tokens',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/teams',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/teams_permissions',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/teams_users',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/users',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/users_organizations',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_main',
      'key': 'main/public/users_permissions',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Daily events that contain pre-aggregated metrics based on org performance from datadog.',
      'group_name': 'statsig',
      'key': 'org_performance_metrics',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/statsig': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'buildkite',
      'key': 'pipelines_builds',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'usage_metrics_daily_jobs_aggregated',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        SELECT
          ORGANIZATION_ID,
          AGENT_TYPE,
          JOB_NAME,
          REPOSITORY_NAME,
          JOB_DAY,
          MATERIALIZATIONS,
          STEP_DURATION_MINS,
          STEPS,
          RUN_DURATION_MINS,
          RUNS,
          STEPS_CREDITS,
          STANDARD_CREDITS,
          HIGH_VELOCITY_CREDITS
        FROM purina.product.usage_metrics_daily_jobs_aggregated
  
      ''',
      'group_name': 'sling_egress',
      'key': 'postgres/usage_metrics_daily_jobs_aggregated_reporting',
      'metadata': dict({
        'dagster/table_name': 'postgres.usage_metrics_daily_jobs_aggregated_reporting',
        'dagster_sling/dagster_sling_translator': EgressReplicationSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'truncate',
            'object': '{stream_table}',
          }),
          'source': 'PURINA_CLOUD_REPORTING',
          'streams': dict({
            'purina.product.usage_metrics_daily_jobs_aggregated': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'postgres.usage_metrics_daily_jobs_aggregated_reporting',
                }),
              }),
              'sql': '''
                SELECT
                  ORGANIZATION_ID,
                  AGENT_TYPE,
                  JOB_NAME,
                  REPOSITORY_NAME,
                  JOB_DAY,
                  MATERIALIZATIONS,
                  STEP_DURATION_MINS,
                  STEPS,
                  RUN_DURATION_MINS,
                  RUNS,
                  STEPS_CREDITS,
                  STANDARD_CREDITS,
                  HIGH_VELOCITY_CREDITS
                FROM purina.product.usage_metrics_daily_jobs_aggregated
  
              ''',
            }),
          }),
          'target': 'REPORTING_DB',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'postgres.usage_metrics_daily_jobs_aggregated_reporting',
              }),
            }),
            'sql': '''
              SELECT
                ORGANIZATION_ID,
                AGENT_TYPE,
                JOB_NAME,
                REPOSITORY_NAME,
                JOB_DAY,
                MATERIALIZATIONS,
                STEP_DURATION_MINS,
                STEPS,
                RUN_DURATION_MINS,
                RUNS,
                STEPS_CREDITS,
                STANDARD_CREDITS,
                HIGH_VELOCITY_CREDITS
              FROM purina.product.usage_metrics_daily_jobs_aggregated
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'product_operations/insights/reporting_asset_materialization_metrics',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'reporting_contract_info',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'sling_egress',
      'key': 'public/salesforce_contract_info',
      'metadata': dict({
        'dagster/table_name': 'public.salesforce_contract_info',
        'dagster_sling/dagster_sling_translator': EgressReplicationSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'full-refresh',
            'object': '{stream_table}',
            'primary_key': list([
              'organization_id',
            ]),
          }),
          'source': 'PURINA_CLOUD_REPORTING',
          'streams': dict({
            'purina.mart_sales.reporting_contract_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'public.salesforce_contract_info',
                }),
              }),
            }),
          }),
          'target': 'REPORTING_DB',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'public.salesforce_contract_info',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing the number of PyPi downloads for each package in the Dagster ecosystem, aggregated at the weekly grain. This data is fetched from the public BigQuery dataset `bigquery-public-data.pypi.file_downloads`.',
      'group_name': 'oss_analytics',
      'key': 'purina/oss_analytics/dagster_pypi_downloads',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'OSS Telemetry events ingested from S3. The actual asset for this is currently in Purina until we can refactor the logic for it.',
      'group_name': 'telemetry',
      'key': 'purina/prod_telemetry/oss_telemetry_events_raw',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'pylon/pylon/pylon_issues',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'abm_company_activity',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'abm_contact_activity',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'event_score_mapping',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Unions contact and company level activities into one table and adds scores. Null scores are checked externally so as to not block the pipeline.
        
        #### Raw SQL:
        ```sql
            with company_activity as (
        
                select * from {{ ref('abm_company_activity') }}
            ),
        
            contact_activity as (
        
                select * from {{ ref('abm_contact_activity') }}
            ),
        
            contacts as (
        
                select * from {{ ref('hubspot_contacts') }}
            ),
        
            unioned as (
        
                select *, 'company' as activity_level_source from company_activity
                union
                select *, 'contact' as activity_level_source from contact_activity
            ),
        
            activity_with_detail as (
        
                select
                    a.hubspot_contact_id,
                    a.hubspot_company_id,
                    a.salesforce_contact_id,
                    a.salesforce_account_id,
                    a.event_source,
                    a.event_timestamp,
                    a.event_name,
                    regexp_replace(lower(a.event_name), '[^a-zA-Z0-9]+', '_') as event_slug,
                    a.event_attributes,
                    case
                        when event_slug like ('%loaded_a_page%') then a.event_attributes:path::varchar
                        when event_slug = 'hubspot_form_submission' then a.event_attributes:hubspot_form_category::varchar
                        else 'NONE'
                    end as event_detail,
                    a.activity_level_source,
                    a.campaign_name,
                    a.campaign_medium,
                    a.campaign_source
                from unioned a
                    left join contacts c on a.hubspot_contact_id = c.contact_id
                qualify row_number() over (partition by c.email, a.salesforce_account_id, a.event_name, a.event_attributes, a.event_timestamp order by c.last_modified_time desc) = 1
            ),
        
            activity_with_scores as (
        
                select
                    a.*,
                    score / pow(2, datediff('day', event_timestamp, current_date) / 30) as event_score
                from activity_with_detail a
                    left join {{ ref('event_score_mapping') }} esm on a.event_slug = esm.event_slug and a.event_detail like esm.event_detail -- allow partial matching on paths, e.g. /vs%
            ),
        
            final as (
        
                select
                    * replace (
                        case
                            when event_score is null and event_slug like ('%loaded_a_page%') then 2 / pow(2, datediff('day', event_timestamp, current_date) / 30)
                            when event_score is null and event_slug = 'hubspot_form_submission' then 4 / pow(2, datediff('day', event_timestamp, current_date) / 30)
                            else event_score
                        end as event_score
                    )
                from activity_with_scores
            )
        
            select * from final
        ```
      ''',
      'group_name': 'mart_gtm',
      'key': 'sandbox//abm_activity_scoring',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.abm_activity_scoring',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.abm_activity_scoring',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ABM_ACTIVITY_SCORING',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_leaderfeeder_sessions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'website_visits_cloud',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'website_visits_dagster_university',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'website_visits_docs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'website_visits_marketing',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Describes activity for a hubspot company across channels. Data is only included in this model if we do not have contact level information
        
        #### Raw SQL:
        ```sql
            --- This model is meant to handle situations where we cannot get data at the contact level, but can identify at the account level
            --- This could be a part of the abm_contact_activity model, but it is already a large model so this is being pulled out
        
            with leadfeeder as (
        
                select * from {{ ref('salesforce_leaderfeeder_sessions') }}  
                where account_id is not null
            ),
        
            hubspot_contacts as (
        
                select * from {{ ref('hubspot_contacts') }}
            ),
        
            segment_marketing_website_visits as (
        
                select * from {{ ref('website_visits_marketing') }}
            ),
            
            segment_docs_website_visits as (
        
                select * from {{ ref('website_visits_docs') }}
            ),
        
            segment_cloud_website_visits as (
        
                select * from {{ ref('website_visits_cloud') }}
            ),
        
            segment_dag_u_website_visits as (
        
                select * from {{ ref('website_visits_dagster_university') }}
            ),
        
        
            oss_usage as (
        
                select * from {{ ref('salesforce_leaderfeeder_sessions') }}  
                where is_oss_usage = true
                and account_id is not null
            ),
        
            first_oss_usage as (
        
                select 
                    case 
                        when row_number() over (partition by account_id, date(visit_at) order by visit_at) = 1 then true 
                            else false
                            end as is_first_oss_usage_of_the_day,
                    case
                        when row_number() over (partition by account_id order by visit_at) = 1 then true 
                            else false
                            end as is_first_ever_oss_usage,
                    *
                from oss_usage
            ),
        
            first_daily_oss_visit as (
        
                select
                    null as hubspot_contact_id,
                    company_id as hubspot_company_id,
                    null as salesforce_contact_id,
                    salesforce_account_id,
                    'Leadfeeder' as event_source,
                    visit_at as event_timestamp,
                    'first_daily_oss_visit' as event_name,
                    cast(null as variant) as event_attributes,
                    'leadfeeder' as campaign_source,
                    null as campaign_medium,
                    'oss_usage' as campaign_name, 
                from first_oss_usage u
                    inner join hubspot_contacts c on u.account_id = c.salesforce_account_id
                where is_first_oss_usage_of_the_day = true
                group by all
            ),
        
            first_ever_oss_visit as (
        
                select
                    null as hubspot_contact_id,
                    company_id as hubspot_company_id,
                    null as salesforce_contact_id,
                    salesforce_account_id,
                    'Leadfeeder' as event_source,
                    visit_at as event_timestamp,
                    'first_ever_oss_visit' as event_name,
                    cast(null as variant) as event_attributes,
                    'leadfeeder' as campaign_source,
                    null as campaign_medium,
                    'oss_usage' as campaign_name, 
                from first_oss_usage u
                    inner join hubspot_contacts c on u.account_id = c.salesforce_account_id
                where is_first_ever_oss_usage = true
                group by all
            ),
        
            --- Read notes below. The main idea here is that we want to pull together all Segment web data so that we can compare against leadfeeder
            marketing_daily as (
        
                select
                    date(timestamp) as visit_date,
                    hubspot_company_id,
                    account_id
                from segment_marketing_website_visits
                where account_id is not null
            ),
        
            cloud_daily as (
        
                select
                    date(timestamp) as visit_date,
                    hubspot_company_id,
                    account_id
                from segment_cloud_website_visits
                where account_id is not null
                group by all
            ),
        
            docs_daily as (
        
                select
                    date(timestamp) as visit_date,
                    hubspot_company_id,
                    account_id
                from segment_docs_website_visits
                where account_id is not null
                group by all
            ),
        
            dag_u_daily as (
        
                select
                    date(timestamp) as visit_date,
                    hubspot_company_id,
                    account_id
                from segment_dag_u_website_visits
                where account_id is not null
                group by all
            ),
        
            union_web_traffic as (
        
                select * from docs_daily
                union distinct
                select * from marketing_daily
                union distinct
                select * from cloud_daily
                union distinct
                select * from dag_u_daily
            ),
        
            --- oss usage is already being handled separately above, therefore we want to exclude here
            leadfeeder_summary as (
        
                select
                    date(visit_at) as visit_date,
                    hubspot_company_id,
                    account_id,
                from leadfeeder
                where account_id is not null
                and is_oss_usage = false
                group by all
            ),
        
            first_available_leadfeeder_data as (
        
                select
                    date(visit_at) as visit_date,
                    hubspot_company_id,
                    account_id,
                    source as campaign_source,
                    medium as campaign_medium,
                    campaign_id as campaign_name
                from leadfeeder
                where account_id is not null
                and is_oss_usage = false and
                (campaign_source is not null 
                or campaign_medium is not null 
                or campaign_name is not null)
                qualify row_number() over (partition by date(visit_at), account_id order by visit_at) = 1
            ),
        
            --- Our preference is to use Segment data when possible since it is at the contact level, so here we pull together all of our Segment web data and compare to Leadfeeder session data. 
            --- Any web session found in Segment is removed from the Leadfeeder data
            identify_leadfeeder_only_data as (
        
                select 
                    leadfeeder_summary.* 
                from leadfeeder_summary
                left join union_web_traffic 
                    on leadfeeder_summary.visit_date = union_web_traffic.visit_date
                    and leadfeeder_summary.account_id = union_web_traffic.account_id
                where union_web_traffic.visit_date is null
            ),
        
            format_leadfeeder_website_data as (
        
                select
                    null as hubspot_contact_id,
                    i.hubspot_company_id as hubspot_company_id,
                    null as salesforce_contact_id,
                    i.account_id as salesforce_account_id,
                    'Leadfeeder' as event_source,
                    i.visit_date as event_timestamp,
                    'company_level_deanonymized_web_session' as event_name,
                    cast(null as variant) as event_attributes,
                    f.campaign_source,
                    f.campaign_medium,
                    f.campaign_name
                from identify_leadfeeder_only_data i
                left join first_available_leadfeeder_data f on i.account_id = f.account_id and i.visit_date = f.visit_date
            ),
        
            unioned as (
        
                select * from first_ever_oss_visit
                union 
                select * from first_daily_oss_visit
                union 
                select * from format_leadfeeder_website_data
            )
        
            select * from unioned
            qualify row_number() over (partition by hubspot_company_id, event_timestamp, event_name order by event_timestamp) = 1
        ```
      ''',
      'group_name': 'mart_gtm',
      'key': 'sandbox//abm_company_activity',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.abm_company_activity',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.abm_company_activity',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ABM_COMPANY_ACTIVITY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'abm_contact_intent_scores',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Intent scores rolled up to the company level from the contact level
        
        #### Raw SQL:
        ```sql
            select
                hubspot_company_id,
                sum(abm_score) as intent_score
            from {{ ref('abm_contact_intent_scores') }}
            where hubspot_company_id is not null
            group by hubspot_company_id
        ```
      ''',
      'group_name': 'mart_gtm',
      'key': 'sandbox//abm_company_intent_scores',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.abm_company_intent_scores',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.abm_company_intent_scores',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ABM_COMPANY_INTENT_SCORES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'common_room_activities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_enrollments',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_outreach_mailings',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_segment_docs_page_visits',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_segment_web_page_visits',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_zoom_webinar_registration',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contact_form_submissions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Describes activity for a hubspot contact across channels
        
        #### Raw SQL:
        ```sql
            with
        
            education_users as (
        
                select
                    contact_id as hubspot_contact_id,
                    company_id as hubspot_company_id,
                    salesforce_contact_id,
                    salesforce_account_id,
                    'Thinkific' as event_source,
                    min(created_at) as event_timestamp,
                    'Daggy U Signup' as event_name,
                    cast(null as variant) as event_attributes,
                    cast(null as text) as campaign_source,
                    cast(null as text) as campaign_medium,
                    cast(null as text) as campaign_name,
                from {{ ref('education_users') }} u
                    inner join {{ ref('hubspot_contacts') }} c on u.email = c.email
                group by all
            ),
        
            education_enrollments as (
        
                select
                    contact_id as hubspot_contact_id,
                    company_id as hubspot_company_id,
                    salesforce_contact_id,
                    salesforce_account_id,
                    'Thinkific' as event_source,
                    created_at as event_timestamp,
                    'Daggy U Course Enrollment' as event_name,
                    object_construct(
                        'course_name', course_name::variant,
                        'course_id', course_id::variant
                    ) as event_attributes,
                    'thinkific' as campaign_source,
                    'webinar' as campaign_medium,
                    course_name as campaign_name    
                from {{ ref('education_enrollments') }} e
                    inner join {{ ref('hubspot_contacts') }} c on e.user_email = c.email
            ),
        
            education_completions as (
        
                select
                    contact_id as hubspot_contact_id,
                    company_id as hubspot_company_id,
                    salesforce_contact_id,
                    salesforce_account_id,
                    'Thinkific' as event_source,
                    created_at as event_timestamp,
                    'Daggy U Course Completed' as event_name,
                    object_construct(
                        'course_name', course_name::variant,
                        'course_id', course_id::variant
                    ) as event_attributes,
                    'thinkific' as campaign_source,
                    'webinar' as campaign_medium,
                    course_name as campaign_name        
                from {{ ref('education_enrollments') }} e
                    inner join {{ ref('hubspot_contacts') }} c on e.user_email = c.email
                where e.completed_fully_or_without_capstone = true
            ),
        
            email_sent as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Outreach' as event_source,
                    created_at as event_timestamp,
                    'email-sent' as event_name,
                    object_construct(
                        'state', state::variant,
                        'sequence_name', sequence_name::variant,
                        'prospect_email_send_count', prospect_email_send_count::variant
                    ) as event_attributes,
                    'outreach' as campaign_source,
                    'email' as campaign_medium,
                    sequence_name as campaign_name,        
                from {{ ref('fct_outreach_mailings') }} e
                    inner join {{ ref('hubspot_contacts') }} c on e.salesforce_contact_id = c.salesforce_contact_id
                where state = 'delivered' 
            ),
        
            email_replied as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Outreach' as event_source,
                    created_at as event_timestamp,
                    'email-replied' as event_name,
                    object_construct(
                        'state', state::variant,
                        'sequence_name', sequence_name::variant,
                        'prospect_email_send_count', prospect_email_send_count::variant
                    ) as event_attributes,
                    'outreach' as campaign_source,
                    'email' as campaign_medium,
                    sequence_name as campaign_name,           
                from {{ ref('fct_outreach_mailings') }} e
                    inner join {{ ref('hubspot_contacts') }} c on e.salesforce_contact_id = c.salesforce_contact_id
                where state = 'replied' 
            ),
        
            marketing_website_activity as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Segment' as event_source,
                    e.timestamp as event_timestamp,
                    'loaded-a-page-marketing' as event_name,
                    object_construct(
                        'title', title::variant,
                        'path', path::variant,
                        'url', url::variant,
                        'referrer', referrer::variant
                    ) as event_attributes,
                    campaign_source,
                    campaign_medium,
                    campaign_name,   
                from {{ ref('fct_segment_web_page_visits') }} e 
                    inner join {{ ref('hubspot_contacts') }} c on e.email = c.email
                where c.contact_id is not null
            ),
        
            docs_website_activity as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Segment' as event_source,
                    e.timestamp as event_timestamp,
                    'loaded-a-page-docs' as event_name,
                    object_construct(
                        'title', title::variant,
                        'path', path::variant,
                        'url', url::variant,
                        'referrer', referrer::variant
                    ) as event_attributes,
                    campaign_source,
                    campaign_medium,
                    campaign_name,  
                from {{ ref('fct_segment_docs_page_visits') }} e 
                    inner join {{ ref('hubspot_contacts') }} c on e.email = c.email
                where c.contact_id is not null
            ),
        
            webinar_registration as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Zoom' as event_source,
                    e.signed_up_at as event_timestamp,
                    'webinar-sign-up' as event_name,
                    object_construct(
                        'webinar_name', webinar_name::variant
                    ) as event_attributes,
                    'zoom' as campaign_source,
                    'webinar' as campaign_medium,
                    webinar_name as campaign_name,   
                from {{ ref('fct_zoom_webinar_registration') }} e 
                    inner join {{ ref('hubspot_contacts') }} c on e.email = c.email
                where c.contact_id is not null
            ),
        
            webinar_attended as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Zoom' as event_source,
                    e.initial_join_at as event_timestamp,
                    'webinar-attended' as event_name,
                    object_construct(
                        'webinar_name', webinar_name::variant
                    ) as event_attributes,
                    'zoom' as campaign_source,
                    'webinar' as campaign_medium,
                    webinar_name as campaign_name,       
                from {{ ref('fct_zoom_webinar_registration') }} e 
                    inner join {{ ref('hubspot_contacts') }} c on e.email = c.email
                where c.contact_id is not null
                --- only those who attended for more than a minute
                and initial_join_at is not null
                and total_attendance_time >= 60
            ),
        
            form_submissions as (
                select distinct
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'HubSpot' as event_source,
                    fs.form_submitted_at as event_timestamp,
                    'HubSpot Form Submission' as event_name,
                    object_construct(
                        'hubspot_form_name', cast(fs.form_name as variant),
                        'hubspot_form_category', cast(fs.form_category as variant),
                        'form_fill_referrer_host', cast(fs.form_fill_referrer_host as variant),
                        'form_fill_session_started_at', cast(fs.form_fill_session_started_at as variant),
                        'form_fill_referrer_medium', cast(fs.form_fill_referrer_medium as variant),
                        'form_fill_path', cast(fs.form_fill_path as variant),
                        'form_fill_campaign_source', cast(fs.form_fill_campaign_source as variant),
                        'form_fill_campaign_medium', cast(fs.form_fill_campaign_medium as variant),
                        'form_fill_campaign_name', cast(fs.form_fill_campaign_name as variant),
                        'form_fill_campaign_content', cast(fs.form_fill_campaign_content as variant),
                        'form_fill_utm_term', cast(fs.form_fill_utm_term as variant),
                        'form_fill_reddit_cid', cast(fs.form_fill_reddit_cid as variant),
                        'form_fill_gclid', cast(fs.form_fill_gclid as variant),
                        'form_fill_attribution_category', cast(fs.form_fill_attribution_category as variant)
                    ) as event_attributes,
                    concat('hubspot-', form_fill_campaign_source) as campaign_source,
                    concat('form fill-', form_fill_campaign_medium) as campaign_medium,
                    form_fill_campaign_name as campaign_name, 
                from {{ ref('hubspot_contact_form_submissions') }} fs
                    inner join {{ ref('hubspot_contacts') }} c
                        on c.contact_id = fs.contact_id
                where 
                    fs.form_category != 'Trial Sign-Up'
                    --- we will be getting this info from Zoom.
                    and fs.form_category != 'Webinar'
                    --- should not be scoring password resets even though there are not many
                    and lower(fs.form_category) not like ('%password_reset_request%')
            ),
        
            trial_starts as (
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Segment' as event_source,
                    uo.organization_created_at as event_timestamp,
                    'Trial Started / Organization Created' as event_name,
                    object_construct(
                        'organization_id', cast(uo.organization_id as variant),
                        'organization_user_rank', cast(uo.organization_user_rank as variant),
                        'user_organization_rank', cast(uo.user_organization_rank as variant)
                    ) as event_attributes,
                    'segment' as campaign_source,
                    'product' as campaign_medium,
                    'trial_start' as campaign_name,  
                from {{ ref('user_organizations') }} uo
                    inner join {{ ref('hubspot_contacts') }} c
                        on uo.email = c.email
                where uo.organization_user_rank = 1
            ),
        
            users_created as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Product' as event_source,
                    u.created_at as event_timestamp,
                    'User Created' as event_name,
                    cast(null as variant) as event_attributes,
                    'app' as campaign_source,
                    'product' as campaign_medium,
                    'user_created' as campaign_name,  
                from {{ ref('dim_users') }} u
                    inner join {{ ref('hubspot_contacts') }} c using (email)
            ),
        
            user_org_adds as (
        
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    'Product' as event_source,
                    uo.relationship_created_at as event_timestamp,
                    'User Added to Organization' as event_name,
                     object_construct(
                        'organization_id', cast(uo.organization_id as variant),
                        'organization_user_rank', cast(uo.organization_user_rank as variant),
                        'user_organization_rank', cast(uo.user_organization_rank as variant)
                    ) as event_attributes,
                    'app' as campaign_source,
                    'product' as campaign_medium,
                    'user_org_added' as campaign_name, 
                from {{ ref('user_organizations') }} uo
                    inner join {{ ref('hubspot_contacts') }} c
                        on uo.email = c.email
                where uo.organization_user_rank > 1
            ),
        
            -- Multiple emails can be associated with a single contact, here we explode these records
            -- for every email in the "emails" array
            common_room_activities_explode_email as (
        
                select
                    value::varchar as email,
                    -- Split the activity type from Common Room as it is PascalCase, do not split company names
                    ARRAY_TO_STRING(REGEXP_SUBSTR_ALL(ACTIVITY_TYPE, 'LinkedIn|GitHub|YouTube|[A-Z][a-z]*'), ' ') as activity_type,
                    service_name,
                    activity_timestamp
                from {{ ref('common_room_activities') }},
                    lateral flatten(emails)
            ),
        
            common_room_activities as (
                select
                    c.contact_id as hubspot_contact_id,
                    c.company_id as hubspot_company_id,
                    c.salesforce_contact_id,
                    c.salesforce_account_id,
                    cra.service_name || ' - Common Room' as event_source,
                    cra.activity_timestamp as event_timestamp,
                    cra.activity_type as event_name,
                    null as event_attributes,
                    'common_room' as campaign_source,
                    cra.service_name as campaign_medium,
                    'common_room_activity' as campaign_name, 
                from common_room_activities_explode_email cra
                    inner join {{ ref('hubspot_contacts') }} c
                        on cra.email = c.email
            ),
        
            unioned_activity as (
        
                select * from education_users
                union
                select * from education_enrollments
                union
                select * from education_completions
                union
                select * from marketing_website_activity
                union
                select * from docs_website_activity
                union
                select * from webinar_attended
                union
                select * from webinar_registration
                union
                select * from email_sent
                union
                select * from email_replied
                union
                select * from form_submissions
                union
                select * from trial_starts
                union
                select * from users_created
                union
                select * from user_org_adds
                union
                select * from common_room_activities
            )
        
            select * from unioned_activity
        ```
      ''',
      'group_name': 'mart_gtm',
      'key': 'sandbox//abm_contact_activity',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.abm_contact_activity',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.abm_contact_activity',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ABM_CONTACT_ACTIVITY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'abm_activity_scoring',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        For any hubspot contacts with activity, this table will contain the intent scores for each contact
        
        #### Raw SQL:
        ```sql
            select
                hubspot_contact_id,
                hubspot_company_id,
                sum(event_score) as abm_score
            from {{ ref('abm_activity_scoring') }}
            where event_score is not null
            group by all
        ```
      ''',
      'group_name': 'mart_gtm',
      'key': 'sandbox//abm_contact_intent_scores',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.abm_contact_intent_scores',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.abm_contact_intent_scores',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ABM_CONTACT_INTENT_SCORES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'organization_usage_daily',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contracts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Describes activity in Dagster for a given contract's term
        
        #### Raw SQL:
        ```sql
            with
        
            contracts as (
                select
                    account_id,
                    account_name,
                    organization_id,
                    contract_id,
                    contract_status,
                    contract_term,
                    contract_start_date,
                    contract_end_date,
                    arr,
                    cloud_credits_contracted
                from {{ ref('salesforce_contracts') }}
                inner join {{ ref('salesforce_accounts') }} using (account_id)
                where cloud_credits_contracted > 0
            ),
        
            credit_usage as (
                select
                    date,
                    organization_id,
                    organization_name,
                    materializations,
                    steps,
                    billable_steps,
                    dagster_credits
                from {{ ref('organization_usage_daily') }}
            )
        
            select
                contracts.organization_id,
                organization_name,
                account_id,
                account_name,
                contract_id,
                contract_status,
                contract_start_date,
                contract_end_date,
                sum(arr) as arr,
                sum(cloud_credits_contracted) as cloud_credits_contracted,
                sum(dagster_credits) as dagster_credits,
                sum(materializations) as materializations,
                sum(steps) as steps,
                sum(billable_steps) as billable_steps
            from contracts
            left join
                credit_usage
                on
                    contracts.organization_id = credit_usage.organization_id
                    and credit_usage.date between contract_start_date and contract_end_date
            group by all
        ```
      ''',
      'group_name': 'mart_finance',
      'key': 'sandbox//account_contract_activity',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='contract_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.account_contract_activity',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.account_contract_activity',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ACCOUNT_CONTRACT_ACTIVITY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_account_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Changelog of account ownership. Each row represents a change in ownership for a given account including the date of the change, the old owner, and the new owner.
        
        #### Raw SQL:
        ```sql
            with accounts as (
                select * from {{ ref('salesforce_accounts') }}
            )
            , account_owner_history as (
                select * from {{ ref('salesforce_account_history') }}
                where field = 'Owner' and data_type = 'EntityId'
            )
            , owner_history as (
                select
                    account_id,
                    created_date,
                    old_value AS old_owner,
                    new_value AS new_owner,
                    row_number() over (partition by account_id order by created_date, account_history_id) as _rank, -- account_history_id is required to de-conflict identical created_dates
                    lag(new_value) over (partition by account_id order by created_date, account_history_id) = old_value as _check
                from account_owner_history
            )
            , has_owner_history as (
                select
                    distinct account_id,
                             true as has_history,
                             first_value(old_owner) over (partition by account_id order by _rank) as first_owner
                from owner_history
            )
            ,  first_entry as (
                SELECT
                    account_id,
                    created_at AS created_date,
                    NULL AS old_owner,
                    -- Since ownership history starts on Aug 23, 2023, we can't be sure who the first account owner was
                    iff(created_at < '2023-08-23 22:20:36', 'unk', iff(has_history, first_owner, owner_id)) AS new_owner
                FROM accounts
                left join has_owner_history using (account_id)
            )
            , unioned as (
                select *, 'first' as type from first_entry
                union
                select * exclude (_rank, _check), 'history' as type from owner_history
            )
            select * from unioned order by account_id, created_date
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//account_owner_changelog',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.account_owner_changelog',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.account_owner_changelog',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ACCOUNT_OWNER_CHANGELOG',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_account_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Changelog of account source. Each row represents a change in source for a given account including the date of the change, the old source, and the new source.
        
        #### Raw SQL:
        ```sql
            with accounts as (
                select * from {{ ref('salesforce_accounts') }}
            )
            , account_source_history as (
                select * from {{ ref('salesforce_account_history') }}
                where field = 'Recent_Source__c'
            )
            , source_history as (
                select
                    account_id,
                    created_date,
                    old_value AS old_source,
                    new_value AS new_source,
                    row_number() over (partition by account_id order by created_date, account_history_id) as _rank, -- account_history_id is required to de-conflict identical created_dates
                    lag(new_value) over (partition by account_id order by created_date, account_history_id) = old_value as _check
                from account_source_history
            )
            , has_source_history as (
                select
                    distinct account_id,
                             true as has_history,
                             first_value(old_source) over (partition by account_id order by _rank) as first_source
                from source_history
            )
            ,  first_entry as (
                SELECT
                    account_id,
                    created_at AS created_date,
                    NULL AS old_source,
                    -- Since source history starts on Mar 19, 2024, we can't be sure what the first account source was
                    iff(created_at < '2024-03-19 17:24:32', 'unk', iff(has_history, first_source, account_source)) AS new_source -- TODO: should this also include `RECENT_SOURCE`?
                FROM accounts
                left join has_source_history using (account_id)
            )
            , unioned as (
                select *, 'first' as type from first_entry
                union
                select * exclude (_rank, _check), 'history' as type from source_history
            )
            select * from unioned order by account_id, created_date
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//account_source_changelog',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.account_source_changelog',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.account_source_changelog',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ACCOUNT_SOURCE_CHANGELOG',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_accounts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per account in Salesforce, with additional information from other Salesforce and Hubspot tables
        
        #### Raw SQL:
        ```sql
            with accounts as (
        
                select * from {{ ref('dim_accounts') }}
            ),
        
            abm_status_calc as (
        
                select
                    account_id,
                    case
                        when 
                            is_target_account = true 
                            and first_opp_won_date > first_day_as_target_account 
                            then '7. First Opportunity Won'
                        when 
                            is_target_account = true 
                            and first_sal_date > first_day_as_target_account 
                            then '6. First SAL'
                        when 
                            is_target_account = true 
                            and first_meeting_held_date > first_day_as_target_account 
                            then '5. Meeting Held'
                        when 
                            is_target_account = true 
                            and is_sales_working_account = true 
                            and date(last_sales_activity_at) >= (first_day_as_target_account - INTERVAL '7 days') 
                            then '4. Sales Working'
                        when 
                            is_target_account = true 
                            and is_engaged = true 
                            then '3. Marketing Engaged'
                        when 
                            is_target_account = true 
                            and intent_score > 0 
                            and is_engaged = false 
                            then '2. Marketing Activity, Not Engaged'
                        when 
                            is_target_account = true 
                            then '1. Target with no Marketing Activity'
                    else '0. Non-Target'
                    end as abm_status
                from accounts
            ),
        
            final as (
        
                select
                    acct.account_id, 
                    acct.account_name,
                    acct.is_target_account,
                    acct.target_account_type,
                    abm_status_calc.abm_status,
                    acct.intent_score,
                    acct.is_intent_score_greater_than_zero,
                    acct.is_engaged,
                    acct.has_active_contract,
                    acct.first_contract_start_date,
                    acct.last_contract_end_date,
                    acct.organization_id, 
                    acct.hubspot_company_id,
                    acct.stripe_customer_id, 
                    acct.account_owner_id, 
                    acct.account_owner_name,
                    acct.account_owned_since,
                    acct.open_opportunity_count,
                    acct.open_opportunity_new_arr,
                    acct.website, 
                    acct.industry, 
                    acct.is_public,
                    acct.annual_revenue, 
                    acct.number_of_employees, 
                    acct.description, 
                    acct.account_source, 
                    acct.arr, 
                    acct.account_source_custom, 
                    acct.recent_source, 
                    acct.account_status, 
                    acct.cloud_credits, 
                    acct.contracted_seats, 
                    acct.created_at,
                    acct.revenue_segment,
                    acct.total_funding,
                    acct.latest_funding_stage,
                    acct.last_funding_round_date,
                    acct.region,
                    acct.first_sal_date,
                    acct.last_sal_date,
                    case 
                        when first_sal_date is not null then true
                        else false
                        end as ever_had_sal,
                    acct.first_opp_won_date,
                    acct.first_day_as_target_account,
                    case
                        when intent_score > 0 then true
                        else false
                        end as has_current_intent_score,
                    acct.first_abm_campaign,
                    acct.total_sales_engaged_contact_count,
                    acct.total_sales_activity_count,
                    acct.last_sales_activity_at,
                    acct.is_sales_working_account,
                    acct.first_day_with_intent_score,
                    acct.last_day_with_intent_score,
                    acct.first_day_with_intent_score_as_target,
                    acct.last_day_with_intent_score_as_target,
                    acct.first_day_engaged,
                    acct.last_day_engaged,
                    acct.first_day_engaged_as_target,
                    acct.last_day_engaged_as_target
                from accounts as acct
                left join abm_status_calc on acct.account_id = abm_status_calc.account_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business',
      'key': 'sandbox//accounts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the account from Salesforce',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the account',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account is a target account',
              name='is_target_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Classification of target account type',
              name='target_account_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Account-based marketing status indicating where the account is in the marketing and sales funnel',
              name='abm_status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Score indicating the account's buying intent",
              name='intent_score',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if intent score is greater than zero',
              name='is_intent_score_greater_than_zero',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account is engaged with marketing',
              name='is_engaged',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account has an active contract',
              name='has_active_contract',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the first contract started',
              name='first_contract_start_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the last contract ended',
              name='last_contract_end_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the organization in Dagster+',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the company in Hubspot',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the customer in Stripe',
              name='stripe_customer_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the account owner',
              name='account_owner_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the account owner',
              name='account_owner_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date since when the current owner owns the account',
              name='account_owned_since',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of open opportunities for the account',
              name='open_opportunity_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total potential ARR from open opportunities',
              name='open_opportunity_new_arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Website URL of the account',
              name='website',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Industry classification of the account',
              name='industry',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Annual revenue of the account',
              name='annual_revenue',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of employees at the account',
              name='number_of_employees',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='General description of the account',
              name='description',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the account in Salesforce',
              name='account_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Annual recurring revenue from the account',
              name='arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Custom field for account source',
              name='account_source_custom',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent marketing source for the account',
              name='recent_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current status of the account',
              name='account_status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of cloud credits for the account',
              name='cloud_credits',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of contracted seats',
              name='contracted_seats',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the account was created',
              name='created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Defines whether the account is a corporate or enterprise account',
              name='revenue_segment',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of first Sales Accepted Lead',
              name='first_sal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of most recent Sales Accepted Lead',
              name='last_sal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account ever had a Sales Accepted Lead',
              name='ever_had_sal',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when first opportunity was won',
              name='first_opp_won_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First date the account was marked as a target account',
              name='first_day_as_target_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account currently has an intent score',
              name='has_current_intent_score',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First account-based marketing campaign the account was part of',
              name='first_abm_campaign',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total number of contacts engaged by sales',
              name='total_sales_engaged_contact_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total count of sales activities for the account',
              name='total_sales_activity_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the most recent sales activity',
              name='last_sales_activity_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if sales is actively working this account',
              name='is_sales_working_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First date the account had an intent score',
              name='first_day_with_intent_score',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent date the account had an intent score',
              name='last_day_with_intent_score',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First date the account had an intent score as a target account',
              name='first_day_with_intent_score_as_target',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent date the account had an intent score as a target account',
              name='last_day_with_intent_score_as_target',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First date the account was engaged',
              name='first_day_engaged',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent date the account was engaged',
              name='last_day_engaged',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First date the account was engaged as a target account',
              name='first_day_engaged_as_target',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Last date the account was engaged as a target account',
              name='last_day_engaged_as_target',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the first meeting was held with the account',
              name='first_meeting_held_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total amount of funding raised by the account',
              name='total_funding',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent funding stage of the account (e.g., Series A, Series B)',
              name='latest_funding_stage',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Geographic region where the account is located',
              name='region',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account is a public company',
              name='is_public',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the most recent funding round',
              name='last_funding_round_date',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.accounts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.accounts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ACCOUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_accounts_by_day',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per day per account in Salesforce, with additional information from other Salesforce and Hubspot tables
        
        #### Raw SQL:
        ```sql
            with accounts as (
        
                select * from {{ ref('dim_accounts_by_day') }}
            ),
        
            time_spine as (
        
                select * from {{ ref('time_spine') }}
            ),
        
            joined as (
        
                select 
                    accounts.*,
                    time_spine.day_name,
                    time_spine.day_of_week,
                    time_spine.fiscal_year,
                    time_spine.fiscal_quarter,
                    time_spine.is_first_day_of_week,
                    time_spine.is_last_day_of_week,
                    time_spine.is_first_day_of_month,
                    time_spine.is_last_day_of_month
                from accounts
                left join time_spine on time_spine.date_day = accounts.snapshot_date
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'business_by_day',
      'key': 'sandbox//accounts_by_day',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the account from Salesforce',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date for which this account data snapshot applies',
              name='snapshot_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the account',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account is a target account',
              name='is_target_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Classification of target account type',
              name='target_account_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Score indicating the account's buying intent",
              name='intent_score',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if intent score is greater than zero',
              name='is_intent_score_greater_than_zero',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account is engaged with marketing',
              name='is_engaged',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the account has an active contract',
              name='has_active_contract',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the organization in Dagster+',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the company in Hubspot',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the customer in Stripe',
              name='stripe_customer_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the account owner',
              name='account_owner_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the account owner',
              name='account_owner_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date since when the current owner owns the account',
              name='account_owned_since',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Website URL of the account',
              name='website',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Industry classification of the account',
              name='industry',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Annual revenue of the account',
              name='annual_revenue',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of employees at the account',
              name='number_of_employees',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='General description of the account',
              name='description',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the account in Salesforce',
              name='account_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Annual recurring revenue from the account',
              name='arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Custom field for account source',
              name='account_source_custom',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent marketing source for the account',
              name='recent_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current status of the account',
              name='account_status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of cloud credits for the account',
              name='cloud_credits',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of contracted seats',
              name='contracted_seats',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the account was created',
              name='created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this is a named account',
              name='is_named_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the day (e.g., Monday, Tuesday)',
              name='day_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Numeric day of the week',
              name='day_of_week',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Fiscal year for the snapshot date',
              name='fiscal_year',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Fiscal quarter for the snapshot date',
              name='fiscal_quarter',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the first day of the week',
              name='is_first_day_of_week',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the last day of the week',
              name='is_last_day_of_week',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the first day of the month',
              name='is_first_day_of_month',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the last day of the month',
              name='is_last_day_of_month',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.accounts_by_day',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.accounts_by_day',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ACCOUNTS_BY_DAY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'bing_ad_group_stats',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_group_stats',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'linkedin_ads_daily_campaign',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'reddit_ads_ad_group_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily ad spend metrics across multiple advertising platforms (Google Ads, LinkedIn Ads, Reddit Ads, and Bing Ads)
        
        #### Raw SQL:
        ```sql
            with google_ads_data as (
        
                select * from {{ ref('google_ads_ad_group_stats') }}
            ),
        
            linkedin_ads_data as (
                select * from {{ ref('linkedin_ads_daily_campaign') }}
            ),
        
            reddit_ads_data as (
                select * from {{ ref('reddit_ads_ad_group_report') }}
            ),  
        
            bing_ads_data as (
                select * from {{ ref('bing_ad_group_stats') }}
            ),
        
            google_ads as (
                select
                    date,
                    'Google Ads' as ad_platform,
                    campaign_id,
                    campaign_name,
                    ad_group_id,
                    ad_group_name,
                    sum(cost) as spend,
                    sum(impressions) as impressions,
                    sum(clicks) as clicks
                from google_ads_data
                group by all
            ),
        
            linkedin_ads as (
                select
                    date,
                    'LinkedIn Ads' as ad_platform,
                    campaign_id,
                    campaign_name,
                    null as ad_group_id,  -- Not available in source
                    null as ad_group_name,  -- Not available in source
                    sum(cost_usd) as spend,
                    sum(impressions) as impressions,
                    sum(clicks) as clicks
                from linkedin_ads_data
                group by all
            ),
        
            reddit_ads as (
                select
                    date,
                    'Reddit Ads' as ad_platform,
                    campaign_id,
                    campaign_name,
                    ad_group_id,
                    ad_group_name,
                    sum(spend) as spend,
                    sum(impressions) as impressions,
                    sum(clicks) as clicks
                from reddit_ads_data
                group by all
            ),
        
            bing_ads as (
                select
                    date,
                    'Bing Ads' as ad_platform,
                    campaign_id,
                    campaign_name,
                    ad_group_id,
                    ad_group_name,
                    sum(spend) as spend,
                    sum(impressions) as impressions,
                    sum(clicks) as clicks
                from bing_ads_data
                group by all
            ),
        
            final as (
        
                select * from google_ads
                union all
                select * from linkedin_ads
                union all
                select * from reddit_ads
                union all
                select * from bing_ads
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business_by_day',
      'key': 'sandbox//ad_spend_by_day',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date for which the ad metrics apply',
              name='date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the advertising platform (Google Ads, LinkedIn Ads, Reddit Ads, or Bing Ads)',
              name='ad_platform',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the campaign',
              name='campaign_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the campaign',
              name='campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the ad group (if available)',
              name='ad_group_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the ad group (if available)',
              name='ad_group_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total spend amount for the day',
              name='spend',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of ad impressions',
              name='impressions',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of ad clicks',
              name='clicks',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.ad_spend_by_day',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.ad_spend_by_day',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/AD_SPEND_BY_DAY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_adgroup_stats',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contact_web_touches',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Performance and cost information for an adgroup by date
        
        #### Raw SQL:
        ```sql
            with combined_ads_ad_group_stats as (
        
                select * from {{ ref('google_ads_adgroup_stats') }}
        
            ),
        
            hubspot_contact as (
        
                select *
                from {{ ref('hubspot_contacts') }}
                where coalesce(first_touch_campaign_id, '') != ''
        
            ),
        
            hubspot_contact_web_touches_before_signup as (
        
                select *
                from {{ ref('stg_hubspot__contact_web_touches') }}
                where coalesce(campaign_id, '') != ''
                    and attributed_to_signup
        
            ),
        
            hubspot_contact_influenced_signups as (
        
                select
                    session_started_at::date as touch_date,
                    campaign_id,
                    campaign_name,
                    ad_group_id,
                    ad_group_name,
                    count(distinct hubspot_contact_web_touches_before_signup.contact_id) as count_influenced_signups
                from hubspot_contact_web_touches_before_signup
                group by all
        
            ),
        
            stripe_invoices as (
        
                select
                    customer_id,
                    sum(invoice_total) as paid_lifetime_invoice_total
                from {{ ref('stripe_invoices') }}
                where invoice_status = 'paid'
                group by all
        
            ),
        
            hubspot_contact_signups as (
        
                select
                    first_touch_session_started_at::date as first_touch_date,
                    first_touch_campaign_id as campaign_id,
                    first_touch_campaign_name as campaign_name,
                    first_touch_adgroup_id as ad_group_id,
                    first_touch_adgroup_name as ad_group_name,
                    count(distinct hubspot_contact.contact_id) as count_signups,
                    count(distinct iff(contact_rank = 1, salesforce_account_id, null)) as count_new_accounts,
                    sum(stripe_invoices.paid_lifetime_invoice_total) as paid_lifetime_invoice_total
                from hubspot_contact
                left join stripe_invoices
                    on
                        hubspot_contact.stripe_customer_id = stripe_invoices.customer_id
                        and contact_rank = 1
                group by all
        
            ),
        
            ad_group_metrics_by_date as (
        
                select
                    coalesce(
                        combined_ads_ad_group_stats.date,
                        hubspot_contact_signups.first_touch_date,
                        hubspot_contact_influenced_signups.touch_date
                    ) as ad_date,
                    coalesce(
                        combined_ads_ad_group_stats.campaign_id,
                        hubspot_contact_signups.campaign_id,
                        hubspot_contact_influenced_signups.campaign_id,
                        ''
                    ) as campaign_id,
                    coalesce(
                        combined_ads_ad_group_stats.campaign_name,
                        hubspot_contact_signups.campaign_name,
                        hubspot_contact_influenced_signups.campaign_name
                    ) as campaign_name,
                    coalesce(
                        combined_ads_ad_group_stats.ad_group_id,
                        hubspot_contact_signups.ad_group_id,
                        hubspot_contact_influenced_signups.ad_group_id,
                        ''
                    ) as ad_group_id,
                    coalesce(
                        combined_ads_ad_group_stats.ad_group_name,
                        hubspot_contact_signups.ad_group_name,
                        hubspot_contact_influenced_signups.ad_group_name
                    ) as ad_group_name,
                    coalesce(combined_ads_ad_group_stats.impressions, 0) as impressions,
                    coalesce(combined_ads_ad_group_stats.clicks, 0) as clicks,
                    coalesce(
                        hubspot_contact_signups.count_signups,
                        0
                    ) as count_signups,
                    coalesce(
                        hubspot_contact_influenced_signups.count_influenced_signups,
                        0
                    ) as count_influenced_signups,
                    coalesce(
                        hubspot_contact_signups.count_new_accounts,
                        0
                    ) as count_new_accounts,
                    round(coalesce(
                        hubspot_contact_signups.paid_lifetime_invoice_total,
                        0
                    ), 2) as paid_lifetime_invoice_total,
                    round(coalesce(combined_ads_ad_group_stats.cost, 0), 2) as cost
                from combined_ads_ad_group_stats
                left join hubspot_contact_signups
                    on
                        combined_ads_ad_group_stats.date = hubspot_contact_signups.first_touch_date
                        and
                        combined_ads_ad_group_stats.ad_group_id = hubspot_contact_signups.ad_group_id
                        and combined_ads_ad_group_stats.campaign_id = hubspot_contact_signups.campaign_id
                left join hubspot_contact_influenced_signups
                    on
                        combined_ads_ad_group_stats.date = hubspot_contact_influenced_signups.touch_date
                        and
                        combined_ads_ad_group_stats.ad_group_id = hubspot_contact_influenced_signups.ad_group_id
                        and combined_ads_ad_group_stats.campaign_id = hubspot_contact_influenced_signups.campaign_id
        
            ),
        
            ad_group_performance_by_date as (
        
                select
                    {{ dbt_utils.generate_surrogate_key(['campaign_id','ad_group_id','ad_date']) }}
                        as unique_key,
                    *,
                    round(cost / nullif(count_signups, 0), 2) as cost_per_signup,
                    round(cost / nullif(count_new_accounts, 0), 2) as cost_per_new_account
                from ad_group_metrics_by_date
        
            )
        
            select * from ad_group_performance_by_date
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//adgroup_performance_by_date',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.adgroup_performance_by_date',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.adgroup_performance_by_date',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ADGROUP_PERFORMANCE_BY_DATE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contracts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Uses contract info to determine a line by line ARR report
        
        #### Raw SQL:
        ```sql
            with contract_data as (
        
                select * from {{ ref("salesforce_contracts") }}
            ),
        
            time_spine as (
        
                select * from {{ ref("time_spine") }}
            ),
        
            contracts as (
            
                select 
                    contract_id,
                    account_id,
                    account_name,
                    opportunity_type,
                    opportunity_id,
                    opportunity_name,
                    arr,
                    cloud_credits_contracted,
                    contract_number,
                    contract_term,
                    created_date,
                    contract_start_date,
                    contract_end_date,
                    launcher_seats,
                    pricing_model,
                    is_serverless,
                    contract_status,
                    activated_date,
                    billed_thru,
                    roll_over_credits,
                    is_active_contract
                from contract_data
            ),
        
            first_days as (
            
                select 
                    date_day as month_start
                from time_spine
                where is_first_day_of_month = true
            ),
        
            expanded as (
        
                select
                    date_trunc('month', d.month_start) as arr_month,
                    c.*,
                    date(d.month_start) as month_start,
                    last_day(d.month_start) as month_end,
                from contracts c
                join first_days d on d.month_start >= date_trunc('month', c.contract_start_date)
                   and d.month_start <= date_trunc('month', 
                       case 
                           when c.contract_end_date = last_day(c.contract_end_date) then c.contract_end_date
                           else dateadd(month, -1, c.contract_end_date) 
                           end)
            ),
        
            fiscal_info as (
        
                select
                    e.*,
                    t.fiscal_year,
                    t.fiscal_quarter,
                    t.fiscal_quarter_name
                from expanded e 
                left join time_spine t on e.arr_month = t.date_day
            )
        
            select * from fiscal_info
        ```
      ''',
      'group_name': 'business_by_day',
      'key': 'sandbox//arr_by_month',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the contract',
              name='contract_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Month for which this ARR data applies',
              name='arr_month',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Related account identifier',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the related account',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Type of opportunity (e.g., new business, expansion)',
              name='opportunity_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Related opportunity identifier',
              name='opportunity_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the related opportunity',
              name='opportunity_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Annual recurring revenue for the month',
              name='arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of cloud credits contracted',
              name='cloud_credits_contracted',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique contract number in Salesforce',
              name='contract_number',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Term length of the contract',
              name='contract_term',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the contract was created',
              name='created_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Start date of the contract',
              name='contract_start_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='End date of the contract',
              name='contract_end_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of launcher seats included in the contract',
              name='launcher_seats',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Pricing model used for the contract',
              name='pricing_model',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this is a serverless contract',
              name='is_serverless',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current status of the contract',
              name='contract_status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the contract was activated',
              name='activated_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date through which the contract has been billed',
              name='billed_thru',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of roll over credits',
              name='roll_over_credits',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the contract is currently active',
              name='is_active_contract',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First day of the month for this ARR entry',
              name='month_start',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Last day of the month for this ARR entry',
              name='month_end',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Fiscal year for the arr_month',
              name='fiscal_year',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Fiscal quarter for the arr_month',
              name='fiscal_quarter',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the fiscal quarter (e.g., Q1, Q2)',
              name='fiscal_quarter_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if arr_month is the first month of the quarter',
              name='is_first_month_of_quarter',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if arr_month is the last month of the quarter',
              name='is_last_month_of_quarter',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Primary use case for the contract',
              name='primary_use_case',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.arr_by_month',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.arr_by_month',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ARR_BY_MONTH',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_event_logs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'code_location_assets',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        A richer data set for asset check executions that provides information as to whether the associated asset is a dbt asset
        
        #### Raw SQL:
        ```sql
            {{ config(snowflake_warehouse="L_WAREHOUSE") }}
            with
        
            asset_keys as (
                select
                    organization_id,
                    deployment_id,
                    asset_key,
                    array_contains('dbt'::variant, kinds) as is_dbt
                from {{ ref('code_location_assets') }}
                qualify row_number() over (partition by organization_id, deployment_id, asset_key order by replication_date desc) = 1 
            ),
        
            asset_checks as (
                select
                *
                from {{  ref('cloud_product_event_logs') }}
                where dagster_event_type = 'ASSET_CHECK_EVALUATION'
            )
        
            select
                organization_id,
                deployment_id,
                asset_key,
                event_log_id,
                run_id,
                step_key,
                event_data,
                created_at,
                coalesce(is_dbt, false) as is_dbt
            from asset_checks
                left join asset_keys using (organization_id, deployment_id, asset_key)
        ```
      ''',
      'group_name': 'mart_product',
      'key': 'sandbox//asset_check_executions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.asset_check_executions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.asset_check_executions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ASSET_CHECK_EXECUTIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__event_logs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Contains any metadata entries associated with asset events.
        
        
        #### Raw SQL:
        ```sql
            {{
                config(
                    snowflake_warehouse="L_WAREHOUSE",
                    materialized='incremental',
                    unique_key='unique_key',
                    incremental_strategy='merge',
                    on_schema_change='append_new_columns'
                )
            }}
        
            with filtered_event_log_data as (
                select
                    *,
                    parse_json(el.event_data) as parsed_event_data
                from
                    {{ ref('stg_cloud_product__event_logs') }} as el
                where
                    dagster_event_type in ('ASSET_MATERIALIZATION', 'ASSET_OBSERVATION')
                    and event_log_id <> 2545324222 -- this event has duplicate metadata keys, causing duplicate IDs
                {% if is_incremental() %}
                    and created_at >= '{{ var('min_date') }}' and created_at < '{{ var('max_date') }}'
                {% endif %}
            )
        
            select
                {{ dbt_utils.generate_surrogate_key([
                    'el.event_log_id',
                    'met.value:"label"',
                ]) }} as unique_key,
                el.organization_id,
                el.deployment_id,
                el.event_log_id,
                el.run_id,
                el.step_key,
                el.created_at,
                el.dagster_event_type,
                -- Asset key must be formatted w/ no spaces, for joining w/ other Insights tables
                -- e.g. '["my","prefixed","asset","key"]'
                to_json(parse_json(el.asset_key)) as asset_key,
                cast(met.value:"label" as text) as label,
                cast(met.value:"entry_data":"__class__" as text) as metadata_type,
                met.value:"entry_data":"value" as metadata_value
            from
                filtered_event_log_data as el,
                lateral flatten(
                    input =>
                    coalesce(
                        (
                            parsed_event_data:"dagster_event":"event_specific_data"
                        ):"materialization":"metadata_entries",
                        (
                            parsed_event_data:"dagster_event":"event_specific_data"
                        ):"asset_observation":"metadata_entries"
                    )
                ) as met
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//asset_event_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.asset_event_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.asset_event_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ASSET_EVENT_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Intermediate table that stores metadata about asset key -> group mappings
        
        #### Raw SQL:
        ```sql
            with repo_location_data as (
                select * from {{ ref('stg_cloud_product__repository_locations_data') }}
            ),
        
            base_asset_groups as (
                select
                    repo_location_data.organization_id,
                    repo_location_data.deployment_id,
                    to_json(parse_json(asset_key.value:path)) as asset_key,
                    repo_location_data.group_names[asset_key.index] as group_name,
                    repo_location_data.group_names[asset_key.index] != 'null' as has_group_name,
                    repo_location_data.created_at as create_timestamp
                from
                    repo_location_data,
                    lateral flatten(
                        input => repo_location_data.asset_keys
                    ) as asset_key
            )
        
            select *
            from
                base_asset_groups
            qualify rank() over (
                partition by
                    organization_id,
                    deployment_id,
                    asset_key
                order by
                    has_group_name asc,
                    create_timestamp desc
            ) = 1
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//asset_groups',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.asset_groups',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.asset_groups',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ASSET_GROUPS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'first_touch',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Final attributed conversion model on first touch sessions
        
        #### Raw SQL:
        ```sql
            with user_organizations as (
                select * from {{ ref('user_organizations') }}
            ),
        
            first_touch as (
                select * from {{ ref('first_touch') }}
            ),
        
            organizations as (
                select * from {{ ref('dim_organizations') }}
            ),
        
            users as (
                select * from {{ ref('dim_users') }}
            ),
        
            workspace_creating_user as (
                select
        
                    organization_id,
                    user_id::varchar as user_id,
                    relationship_created_at as first_created_at,
                    row_number() over (partition by organization_id order by relationship_created_at) as rn
        
                from user_organizations
                qualify rn = 1
            ),
        
            first_touch_cats as (
                select
        
                    blended_user_id,
                    session_id,
                    session_started_at,
                    attribution_category
        
                from first_touch
        
                qualify row_number() over (partition by blended_user_id order by session_started_at asc) = 1
            ),
        
            final as (
                select
        
                    users.user_id,
                    users.user_name,
                    users.email,
                    users.user_title,
                    users.experience,
                    users.created_at as user_created_at,
        
                    workspace_creating_user.first_created_at as user_workspace_first_created_at,
        
                    organizations.organization_id,
                    organizations.organization_name,
                    organizations.org_created_at,
                    organizations.is_active,
                    organizations.plan_type,
                    organizations.status as organisation_status,
                    organizations.last_run_at,
        
                    first_touch_cats.session_id,
                    first_touch_cats.session_started_at,
                    first_touch_cats.attribution_category
        
                from workspace_creating_user
                inner join first_touch_cats
                    on
                        workspace_creating_user.user_id = first_touch_cats.blended_user_id
                        and workspace_creating_user.first_created_at >= first_touch_cats.session_started_at
                        and datediff(
                            'days',
                            first_touch_cats.session_started_at,
                            workspace_creating_user.first_created_at
                        )
                        <= {{ var('attribution_lookback_days') }}
                inner join organizations using (organization_id)
                inner join users using (user_id)
                where not organizations.is_internal
            )
        
            select * from final
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//attributed_conversions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.attributed_conversions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.attributed_conversions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ATTRIBUTED_CONVERSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'base_step_metrics',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Graph data for a set of Dagster steps
        
        #### Raw SQL:
        ```sql
            {{ config(snowflake_warehouse="L_WAREHOUSE") }}
        
            with base_step_metrics as (
                select
                    split_part(step_key, '.', 1) as graph_name,
                    *
                from {{ ref('base_step_metrics') }}
                where step_key like '%.%'
            )
        
            select
                base_step_metrics.graph_name,
                base_step_metrics.organization_id,
                base_step_metrics.deployment_id,
                base_step_metrics.run_id,
                max(base_step_metrics._incremented_at) as _incremented_at,
        
                sum(base_step_metrics.dagster_credits) as dagster_credits,
                sum(base_step_metrics.step_duration_mins) as step_duration_mins,
                sum(base_step_metrics.execution_time_ms) as execution_time_ms,
                sum(base_step_metrics.unaccounted_duration_ms) as unaccounted_duration_ms,
                sum(base_step_metrics.unaccounted_duration_s) as unaccounted_duration_s,
                sum(base_step_metrics.assets_with_execution_time_metadata)
                    as assets_with_execution_time_metadata,
                sum(base_step_metrics.retry_duration_ms) as retry_duration_ms,
                sum(base_step_metrics.step_retries) as step_retries,
                sum(base_step_metrics.step_failures) as step_failures,
                sum(base_step_metrics.observations) as observations,
                sum(base_step_metrics.materializations) as materializations,
                sum(base_step_metrics.asset_check_errors) as asset_check_errors,
                sum(base_step_metrics.asset_check_warnings) as asset_check_warnings
        
        
            from base_step_metrics group by 1, 2, 3, 4
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//base_graph_metrics',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='graph_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='deployment_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='run_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='_incremented_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='dagster_credits',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.base_graph_metrics',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.base_graph_metrics',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/BASE_GRAPH_METRICS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_account_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Distinct sales cycles for each account. A sales cycle starts when a salesperson is assigned to an account and ends when the associated opportunity is closed or Dev Tools is assigned to the account.
        
        #### Raw SQL:
        ```sql
            with
        
            accounts as (
                select *
                from {{ ref('salesforce_accounts') }}
            ),
        
            opps as (
                select *
                from {{ ref('salesforce_opportunities') }}
            ),
        
            -- Only care about when the owner field changed, and only care about changes after 2023
            account_owner_history as (
                select
                    account_id,
                    created_date,
                    old_value as old_owner,
                    new_value as new_owner
                from {{ ref('salesforce_account_history') }}
                    inner join accounts using (account_id)
                where field = 'Owner' and data_type = 'EntityId' and created_date >= '2023-01-01'
            ),
        
            -- Create an owner change record for the first owner assigned at the creation of the account
            original_account_owner_record as (
                select
                    account_id,
                    accounts.created_at as created_date,
                    null as old_owner,
                    coalesce(old_owner, accounts.owner_id) as new_owner
                from account_owner_history
                    full outer join accounts using (account_id)
                where coalesce(old_owner, accounts.owner_id) <> '0055f000007uaxUAAQ'
                qualify row_number() over (partition by account_id order by created_date) = 1
            ),
        
            -- Combine these new records with the existing owner history,
            -- use a qualify to ensure we're not duplicating a timestamp
            all_account_owner_history as (
                with combined as (
                    select *, 1 as priority from account_owner_history
                    union 
                    select *, 2 as priority from original_account_owner_record
                )
                select * exclude priority
                from combined
                qualify row_number() over (partition by account_id, created_date order by priority) = 1
            ),
        
            -- Ensure that the new owner is the old owner in the next record, if not then the record is invalid
            all_account_owner_history_dedup as (
                select
                    account_id,
                    created_date,
                    old_owner,
                    iff(new_owner = '0055f000007uaxUAAQ', new_owner, coalesce(lead(old_owner) over (partition by account_id order by created_date), new_owner)) as actual_new_owner
                from all_account_owner_history
                qualify
                    actual_new_owner <> old_owner
                    or new_owner is null
                    or old_owner is null
            ),
        
            -- Create a field that tracks when accounts are reassigned back to dev tools as it marks the end of a sales cycle
            sales_cycle_activity as (
                select
                    account_id,
                    CONDITIONAL_TRUE_EVENT(old_owner = '0055f000007uaxUAAQ') OVER (PARTITION BY account_id ORDER BY created_date) as account_sales_cycle_id,
                    created_date as assignment_date,
                    actual_new_owner as owner
                from all_account_owner_history_dedup
                order by account_id, created_date
            ),
        
            -- Get the last owner assigned to the sales cycle, we'll need to know if it is dev tools to determine if the sales cycle was either
            -- closed for another reason (won, lost) or remains open
            sales_cycle_last_assignment as (
                select
                    *,
                    iff(owner = '0055f000007uaxUAAQ', 1, 0) as devtools_last,
                    last_value(owner) over (partition by account_id, account_sales_cycle_id order by assignment_date, devtools_last) as last_owner_assigned,
                    max(assignment_date) over (partition by account_id, account_sales_cycle_id) as last_assignment_date,
                    iff(last_owner_assigned = '0055f000007uaxUAAQ', last_assignment_date, null) as dev_tools_assigned_date,
                    min(assignment_date) over (partition by account_id, account_sales_cycle_id) as start_date
                from sales_cycle_activity
            ),
        
            -- Filter out the dev tool ownership records as we now have everything we need from those
            -- Grab the last assignment that was not a dev tools assignment, this will be considered the last owner of the sales cycle
            sales_cycles_no_dev_tools as (
                select
                    account_id,
                    account_sales_cycle_id,
                    start_date,
                    owner,
                    dev_tools_assigned_date
                from sales_cycle_last_assignment
                where owner <> '0055f000007uaxUAAQ'
                qualify row_number() over (partition by account_id, account_sales_cycle_id order by assignment_date desc) = 1
            ),
        
            -- Add in new business opportunities, if there is a reopened opp for the same sales cycle then get the most recent one
            sales_cycles as (
                select
                    sc.account_id,
                    sc.account_sales_cycle_id,
                    sc.owner,
                    sc.start_date,
                    coalesce(o.close_date, sc.dev_tools_assigned_date) as end_date,
                    o.opportunity_id,
                    o.created_at as opportunity_start,
                    o.sal_date,
                    o.close_date,
                    o.is_won,
                    o.stage_name,
                    coalesce(end_date::date > current_date or end_date is null or not o.is_closed, false) as is_active,
                    a.recent_source as current_recent_source
                from sales_cycles_no_dev_tools sc
                    left join accounts a on sc.account_id = a.account_id
                    left join opps o 
                        on sc.account_id = o.account_id 
                            and (
                                (o.created_at > sc.start_date and o.created_at <= sc.dev_tools_assigned_date) 
                                or (o.created_at >= sc.start_date and sc.dev_tools_assigned_date is null)
                            )
                            and opportunity_type = 'New Business'
                            and not (a.is_named_account and o.stage_name = 'Closed Lost')
                qualify row_number() over (partition by sc.account_id, sc.account_sales_cycle_id order by o.created_at desc) = 1
                order by sc.account_id, account_sales_cycle_id
            )
        
            select * from sales_cycles
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//base_sales_cycles',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.base_sales_cycles',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.base_sales_cycles',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/BASE_SALES_CYCLES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'execution_time_metadata',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_steps',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__event_logs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Base step metrics model, serves as the foundation for both
        consumption and usage/billing related models. This table counts metrics
        at the step level, such as the number of asset checks, credits,
        durations, observations, and materializations per step.
        
        For aggregated metrics, refer to `usage_metrics_daily` and the
        `cloud_reporting` models.
        
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key='step_data_id',
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
        
            with steps as (
                select * from {{ ref('fct_steps') }}
                where not is_anomaly
            ),
        
            event_logs as (
                select * from {{ ref('stg_cloud_product__event_logs') }}
            ),
        
            execution_time_metadata as (
                select * from {{ ref('execution_time_metadata') }}
            ),
        
            step_retries as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as step_retries
                from event_logs
                where dagster_event_type = 'STEP_RESTARTED'
                group by all
            ),
        
            step_failures as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as step_failures
                from event_logs
                where dagster_event_type = 'STEP_FAILURE'
                group by all
            ),
        
            observations as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as asset_observations
                from event_logs
                where dagster_event_type = 'ASSET_OBSERVATION'
                group by all
            ),
        
            runless_observations as (
                select
                    run_id,
                    created_at as run_ended_at,
                    created_at as run_started_at,
                    organization_id,
                    deployment_id,
                    count(*) as runless_asset_observations
                from event_logs
                where dagster_event_type = 'ASSET_OBSERVATION' and run_id = ''
                group by all
            ),
        
            materializations as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as asset_materializations
                from event_logs
                where dagster_event_type = 'ASSET_MATERIALIZATION'
                group by all
            ),
        
            runless_materializations as (
                select
                    run_id,
                    created_at as run_ended_at,
                    created_at as run_started_at,
                    organization_id,
                    deployment_id,
                    count(*) as runless_asset_materializations
                from event_logs
                where dagster_event_type = 'ASSET_MATERIALIZATION' and run_id = ''
                group by all
            ),
        
            asset_check_errors as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as asset_check_errors
                from event_logs
                where
                    dagster_event_type = 'ASSET_CHECK_EVALUATION'
                    and parse_json(event_data):dagster_event:event_specific_data:success = 'false'
                    and parse_json(event_data):dagster_event:event_specific_data:severity:__enum__::string
                    = 'AssetCheckSeverity.ERROR'
                group by all
            ),
        
            asset_check_warnings as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as asset_check_warnings
                from event_logs
                where
                    dagster_event_type = 'ASSET_CHECK_EVALUATION'
                    and parse_json(event_data):dagster_event:event_specific_data:success = 'false'
                    and parse_json(event_data):dagster_event:event_specific_data:severity:__enum__::string
                    = 'AssetCheckSeverity.WARN'
                group by all
            ),
        
            freshness_checks as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as freshness_checks
                from event_logs
                where
                    dagster_event_type = 'ASSET_CHECK_EVALUATION'
                    and is_null_value(
                        parse_json(
                            event_data
                        ):dagster_event:event_specific_data:metadata:"dagster/freshness_params"
                    ) is not null
                group by all
            ),
        
            anomaly_detection_checks as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as anomaly_detection_checks
                from event_logs
                where
                    dagster_event_type = 'ASSET_CHECK_EVALUATION'
                    and is_null_value(
                        parse_json(
                            event_data
                        ):dagster_event:event_specific_data:metadata:"dagster/anomaly_detection_model_params"
                    ) is not null
                group by all
        
            ),
        
        
            -- We compute the total execution time that is specifically
            -- allocated to specific assets. This is often less than the
            -- total execution time, since often compute is not attributed to a
            -- specific asset.
            asset_execution_time as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    sum(execution_time_s) * 1000 as total_execution_time_ms,
                    count(*) as assets_with_metadata
                from execution_time_metadata
                group by all
            ),
        
            check_steps as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count(*) as asset_checks
                from event_logs
                where dagster_event_type in ('ASSET_CHECK_EVALUATION', 'ASSET_CHECK_EVALUATION_PLANNED')
                group by all
            ),
        
            -- The first asset materialization event per hour for each deployment-scoped
            -- asset key is considered a standard materialization. Subsequent materializations
            -- in the same hour are considered high velocity materializations.
            standard_materialization_ids as (
                select
                    asset_key,
                    date_trunc(hour, created_at) as hour,
                    min(event_log_id) as event_log_id,
                    deployment_id,
                    organization_id,
                from event_logs
                where dagster_event_type = 'ASSET_MATERIALIZATION'
                group by all
            ),
        
            standard_and_high_velocity_materializations as (
                select
                    e.organization_id,
                    e.run_id,
                    e.step_key,
                    count_if(m.event_log_id = e.event_log_id) as standard_materializations,
                    count_if(m.event_log_id is null) as high_velocity_materializations,
                from event_logs as e
                    left join standard_materialization_ids as m on e.event_log_id = m.event_log_id
                where e.dagster_event_type = 'ASSET_MATERIALIZATION'
                group by all
            ),
        
        
            -- The first step per hour in a unique job and deployment
            -- is considered a standard step. Subsequent steps
            -- in the same hour are considered high velocity steps.
            standard_step_ids as (
                select
                    regexp_replace(step_key, '\\[(.*?)\\]') as step_key,
                    date_trunc(hour, end_time) as hour,
                    min(step_id) as step_id,
                    job_name,
                    deployment_id,
                    organization_id,
                from steps
                where is_billable_step
                group by all
            ),
        
            standard_and_high_velocity_steps as (
                select
                    s.organization_id,
                    s.run_id,
                    s.step_key,
                    count_if(i.step_id = s.step_id) as standard_steps,
                    count_if(i.step_id is null) as high_velocity_steps,
                from steps as s
                    left join standard_step_ids as i on s.step_id = i.step_id
                where is_billable_step
                group by all
            ),
        
            metrics_joined as (
                select
                    coalesce(
                        steps.organization_id,
                        runless_observations.organization_id,
                        runless_materializations.organization_id
                    ) as organization_id,
                    coalesce(
                        steps.deployment_id,
                        runless_observations.deployment_id,
                        runless_materializations.deployment_id
                    ) as deployment_id,
                    coalesce(
                        steps.run_id,
                        runless_observations.run_id,
                        runless_materializations.run_id
                    ) as run_id,
                    steps.step_id,
                    steps.step_data_id,
                    steps._incremented_at,
                    steps.step_key,
                    coalesce(
                        steps.run_ended_at,
                        runless_observations.run_ended_at,
                        runless_materializations.run_ended_at
                    ) as run_ended_at,
                    coalesce(
                        steps.run_started_at,
                        runless_observations.run_started_at,
                        runless_materializations.run_started_at
                    ) as run_started_at,
        
                    zeroifnull(observations.asset_observations)::number as asset_observations,
                    zeroifnull(runless_observations.runless_asset_observations)::number
                        as runless_asset_observations,
                    zeroifnull(materializations.asset_materializations)::number as asset_materializations,
                    zeroifnull(runless_materializations.runless_asset_materializations)::number
                        as runless_asset_materializations,
                    iff(steps.step_id is null, 0, 1)::number as steps,
        
                    zeroifnull(check_steps.asset_checks)::number as asset_checks,
                    zeroifnull(steps.step_duration_mins)::number as step_duration_mins,
                    zeroifnull(steps.step_duration_ms)::number as execution_time_ms,
        
                    zeroifnull(asset_execution_time.total_execution_time_ms)::number as total_execution_time_ms,
                    zeroifnull(asset_execution_time.assets_with_metadata)::number
                        as assets_with_execution_time_metadata,
        
                    zeroifnull(steps.retry_duration_ms)::number as retry_duration_ms,
                    zeroifnull(step_retries.step_retries)::number as step_retries,
                    zeroifnull(step_failures.step_failures)::number as step_failures,
        
                    zeroifnull(asset_check_errors.asset_check_errors)::number as asset_check_errors,
                    zeroifnull(asset_check_warnings.asset_check_warnings)::number as asset_check_warnings,
                    zeroifnull(freshness_checks.freshness_checks)::number as freshness_checks,
                    zeroifnull(anomaly_detection_checks.anomaly_detection_checks)::number
                        as anomaly_detection_checks,
                
                    zeroifnull(standard_and_high_velocity_materializations.standard_materializations)::number
                        as standard_materializations,
                    zeroifnull(standard_and_high_velocity_materializations.high_velocity_materializations)::number
                        as high_velocity_materializations,
        
                    zeroifnull(standard_and_high_velocity_steps.standard_steps)::number
                        as standard_steps,
                    zeroifnull(standard_and_high_velocity_steps.high_velocity_steps)::number
                        as high_velocity_steps
        
                from steps
                left join step_retries using (run_id, step_key, organization_id)
                left join step_failures using (run_id, step_key, organization_id)
                left join observations using (run_id, step_key, organization_id)
                full outer join runless_observations using (run_id, organization_id, deployment_id)
                left join materializations using (run_id, step_key, organization_id)
                full outer join runless_materializations using (run_id, organization_id, deployment_id)
                left join asset_execution_time using (run_id, step_key, organization_id)
                left join check_steps using (run_id, step_key, organization_id)
                left join asset_check_errors using (run_id, step_key, organization_id)
                left join asset_check_warnings using (run_id, step_key, organization_id)
                left join freshness_checks using (run_id, step_key, organization_id)
                left join anomaly_detection_checks using (run_id, step_key, organization_id)
                left join standard_and_high_velocity_materializations using (run_id, step_key, organization_id)
                left join standard_and_high_velocity_steps using (run_id, step_key, organization_id)
            )
        
            select
        
                organization_id,
                deployment_id,
                run_id,
                step_id,
                step_data_id,
                _incremented_at,
                step_key,
                run_ended_at,
                run_started_at,
        
                asset_observations + runless_asset_observations as observations,
                asset_materializations + runless_asset_materializations as materializations,
                steps,
                materializations + steps as dagster_credits,
                asset_checks,
                step_duration_mins,
                execution_time_ms,
        
                execution_time_ms - total_execution_time_ms as unaccounted_duration_ms,
                unaccounted_duration_ms / 1000 as unaccounted_duration_s,
        
                assets_with_execution_time_metadata,
        
                retry_duration_ms,
                step_retries,
                step_failures,
        
                asset_check_errors,
                asset_check_warnings,
                freshness_checks,
                anomaly_detection_checks,
        
                case
                    when materializations = 0 and asset_checks > 0 then 1
                    else 0
                end as asset_check_only_steps,
        
                standard_steps,
                high_velocity_steps,
                standard_materializations,
                high_velocity_materializations,
                -- when counting credits, ignore steps that are asset check only steps
                -- standard_steps and high_velocity_steps each have a max of 1
                case
                    when asset_check_only_steps = 1 then standard_materializations
                    else standard_materializations + standard_steps
                end as standard_credits,
                case
                    when asset_check_only_steps = 1 then high_velocity_materializations
                    else high_velocity_materializations + high_velocity_steps
                end as high_velocity_credits
        
            from metrics_joined
        
            {% if is_incremental() %}
                where
                    run_ended_at >= '{{ var('min_date') }}'
                    and run_ended_at < '{{ var('max_date') }}'
            {% endif %}
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//base_step_metrics',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='run_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='step_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='step_data_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.base_step_metrics',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.base_step_metrics',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/BASE_STEP_METRICS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'asset_event_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Stores asset materializations for Insights BigQuery cost tracking.
        
        #### Raw SQL:
        ```sql
            select
                organization_id,
                deployment_id,
                event_log_id,
                run_id,
                step_key,
                created_at,
                asset_key,
                'bytes_billed' as label,
                cast(metadata_value as number) as bytes_billed
            from
                {{ ref('asset_event_metadata') }}
            where
                label = '__bigquery_bytes_billed'
                and dagster_event_type = 'ASSET_OBSERVATION'
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//bigquery_cost_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.bigquery_cost_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.bigquery_cost_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/BIGQUERY_COST_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_bing__ad_group_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_bing__ad_group_performance_daily_report',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_bing__campaign_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per bing ad group per day active
        
        #### Raw SQL:
        ```sql
            with ad_analytics as (
        
                select * from {{ ref('stg_bing__ad_group_performance_daily_report') }}
            ),
        
            campaigns as (
        
                select * from {{ ref('stg_bing__campaign_history') }}
            
            ),
        
            ad_groups as (
        
                select * from {{ ref('stg_bing__ad_group_history') }}
            
            ),
        
            latest_campaign as (
        
                select * from campaigns
                qualify row_number() over (partition by campaign_id order by modified_time desc) = 1
        
            ),
        
            latest_ad_group as (
        
                select * from ad_groups
                qualify row_number() over (partition by ad_group_id order by modified_time desc) = 1
        
            ),
        
            final as (
        
                select 
                    ad_analytics.date,
                    ad_analytics.account_id,
                    ad_analytics.campaign_id,
                    campaign.campaign_name,
                    ad_analytics.ad_group_id,
                    ad_group.ad_group_name,
                    ad_analytics.impressions,
                    ad_analytics.clicks,
                    ad_analytics.ctr,
                    ad_analytics.average_cpc,
                    ad_analytics.spend,
                    ad_analytics.ad_distribution,
                from ad_analytics
                left join latest_campaign as campaign on ad_analytics.campaign_id = campaign.campaign_id
                left join latest_ad_group as ad_group on ad_analytics.ad_group_id = ad_group.ad_group_id
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_bing',
      'key': 'sandbox//bing_ad_group_stats',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.bing_ad_group_stats',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.bing_ad_group_stats',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/BING_AD_GROUP_STATS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_buildkite__builds',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Metadata about CI/CD builds in Buildkite
        
        #### Raw SQL:
        ```sql
            select
        
                id,
                graphql_id,
                url,
                web_url,
                number,
                state,
                blocked,
                blocked_state,
                message,
                commit,
                branch,
                env__dagster_branch as env_dagster_branch,
                env__dagster_commit_hash as env_dagster_commit_hash,
                env__combined_commit_hash as env_combined_commit_hash,
                env__internal_commit_hash as env_internal_commit_hash,
                source,
                author__username as author_username,
                author__name as author_name,
                author__email as author_email,
                creator__id as creator_id,
                creator__graphql_id as creator_graphql_id,
                creator__name as creator_name,
                creator__email as creator_email,
                creator__avatar_url as creator_avatar_url,
                creator__created_at as creator_created_at,
                created_at,
                scheduled_at,
                started_at,
                finished_at,
                meta_data__buildkite_git_commit as meta_data_buildkite_git_commit,
                pipeline__id as pipeline_id,
                pipeline__graphql_id as pipeline_graphql_id,
                pipeline__url as pipeline_url,
                pipeline__web_url as pipeline_web_url,
                pipeline__name as pipeline_name,
                pipeline__description as pipeline_description,
                pipeline__slug as pipeline_slug,
                pipeline__repository as pipeline_repository,
                pipeline__branch_configuration as pipeline_branch_configuration,
                pipeline__default_branch as pipeline_default_branch,
                pipeline__skip_queued_branch_builds as pipeline_skip_queued_branch_builds,
                pipeline__skip_queued_branch_builds_filter as pipeline_skip_queued_branch_builds_filter,
                pipeline__cancel_running_branch_builds as pipeline_cancel_running_branch_builds,
                pipeline__cancel_running_branch_builds_filter as pipeline_cancel_running_branch_builds_filter,
                pipeline__allow_rebuilds as pipeline_allow_rebuilds,
                pipeline__provider__id as pipeline_provider_id,
                pipeline__provider__settings__build_branches as pipeline_provider_settings_build_branches,
                pipeline__provider__settings__build_merge_group_checks_requested
                    as pipeline_provider_settings_build_merge_group_checks_requested,
                pipeline__provider__settings__build_pull_request_base_branch_changed
                    as pipeline_provider_settings_build_pull_request_base_branch_changed,
                pipeline__provider__settings__build_pull_request_forks
                    as pipeline_provider_settings_build_pull_request_forks,
                pipeline__provider__settings__build_pull_request_labels_changed
                    as pipeline_provider_settings_build_pull_request_labels_changed,
                pipeline__provider__settings__build_pull_request_ready_for_review
                    as pipeline_provider_settings_build_pull_request_ready_for_review,
                pipeline__provider__settings__build_pull_requests
                    as pipeline_provider_settings_build_pull_requests,
                pipeline__provider__settings__build_tags as pipeline_provider_settings_build_tags,
                pipeline__provider__settings__cancel_deleted_branch_builds
                    as pipeline_provider_settings_cancel_deleted_branch_builds,
                pipeline__provider__settings__filter_enabled as pipeline_provider_settings_filter_enabled,
                pipeline__provider__settings__prefix_pull_request_fork_branch_names
                    as pipeline_provider_settings_prefix_pull_request_fork_branch_names,
                pipeline__provider__settings__publish_blocked_as_pending
                    as pipeline_provider_settings_publish_blocked_as_pending,
                pipeline__provider__settings__publish_commit_status_per_step
                    as pipeline_provider_settings_publish_commit_status_per_step,
                pipeline__provider__settings__publish_commit_status
                    as pipeline_provider_settings_publish_commit_status,
                pipeline__provider__settings__pull_request_branch_filter_enabled
                    as pipeline_provider_settings_pull_request_branch_filter_enabled,
                pipeline__provider__settings__separate_pull_request_statuses
                    as pipeline_provider_settings_separate_pull_request_statuses,
                pipeline__provider__settings__skip_builds_for_existing_commits
                    as pipeline_provider_settings_skip_builds_for_existing_commits,
                pipeline__provider__settings__skip_pull_request_builds_for_existing_commits
                    as pipeline_provider_settings_skip_pull_request_builds_for_existing_commits,
                pipeline__provider__settings__trigger_mode as pipeline_provider_settings_trigger_mode,
                pipeline__provider__settings__use_step_key_as_commit_status
                    as pipeline_provider_settings_use_step_key_as_commit_status,
                pipeline__provider__settings__repository as pipeline_provider_settings_repository,
                pipeline__provider__settings__pull_request_branch_filter_configuration
                    as pipeline_provider_settings_pull_request_branch_filter_configuration,
                pipeline__provider__settings__filter_condition as pipeline_provider_settings_filter_condition,
                pipeline__provider__webhook_url as pipeline_provider_webhook_url,
                pipeline__builds_url as pipeline_builds_url,
                pipeline__badge_url as pipeline_badge_url,
                pipeline__created_by__id as pipeline_created_by_id,
                pipeline__created_by__graphql_id as pipeline_created_by_graphql_id,
                pipeline__created_by__name as pipeline_created_by_name,
                pipeline__created_by__email as pipeline_created_by_email,
                pipeline__created_by__avatar_url as pipeline_created_by_avatar_url,
                pipeline__created_by__created_at as pipeline_created_by_created_at,
                pipeline__created_at as pipeline_created_at,
                pipeline__scheduled_builds_count as pipeline_scheduled_builds_count,
                pipeline__running_builds_count as pipeline_running_builds_count,
                pipeline__scheduled_jobs_count as pipeline_scheduled_jobs_count,
                pipeline__running_jobs_count as pipeline_running_jobs_count,
                pipeline__waiting_jobs_count as pipeline_waiting_jobs_count,
                pipeline__visibility as pipeline_visibility,
                pipeline__configuration as pipeline_configuration,
                env__oss_compat_slim as env_oss_compat_slim,
                env__dagster_checkout_depth as env_dagster_checkout_depth,
                env__dagster_ui_only_oss_change as env_dagster_ui_only_oss_change,
                meta_data__push_serverless_agent as meta_data_push_serverless_agent,
                meta_data__snapshot_db as meta_data_snapshot_db,
                meta_data__lock_timeout as meta_data_lock_timeout,
                meta_data__migration_type as meta_data_migration_type
        
            from {{ ref('stg_buildkite__builds') }}
        ```
      ''',
      'group_name': 'model_infrastructure',
      'key': 'sandbox//buildkite_builds',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.buildkite_builds',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.buildkite_builds',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/BUILDKITE_BUILDS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'opportunities_by_campaign',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per campaign in Salesforce, with attribution metrics for SALs and opportunities
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('dim_campaigns') }}
            ),
        
            campaign_attribution as (
        
                select * from {{ ref('opportunities_by_campaign') }}
            ),
        
            summarized_attribution as (
        
                select
                    campaign_id,
                    sum(case when is_campaign_prior_to_close = true 
                        and opportunity_type = 'New Business'
                        then opp_percent_influence_new_arr 
                        else 0 
                        end) as new_business_attributed_new_arr,
                    sum(case 
                        when is_campaign_prior_to_close = true 
                        and opportunity_type = 'New Business'
                        then opp_percent_influence 
                        else 0 
                        end) as new_business_attributed_opp_influence,
                    sum(case 
                        when is_campaign_prior_to_close = true 
                        and opportunity_type = 'Existing Business'
                        then opp_percent_influence_new_arr 
                        else 0 
                        end) as existing_business_attributed_new_arr,
                    sum(case 
                        when is_campaign_prior_to_close = true 
                        and opportunity_type = 'Existing Business'
                        then opp_percent_influence 
                        else 0 
                        end) as existing_business_attributed_opp_influence,
                    sum(case 
                        when is_campaign_prior_to_close = true 
                        then opp_percent_influence_new_arr 
                        else 0 
                        end) as opp_percent_influence_new_arr,
                    sum(case 
                        when is_campaign_prior_to_close = true 
                        then opp_percent_influence 
                        else 0 
                        end) as opp_percent_influence,
                    sum(case 
                        when is_sal_from_campaign = true 
                        then sal_percent_influence 
                        else 0 
                        end) as sal_percent_influence
                from campaign_attribution
                group by campaign_id
            ),
        
            final as (
        
                select 
                    source.campaign_id,
                    source.campaign_name,
                    source.campaign_type,
                    source.campaign_status,
                    source.is_active,
                    source.parent_id,
                    source.parent_campaign_name,
                    source.start_date,
                    source.end_date,
                    source.number_of_responses,
                    source.number_of_contacts,
                    source.number_of_accounts,
                    source.campaign_source,
                    source.is_abm_campaign,
                    round(coalesce(summarized_attribution.sal_percent_influence, 0), 2) as sals_influenced,
                
                    round(coalesce(summarized_attribution.opp_percent_influence_new_arr, 0), 2) as new_arr_attributed_total,
                    round(coalesce(summarized_attribution.new_business_attributed_new_arr, 0), 2) as new_arr_attributed_new_business,
                    round(coalesce(summarized_attribution.existing_business_attributed_new_arr, 0), 2) as new_arr_attributed_existing_business,
        
                    round(coalesce(summarized_attribution.opp_percent_influence, 0), 2) as opps_attributed_total,
                    round(coalesce(summarized_attribution.new_business_attributed_opp_influence, 0), 2) as opps_attributed_new_business,
                    round(coalesce(summarized_attribution.existing_business_attributed_opp_influence, 0), 2) as opps_attributed_existing_business,
                
                from source
                left join summarized_attribution on source.campaign_id = summarized_attribution.campaign_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business',
      'key': 'sandbox//campaigns',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the campaign from Salesforce',
              name='campaign_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the campaign',
              name='campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Type of campaign (e.g., Event, Webinar, Email)',
              name='campaign_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current status of the campaign',
              name='campaign_status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the campaign is currently active',
              name='is_active',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the parent campaign if this is a sub-campaign',
              name='parent_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the parent campaign if this is a sub-campaign',
              name='parent_campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the campaign started',
              name='start_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the campaign ended or is expected to end',
              name='end_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of responses received for this campaign',
              name='number_of_responses',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of contacts associated with this campaign',
              name='number_of_contacts',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of accounts associated with this campaign',
              name='number_of_accounts',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the campaign (e.g., Marketing Event, Webinar)',
              name='campaign_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this is an Account-Based Marketing campaign',
              name='is_abm_campaign',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of Sales Accepted Leads (SALs) influenced by this campaign, rounded to 2 decimal places',
              name='sals_influenced',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total New Annual Recurring Revenue (ARR) attributed to this campaign, rounded to 2 decimal places',
              name='new_arr_attributed_total',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='New Business ARR attributed to this campaign, rounded to 2 decimal places',
              name='new_arr_attributed_new_business',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Existing Business ARR attributed to this campaign, rounded to 2 decimal places',
              name='new_arr_attributed_existing_business',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total number of opportunities attributed to this campaign, rounded to 2 decimal places',
              name='opps_attributed_total',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of new business opportunities attributed to this campaign, rounded to 2 decimal places',
              name='opps_attributed_new_business',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of existing business opportunities attributed to this campaign, rounded to 2 decimal places',
              name='opps_attributed_existing_business',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.campaigns',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.campaigns',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CAMPAIGNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__alert_policies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Alert policy information (not alerting events)
        
        #### Raw SQL:
        ```sql
            {% set event_types = [
                "ASSET_CHECK_SEVERITY_ERROR",
                "AGENT_UNAVAILABLE",
                "JOB_LONG_RUNNING",
                "ASSET_MATERIALIZATION_SUCCESS",
                "ASSET_CHECK_PASSED",
                "JOB_SUCCESS",
                "JOB_FAILURE",
                "INSIGHTS_CONSUMPTION_EXCEEDED",
                "ASSET_CHECK_EXECUTION_FAILURE",
                "TICK_FAILURE",
                "ASSET_MATERIALIZATION_FAILURE",
                "ASSET_CHECK_SEVERITY_WARN",
                "CODE_LOCATION_ERROR"
            ]%}
        
            select
        
                alert_policy_id,
                alert_policy_uuid,
                alert_policy_name,
                organization_id,
                deployment_id,
                serialized_alert_policy:description::varchar as description,
                serialized_alert_policy:enabled as is_enabled,
                serialized_alert_policy:notification_service:__class__::varchar as notification_service_class,
                array_agg(split_part(value:__enum__::varchar, '.', 2)) as alert_event_types,
                serialized_alert_policy:tags as job_alert_tags,
                serialized_alert_policy,
                created_at,
                updated_at,
                {% for event_type in event_types -%}
                array_contains('{{event_type}}'::variant, alert_event_types) as is_{{event_type | lower}}_alert{% if not loop.last %},{% endif %}
                {% endfor %}
            from {{ ref('stg_cloud_product__alert_policies') }},
                lateral flatten(input => serialized_alert_policy:event_types)
            group by all
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_alert_policies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='alert_policy_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_alert_policies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_alert_policies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_ALERT_POLICIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__alerts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Alerts created, NOT a log of alerting events
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_cloud_product__alerts') }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_alerts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.cloud_product_alerts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_alerts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_ALERTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__asset_keys',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Asset key information based on last materialization
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__asset_keys") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_asset_keys',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='asset_key_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_asset_keys',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_asset_keys',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_ASSET_KEYS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__asset_materializations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        A subset of event logs containing only asset materialization events
        
        #### Raw SQL:
        ```sql
            {{
                config(
                    materialized='incremental',
                    unique_key='event_log_id',
                    incremental_strategy='merge',
                    on_schema_change='append_new_columns'
                )
            }}
        
            select *
            from {{ ref('stg_cloud_product__asset_materializations') }}
            where
                {{ limit_dates_for_dev(ref_date = 'timestamp') }}
            {% if is_incremental() -%}
                and event_log_id > (select coalesce(max(event_log_id), 0) from {{ this }})
            {% endif %}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_asset_materializations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='event_log_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_asset_materializations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_asset_materializations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_ASSET_MATERIALIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__asset_observations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        A subset of event logs containing only asset observation events
        
        #### Raw SQL:
        ```sql
            {{
                config(
                    materialized='incremental',
                    unique_key='event_log_id',
                    incremental_strategy='merge',
                    on_schema_change='append_new_columns'
                )
            }}
        
            select *
            from {{ ref('stg_cloud_product__asset_observations') }}
            where
                {{ limit_dates_for_dev(ref_date = 'timestamp') }}
            {% if is_incremental() -%}
                and event_log_id > (select coalesce(max(event_log_id), 0) from {{ this }})
            {% endif %}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_asset_observations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='event_log_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_asset_observations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_asset_observations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_ASSET_OBSERVATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__catalog_views',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per catalog view
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_cloud_product__catalog_views') }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_catalog_views',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.cloud_product_catalog_views',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_catalog_views',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_CATALOG_VIEWS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__customer_info',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Stripe-related customer info for organizations
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__customer_info") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_customer_info',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_customer_info',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_customer_info',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_CUSTOMER_INFO',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__deployments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster deployments
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__deployments") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_deployments',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='deployment_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                The type of agent running the deployment, e.g. serverless
                or hybrid
  
              ''',
              name='agent_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_deployments',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_deployments',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_DEPLOYMENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__event_logs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster event logs
        
        #### Raw SQL:
        ```sql
            {{
                config(
                    materialized='view',
                )
            }}
        
            select
                shard_id,
                event_log_id,
                organization_id,
                deployment_id,
                run_id,
                dagster_event_type,
                coalesce(
                    asset_key,
                    parse_json(event_data):dagster_event:event_specific_data:asset_key:path
                ) as asset_key,
                step_key,
                event_data,
                created_at
            from {{ ref("stg_cloud_product__event_logs") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_event_logs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Event Log Id.
  
              ''',
              name='event_log_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_event_logs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_event_logs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_EVENT_LOGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__jobs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster jobs
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__jobs") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_jobs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='job_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_jobs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_jobs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_JOBS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__notifications',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Alert notifications
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_cloud_product__notifications') }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_notifications',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.cloud_product_notifications',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_notifications',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_NOTIFICATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster Organizations
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__organizations") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Organization status, note that a small number of orgs have a NULL
                status field
  
              ''',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Whether the organization has SAML SSO enabled
  
              ''',
              name='has_saml_sso',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                The type of plan the organization is on.
  
              ''',
              name='plan_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Code location data
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_cloud_product__repository_locations_data') }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_repository_locations_data',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.cloud_product_repository_locations_data',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_repository_locations_data',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_REPOSITORY_LOCATIONS_DATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__runs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster runs
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__runs") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_runs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='run_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Run status, e.g. STARTED, FAILURE
  
              ''',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_runs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_runs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_RUNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__session_tokens',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        User login session tokens
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_cloud_product__session_tokens') }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_session_tokens',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.cloud_product_session_tokens',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_session_tokens',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_SESSION_TOKENS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__teams_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Mapping of users to teams
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__teams_users") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_teams_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='teams_users_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_teams_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_teams_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_TEAMS_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__user_events_counts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily count of user events per organization
        
        #### Raw SQL:
        ```sql
            select
                shard_id,
                date,
                organization_id,
                user_events_count
            from {{ ref("stg_cloud_product__user_events_counts") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_user_events_counts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                ID indicating which shard the data comes from (0 for main, 1 for shard1)
  
              ''',
              name='shard_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the events',
              name='date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Organization ID',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Count of user events for the organization on that date',
              name='user_events_count',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_user_events_counts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_user_events_counts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_USER_EVENTS_COUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_user_roles',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Mapping of users to organizations
        
        #### Raw SQL:
        ```sql
            select
                user_orgs.*,
                user_roles.role,
                user_roles.last_updated_at as role_last_updated_at
            from {{ ref("stg_cloud_product__user_organizations") }} user_orgs
                left join {{ ref("cloud_product_user_roles") }} user_roles using (organization_id, user_id)
            qualify row_number() over (partition by user_orgs.organization_id, user_orgs.user_id order by role_last_updated_at desc) = 1
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_user_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_user_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_user_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_USER_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__user_licensed_roles',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per user-organzation pair, showing their licensed role
        
        #### Raw SQL:
        ```sql
            with
        
            all_user_roles as (
                select 
                    replication_date,
                    organization_id,
                    value[0]::int as user_id,
                    value[1]::varchar as role
                from {{ ref('stg_aws__user_licensed_roles') }},
                    lateral flatten(user_role_list)
            )
        
            select
                replication_date as last_updated_at,
                organization_id,
                user_id,
                role
            from all_user_roles
            qualify row_number() over (partition by organization_id, user_id order by last_updated_at desc) = 1
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_user_roles',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.cloud_product_user_roles',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_user_roles',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_USER_ROLES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Users
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref("stg_cloud_product__users") }}
        ```
      ''',
      'group_name': 'model_cloud_product',
      'key': 'sandbox//cloud_product_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.cloud_product_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_product_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_PRODUCT_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__session_tokens',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_cloud__pages',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_cloud__tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster+ user information. This data is sent to Salesforce.
        
        
        #### Raw SQL:
        ```sql
            with
        
            users as (
                select
                    user_id,
                    email,
                    first_name,
                    last_name,
                    created_at
                from {{ ref('stg_cloud_product__users') }}
            ),
        
            user_orgs as (
                select
                    user_id,
                    organization_id
                from {{ ref('stg_cloud_product__user_organizations') }}
            ),
        
            sfdc_accounts as (
                select
                    account_id,
                    organization_id
                from {{ ref('salesforce_accounts') }}
                where not is_deleted
            ),
        
            user_last_login as (
                select
                    user_id,
                    organization_id,
                    created_at as last_login,
                    row_number() over (partition by user_id, organization_id order by created_at desc) as rank
                from {{ ref('stg_cloud_product__session_tokens') }}
                qualify rank = 1
            ),
        
            last_user_activity as (
                select
                    user_id,
                    max(timestamp) as last_activity_at
                from (
                    select
                        user_id,
                        timestamp
                    from {{ ref('stg_segment_cloud__tracks') }}
                    union
                    select
                        user_id,
                        timestamp
                    from {{ ref('stg_segment_cloud__pages') }}
                )
                group by user_id
            )
        
            select
                sfdc.account_id as salesforce_account_id,
                u.user_id,
                u.email,
                u.first_name,
                u.last_name,
                u.created_at,
                a.last_activity_at,
                max(ull.last_login) as last_login
            from users as u
            left join user_orgs using (user_id)
            left join last_user_activity as a on u.user_id::string = a.user_id
            left join sfdc_accounts as sfdc using (organization_id)
            left join
                user_last_login as ull
                on u.user_id = ull.user_id and sfdc.organization_id = ull.organization_id
            where sfdc.account_id is not null
            group by all
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//cloud_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.cloud_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.cloud_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CLOUD_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_asset_checks',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_assets',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Asset checks in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select
                ac.replication_date,
                ac.organization_id,
                ac.deployment_id,
                ac.code_location,
                ac.asset_check_name,
                ac.asset_key,
                ac.description,
                ac.additional_asset_keys,
                ac.atomic_execution_unit_id,
                ac.is_blocking,
                ac.job_names,
                coalesce(lower(a.compute_kind) = 'dbt' or array_contains('dbt'::variant, a.kinds), false) as is_dbt_asset_check
            from {{ ref('stg_aws__code_location_asset_checks') }} ac
                left join {{ ref('stg_aws__code_location_assets') }} a using (replication_date, organization_id, deployment_id, code_location, asset_key)
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_asset_checks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_asset_checks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_asset_checks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_ASSET_CHECKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_assets',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Assets in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                asset_key,
                backfill_policy,
                code_version,
                compute_kind,
                storage_kind,
                kinds,
                depended_by,
                dependencies,
                execution_type,
                freshness_policy,
                automation_condition_snapshot,
                auto_materialize_policy,
                graph_name,
                group_name,
                is_observable,
                is_source,
                job_names,
                metadata_entries,
                node_definition_name,
                op_description,
                op_name,
                op_names,
                output_description,
                output_name,
                owners,
                partitions_def_data,
                required_top_level_resources,
                tags,
                has_column_schema,
                has_relation_identifier,
                is_airlift_task_mapped_asset,
                is_airlift_dag_mapped_asset,
                is_airlift_proxied_task_asset,
                is_airlift_proxied_dag_asset
            from {{ ref('stg_aws__code_location_assets') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_assets',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_assets',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_assets',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_ASSETS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_external_repo_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        External repository metadata in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select *
            from {{ ref('stg_aws__code_location_external_repo_metadata') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_external_repo_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_external_repo_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_external_repo_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_EXTERNAL_REPO_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_jobs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Jobs in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select *
            from {{ ref('stg_aws__code_location_jobs') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_jobs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_jobs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_jobs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_JOBS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'code_location_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row for every library installed in a code location for a given date.
        
        #### Raw SQL:
        ```sql
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                key as library_name,
                value::varchar as version
            from {{ ref('code_location_metadata') }},
                lateral flatten(input => dagster_library_versions)
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_library_versions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.code_location_library_versions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_library_versions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_LIBRARY_VERSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Metadata for a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select *
            from {{ ref('stg_aws__code_location_metadata') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_partitions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Partitions in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_aws__code_location_partitions') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_partitions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.code_location_partitions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_partitions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_PARTITIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_pipelines',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Pipelines in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_aws__code_location_pipelines') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_pipelines',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.code_location_pipelines',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_pipelines',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_PIPELINES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_repo_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Repository metadata in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select *
            from {{ ref('stg_aws__code_location_repo_metadata') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_repo_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_repo_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_repo_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_REPO_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_resources',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Resources in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select *
            from {{ ref('stg_aws__code_location_resources') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_resources',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_resources',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_resources',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_RESOURCES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_schedules',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Schedules in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select *
            from {{ ref('stg_aws__code_location_schedules') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_schedules',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_schedules',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_schedules',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_SCHEDULES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__code_location_sensors',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Sensors in a given code location, snapshotted daily.
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='view') }}
            select *
            from {{ ref('stg_aws__code_location_sensors') }}
        ```
      ''',
      'group_name': 'model_code_location',
      'key': 'sandbox//code_location_sensors',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.code_location_sensors',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.code_location_sensors',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CODE_LOCATION_SENSORS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__common_room_activities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per activity tracked by Common Room.
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_aws__common_room_activities' )}}
        ```
      ''',
      'group_name': 'model_common_room',
      'key': 'sandbox//common_room_activities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.common_room_activities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.common_room_activities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/COMMON_ROOM_ACTIVITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__common_room_community_members',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Latest snapshot of Common Room community members data.
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_aws__common_room_community_members' )}}
        ```
      ''',
      'group_name': 'model_common_room',
      'key': 'sandbox//common_room_community_members',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.common_room_community_members',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.common_room_community_members',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/COMMON_ROOM_COMMUNITY_MEMBERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_aws__common_room_groups',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Latest snapshot of Common Room groups data.
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_aws__common_room_groups' )}}
        ```
      ''',
      'group_name': 'model_common_room',
      'key': 'sandbox//common_room_groups',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.common_room_groups',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.common_room_groups',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/COMMON_ROOM_GROUPS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per contacts in Salesforce, with additional information from other Salesforce and Hubspot tables
        
        #### Raw SQL:
        ```sql
            with contacts as (
        
                select * from {{ ref('dim_contacts') }}
            )
        
            select * from contacts
        ```
      ''',
      'group_name': 'business',
      'key': 'sandbox//contacts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the contact from Salesforce',
              name='salesforce_contact_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the contact in Hubspot',
              name='hubspot_contact_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full name of the contact',
              name='name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier of the associated account',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the associated account',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the company in Hubspot',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First name of the contact',
              name='first_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Last name of the contact',
              name='last_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Email address of the contact',
              name='email',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Phone number of the contact',
              name='phone',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Job title of the contact',
              name='title',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Categorized classification of the contact's job title based on standardized mappings",
              name='title_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Original source of the lead',
              name='lead_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the contact in Salesforce',
              name='contact_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Traffic source for the contact',
              name='traffic_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the contact owner',
              name='owner_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current status of the contact',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="URL to the contact's LinkedIn profile",
              name='linkedin_url',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the contact was created in Salesforce',
              name='created_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the trial if applicable',
              name='trial_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Marketing source of the lead',
              name='marketing_lead_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent source of contact interaction',
              name='latest_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Action associated with the lead source',
              name='lead_source_action',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First level drill-down of the latest source',
              name='latest_source_drill_level_1',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Second level drill-down of the latest source',
              name='latest_source_drill_level_2',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the latest source interaction',
              name='latest_source_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Original source of the contact in Hubspot',
              name='original_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First level drill-down of the original source',
              name='original_source_drill_level_1',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Second level drill-down of the original source',
              name='original_source_drill_level_2',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Category of the second level drill-down of the original source',
              name='original_source_drill_level_2_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the import if contact was imported',
              name='import_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current lifecycle stage of the contact',
              name='lifecycle_stage',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the contact entered the current lifecycle stage',
              name='lifecycle_stage_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the contact became a Marketing Qualified Lead',
              name='mql_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Additional email addresses for the contact',
              name='additional_emails',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Timestamp when the first touch session started',
              name='first_touch_session_started_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the campaign for the first touch',
              name='first_touch_campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Ad group name for the first touch',
              name='first_touch_adgroup_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Campaign content for the first touch',
              name='first_touch_campaign_content',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Referrer host for the first touch',
              name='first_touch_referrer_host',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Referrer medium for the first touch',
              name='first_touch_referrer_medium',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Path for the first touch',
              name='first_touch_path',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Campaign source for the first touch',
              name='first_touch_campaign_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Campaign medium for the first touch',
              name='first_touch_campaign_medium',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='UTM term for the first touch',
              name='first_touch_utm_term',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Attribution category for the first touch',
              name='first_touch_attribution_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Ad group ID for the first touch',
              name='first_touch_adgroup_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Campaign ID for the first touch',
              name='first_touch_campaign_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="The domain part of the contact's email address (e.g., 'example.com' from 'user@example.com')",
              name='contact_email_domain',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Timestamp when the contact record was last modified in the source system',
              name='last_modified_time',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.contacts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.contacts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CONTACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_enrollments',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_tracks',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_customers',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Various conversion events across multiple channels
        
        #### Raw SQL:
        ```sql
            with events as (
                -- Trial Sign Up
        
                select
                    u.email,
                    to_timestamp(min(timestamp)) as conversion_timestamp,
                    'trial_start' as conversion_event_type
                from {{ ref('segment_cloud_tracks') }} t
                inner join {{ ref('cloud_product_users') }} u on t.user_id = u.user_id or t.email = u.email
                where event = 'trial_start'
                group by all
        
                union
        
                -- DU Enrolled
        
                select
                    user_email as email,
                    to_timestamp(min(created_at)) as conversion_timestamp,
                    'dagster_university_enrollment' as conversion_event_type
                from {{ ref('education_enrollments') }}
                group by all
        
                union
        
                -- Contact Us Form Filled
        
                -- Paid Invoice
        
                select
                    email,
                    to_timestamp(invoice_created_at) as conversion_timestamp,
                    'paid_invoice' as conversion_event_type
                from {{ ref('stripe_invoices') }}
                inner join {{ ref('stripe_customers') }} using (customer_id)
                where invoice_total > 0 and invoice_status = 'paid'
                qualify row_number() over (partition by email order by invoice_created_at) = 1
            )
        
            select
                email,
                contact_id,
                conversion_timestamp,
                conversion_event_type
            from events
            left join {{ ref('salesforce_contacts') }} using (email)
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//conversion_events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.conversion_events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.conversion_events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CONVERSION_EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Basic country information
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//country_codes',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='alpha_2',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='alpha_3',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='country_code',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='iso_3166_2',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='region',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='sub_region',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='intermediate_region',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='region_code',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='sub_region_code',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='intermediate_region_code',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.country_codes',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.country_codes',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'product_engagement',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contracts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'usage_metrics_daily',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Base model that defines credit consumption, allotted credits, and credit utilization for each organization
        
        #### Raw SQL:
        ```sql
            with
        
            organizations as (
                select * from {{ ref('dim_organizations') }}
            ),
        
            sfdc_accounts as (
                select * from {{ ref('dim_accounts') }}
            ),
        
            product_usage as (
                select * from {{ ref('usage_metrics_daily') }}
            ),
        
            time_spine as (
                select * from {{ ref('time_spine') }}
            ),
        
            contracts as (
                select * from {{ ref('salesforce_contracts') }}
            ),
        
            runs as (
                select * from {{ ref('fct_runs') }}
            ),
        
            account_organizations as (
                select * from {{ ref('salesforce_organizations') }}
            ),
        
            product_engagement as (
                select * from {{ ref('product_engagement') }}
            ),
        
            -- The primary org relationship doesn't always exist in the organizations table in SFDC
            account_org_mapping as (
                select
                    account_id,
                    organization_id
                from account_organizations
        
                union
        
                select
                    account_id,
                    organization_id
                from sfdc_accounts
                where organization_id is not null
            ),
        
            run_durations as (
                select
                    ended_at::date as ds,
                    organization_id,
                    sum(duration_mins) as total_run_duration_mins
                from runs
                group by all
            ),
        
            subs as (
                /* We want the most recent subscription for all enterprise customers, including those
                who have churned. As a result, we filter for the latest subscription, not the active
                one */
                select
        
                    organizations.organization_id,
                    organizations.organization_name,
                    account_id,
                    sfdc_accounts.account_name,
                    sfdc_accounts.account_status,
                    sfdc_accounts.first_contract_start_date,
                    sfdc_accounts.last_contract_end_date,
                    contracts.arr,
                    cloud_credits_contracted,
                    cloud_credits as cloud_credits_contracted_with_rollover,
                    contract_term,
                    contract_start_date,
                    contract_end_date,
                    datediff('days', contract_start_date, contract_end_date) as contract_length,
                    launcher_seats,
                    pricing_model,
                    contract_status,
                    row_number() over (
                        partition by organizations.organization_id order by contract_start_date desc
                    ) as subscription_index
        
                from contracts
                inner join sfdc_accounts using (account_id)
                inner join account_org_mapping using (account_id)
                inner join organizations
                    on
                        account_org_mapping.organization_id = organizations.organization_id
                        and contract_start_date < current_date()
                qualify subscription_index = 1
                order by organizations.organization_id, subscription_index
            ),
        
            orgs as (
                select
        
                    organization_id,
                    organization_name,
                    status,
                    org_created_at
        
                from organizations
                where
                    plan_type = 'ENTERPRISE'
                    and not is_internal
            ),
        
            daily_usage as (
                select
                    time_spine.ds,
                    subs.organization_id,
                    subs.contract_start_date,
                    subs.contract_end_date,
                    subs.cloud_credits_contracted,
                    subs.cloud_credits_contracted_with_rollover,
                    sum(product_usage.high_velocity_credits) as high_velocity_credits,
                    sum(product_usage.materializations + product_usage.steps_credits) as total_credits
        
                from subs
                full join time_spine on time_spine.ds between contract_start_date and contract_end_date
                left join product_usage
                    on
                        time_spine.ds = product_usage.ds
                        and subs.organization_id = product_usage.organization_id
        
                group by all
            ),
        
            weekly_usage as (
                select
                    date_trunc(week, ds) as week_start_date,
                    organization_id,
                    datediff(week, contract_start_date, contract_end_date) as contract_term_weeks,
                    cloud_credits_contracted / contract_term_weeks as weekly_allotted_credits,
                    sum(total_credits) as week_total_credits,
                    zeroifnull(div0(week_total_credits, weekly_allotted_credits)) as week_utilization_pct
                from daily_usage
                group by all
            ),
        
            combined as (
                select
        
                    orgs.organization_id,
                    orgs.organization_name,
                    orgs.status as organization_status,
                    orgs.org_created_at,
                    subs.account_id as salesforce_account_id,
                    subs.account_name as salesforce_account_name,
                    subs.arr,
                    subs.cloud_credits_contracted as annual_cloud_credits_contract,
                    subs.cloud_credits_contracted_with_rollover,
                    subs.contract_start_date,
                    subs.contract_end_date,
                    subs.first_contract_start_date,
                    subs.last_contract_end_date,
                    subs.contract_term,
                    subs.contract_length as contract_length_days,
                    subs.pricing_model,
                    subs.launcher_seats,
                    product_engagement.first_successive_run_end_date as activation_date,
                    iff(subs.organization_id is null, true, false) as missing_subscription,
                    iff(daily_usage.organization_id is null, true, false) as missing_usage,
                    iff(subs.cloud_credits_contracted is null, true, false) as missing_credits,
                    daily_usage.ds as credits_date,
                    coalesce(daily_usage.high_velocity_credits, 0) as high_velocity_credits_used,
                    coalesce(daily_usage.total_credits, 0) as total_credits_used,
                    week_utilization_pct,
                    run_durations.total_run_duration_mins
        
                from orgs
                left join product_engagement using (organization_id)
                left join subs using (organization_id)
                left join daily_usage
                    on
                        orgs.organization_id = daily_usage.organization_id
                        and daily_usage.ds between subs.contract_start_date and subs.contract_end_date
                left join weekly_usage
                    on
                        orgs.organization_id = weekly_usage.organization_id
                        and date_trunc(week, daily_usage.ds) = weekly_usage.week_start_date
                left join run_durations
                    on
                        daily_usage.ds = run_durations.ds
                        and daily_usage.organization_id = run_durations.organization_id
        
            ),
        
            features as (
        
                select
                    combined.*,
                    datediff('days', org_created_at, credits_date) as organization_age_at_usage_day,
                    datediff('days', contract_start_date, credits_date) as contract_age_at_usage_day,
                    datediff('months', org_created_at, credits_date) as organization_age_at_usage_month,
                    datediff('months', contract_start_date, credits_date) as contract_age_at_usage_month,
                    datediff('months', contract_start_date, current_date()) as contract_age_today_month,
                    annual_cloud_credits_contract / contract_length_days as daily_cloud_credits_contracted,
                    sum(high_velocity_credits_used)
                        over (partition by organization_id order by credits_date)
                        as cume_high_velocity_credits_used,
                    sum(total_credits_used)
                        over (partition by organization_id order by credits_date)
                        as cume_credits_used,
                    sum(daily_cloud_credits_contracted)
                        over (partition by organization_id order by credits_date)
                        as cume_cloud_credits,
                    cume_credits_used / cume_cloud_credits as cloud_credit_utilization,
                    sum(total_run_duration_mins)
                        over (partition by organization_id order by credits_date)
                        as cumulative_run_duration_mins
                from combined
            ),
        
            credits_regression_terms as (
                select
                    organization_id,
                    regr_intercept(cume_credits_used, contract_age_at_usage_day)
                        over (partition by organization_id) as intercept,
                    regr_slope(cume_credits_used, contract_age_at_usage_day)
                        over (partition by organization_id) as slope,
                    regr_r2(cume_credits_used, contract_age_at_usage_day)
                        over (partition by organization_id) as r2
                from features
                where credits_date between current_date - interval '60 days' and current_date
                qualify row_number() over (partition by organization_id order by credits_date desc) = 1
            ),
        
            credits_predictions as (
                select
                    *,
                    -- Grab the last actual value and the first predicted value,
                    -- then calculate the difference between the two so we can
                    -- add it to the predictions so the forecast lines up with the
                    -- actuals
                    case
                        when
                            credits_date > current_date
                            then (slope * contract_age_at_usage_day + intercept)::number
                    end as prediction,
                    last_value(cume_credits_used) ignore nulls
                        over (
                            partition by organization_id order by credits_date
                        ) as last_cume_credits_used,
                    first_value(prediction) ignore nulls
                        over (
                            partition by organization_id order by credits_date
                        ) as first_prediction,
                    last_cume_credits_used - first_prediction as diff,
                    prediction + diff + slope::number as predicted_cume_credits_used
                from features
                left join credits_regression_terms using (organization_id)
            ),
        
            credits_predictions_final as (
                select
                    organization_id,
                    credits_date,
                    predicted_cume_credits_used,
                    lag(predicted_cume_credits_used)
                        over (partition by organization_id order by credits_date)
                        as prev_predicted_cume_credits_used,
                    lag(cume_credits_used)
                        over (partition by organization_id order by credits_date)
                        as prev_cume_credits_used,
                    predicted_cume_credits_used
                    - coalesce(prev_predicted_cume_credits_used, prev_cume_credits_used)
                        as predicted_total_credits_used
                from credits_predictions
            ),
        
            run_duration_regression_terms as (
                select
                    organization_id,
                    regr_intercept(cumulative_run_duration_mins, contract_age_at_usage_day)
                        over (partition by organization_id) as intercept,
                    regr_slope(cumulative_run_duration_mins, contract_age_at_usage_day)
                        over (partition by organization_id) as slope,
                    regr_r2(cumulative_run_duration_mins, contract_age_at_usage_day)
                        over (partition by organization_id) as r2
                from features
                where credits_date between current_date - interval '60 days' and current_date
                qualify row_number() over (partition by organization_id order by credits_date desc) = 1
            ),
        
            run_duration_predictions as (
                select
                    *,
                    -- Grab the last actual value and the first predicted value,
                    -- then calculate the difference between the two so we can
                    -- add it to the predictions so the forecast lines up with the
                    -- actuals
                    case
                        when
                            credits_date > current_date
                            then (slope * contract_age_at_usage_day + intercept)::number
                    end as prediction,
                    last_value(cumulative_run_duration_mins) ignore nulls
                        over (
                            partition by organization_id order by credits_date
                        ) as last_cumulative_run_duration_mins,
                    first_value(prediction) ignore nulls
                        over (
                            partition by organization_id order by credits_date
                        ) as first_prediction,
                    last_cumulative_run_duration_mins - first_prediction as diff,
                    prediction + diff + slope::number as predicted_cumulative_run_duration_mins
                from features
                left join run_duration_regression_terms using (organization_id)
            ),
        
            run_duration_predictions_final as (
                select
                    organization_id,
                    credits_date,
                    predicted_cumulative_run_duration_mins,
                    lag(predicted_cumulative_run_duration_mins)
                        over (partition by organization_id order by credits_date)
                        as prev_predicted_cumulative_run_duration_mins,
                    lag(cumulative_run_duration_mins)
                        over (partition by organization_id order by credits_date)
                        as prev_cumulative_run_duration_mins,
                    predicted_cumulative_run_duration_mins
                    - coalesce(prev_predicted_cumulative_run_duration_mins, prev_cumulative_run_duration_mins)
                        as predicted_total_run_duration_mins
                from run_duration_predictions
            )
        
            select
                * exclude (
                    prev_predicted_cume_credits_used,
                    prev_cume_credits_used,
                    prev_predicted_cumulative_run_duration_mins,
                    prev_cumulative_run_duration_mins
                )
            from features
            left join credits_predictions_final using (credits_date, organization_id)
            left join run_duration_predictions_final using (credits_date, organization_id)
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//credit_utilization',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.credit_utilization',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.credit_utilization',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CREDIT_UTILIZATION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'credit_utilization',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Forecasted credit utilization based on linear regression model
        
        #### Raw SQL:
        ```sql
            with credit_utilization as (
                select * from {{ ref('credit_utilization') }}
            ),
        
            forecast as (
                select distinct
        
                    organization_id,
                    organization_name,
                    organization_status,
                    org_created_at,
                    contract_start_date,
                    contract_end_date,
                    contract_term,
                    contract_length_days,
                    pricing_model,
                    launcher_seats,
                    annual_cloud_credits_contract,
        
                    regr_intercept(cume_credits_used, contract_age_at_usage_day)
                        over (partition by organization_id) as intercept,
                    regr_slope(cume_credits_used, contract_age_at_usage_day)
                        over (partition by organization_id) as slope,
                    regr_r2(cume_credits_used, contract_age_at_usage_day)
                        over (partition by organization_id) as r2,
                    last_value(cume_credits_used)
                        over (
                            partition by organization_id order by credits_date range
                            between unbounded preceding and unbounded following
                        ) as cume_credits_used,
                    last_value(cloud_credit_utilization)
                        over (
                            partition by organization_id order by credits_date range
                            between unbounded preceding and unbounded following
                        ) as utilization,
                    zeroifnull(
                        nth_value(week_utilization_pct, 7) -- Get the previous full week's utilization
                            over (
                                partition by organization_id order by credits_date desc
                            )
                    ) as last_week_utilization_pct
        
                from credit_utilization
                where
                    cloud_credit_utilization is not null
                    and credits_date <= current_date()
            )
        
            select
                forecast.*,
                greatest(slope * contract_length_days + intercept, cume_credits_used)::number
                    as predicted_cume_credits_used,
                predicted_cume_credits_used / annual_cloud_credits_contract as predicted_utilization,
                iff(contract_end_date > current_date(), predicted_utilization, utilization)
                    as actual_predicted_utilization,
                iff(
                    contract_end_date > current_date,
                    predicted_cume_credits_used,
                    cume_credits_used
                ) as actual_predicted_credits_used,
                iff(actual_predicted_utilization >= 0.80, true, false) as is_predicted_healthy_organization
        
            from forecast
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//credit_utilization_forecast',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.credit_utilization_forecast',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.credit_utilization_forecast',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CREDIT_UTILIZATION_FORECAST',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'credit_utilization',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Model that contains the most recent metrics for credit consumption, allotted credits, and credit utilization for each organization. Powers the billing page in the Dagster+ UI.
        
        #### Raw SQL:
        ```sql
            with credit_utilization as (
                select * from {{ ref('credit_utilization') }}
            )
        
            select
                credits_date,
                organization_id,
                cume_credits_used,
                annual_cloud_credits_contract,
                cloud_credits_contracted_with_rollover,
                contract_start_date,
                contract_end_date,
                launcher_seats
            from credit_utilization
            where credits_date = current_date() and organization_status = 'ACTIVE'
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//current_credit_utilization',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.current_credit_utilization',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.current_credit_utilization',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/CURRENT_CREDIT_UTILIZATION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Mapping of dagster roles to whether they are paid roles
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//dagster_user_roles',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='role',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='is_paid',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.dagster_user_roles',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.dagster_user_roles',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'insights_asset_materialization_metrics',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Information about the types of insights metrics being used across deployments
        
        #### Raw SQL:
        ```sql
            {{ config(snowflake_warehouse="L_WAREHOUSE") }}
            select
                run_ended_at::date as date,
                organization_id,
                deployment_id,
                case
                    when upper(split_part(metric_name, '_', 3)) = 'DAGSTER' then 'Built-In'
                    when upper(split_part(metric_name, '_', 3)) = 'META' then 'Custom'
                    when upper(split_part(metric_name, '_', 3)) = 'COST' then 'Cost'
                else upper(split_part(metric_name, '_', 3))
                end as metric_type,
                regexp_replace(metric_name, '__[a-z]+_') as metric_name,
                count(distinct asset_key) as asset_count
            from {{ ref('insights_asset_materialization_metrics') }}
            group by all
        ```
      ''',
      'group_name': 'mart_product',
      'key': 'sandbox//deployment_insights_usage_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.deployment_insights_usage_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.deployment_insights_usage_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DEPLOYMENT_INSIGHTS_USAGE_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_accounts_by_day',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contracts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Uses Salesforce Account as the source of records with additional columns from Hubspot Companies
        
        #### Raw SQL:
        ```sql
            with hubspot_companies as (
        
                select * from {{ ref('hubspot_companies') }}
            ),
        
            salesforce_accounts as (
        
                select * from {{ ref('salesforce_accounts') }}
            ),
        
            sf_users as (
        
                select * from {{ ref('salesforce_users') }}
            ),
        
            accounts_by_day as (
        
                select * from {{ ref('dim_accounts_by_day') }}
            ),
        
            opportunities as (
        
                select * from {{ ref('salesforce_opportunities') }}
            ),
        
            contracts as (
        
                select * from {{ ref('salesforce_contracts') }}
            ),
        
            account_dates as (    
            
                select        
                    account_id,        
                    min(case when intent_score > 0 then snapshot_date end) as first_day_with_intent_score,        
                    max(case when intent_score > 0 then snapshot_date end) as last_day_with_intent_score,        
                    min(case when intent_score > 0 and is_target_account = true then snapshot_date end) as first_day_with_intent_score_as_target,        
                    max(case when intent_score > 0 and is_target_account = true then snapshot_date end) as last_day_with_intent_score_as_target,        
                    min(case when is_target_account = true then snapshot_date end) as first_day_as_target_account,        
                    min(case when is_engaged = true then snapshot_date end) as first_day_engaged,        
                    max(case when is_engaged = true then snapshot_date end) as last_day_engaged,
                    min(case when is_engaged = true and is_target_account = true then snapshot_date end) as first_day_engaged_as_target,        
                    max(case when is_engaged = true and is_target_account = true then snapshot_date end) as last_day_engaged_as_target,    
                    from accounts_by_day    
                    group by account_id
            ),
        
            opp_dates as (
            
                select
                    account_id,
                    min(date(sal_date)) as first_sal_date,
                    max(date(sal_date)) as last_sal_date,
                    min(meeting_held_date) as first_meeting_held_date,
                    min(case when is_won = true then close_date end) as first_opp_won_date,
                    sum(case when is_closed = false then 1 end) as open_opportunity_count,
                    sum(case when is_closed = false then new_arr end) as open_opportunity_arr
                from opportunities
                group by account_id
            ),
        
            contract_dates as (
            
                select
                    account_id,
                    min(case when lower(contract_status) = 'activated' then contract_start_date end) as first_contract_start_date,
                    max(case when lower(contract_status) = 'activated' then contract_end_date end) as last_contract_end_date,
                    max(is_active_contract) as has_active_contract
                from contracts
                group by account_id
            ),
        
        
            final as (
        
                select
                    acct.account_id, 
                    acct.account_name,
                    coalesce(acct.target_account_type, 'Non-Target Account') as target_account_type,
                    coalesce(comp.is_target_account, false) as is_target_account,
                    comp.intent_score,
                    comp.is_intent_score_greater_than_zero,
                    coalesce(comp.is_engaged, false) as is_engaged,
                    acct.organization_id, 
                    comp.company_unique_id as hubspot_company_id,
                    comp.is_public,
                    acct.stripe_customer_id, 
                    acct.owner_id as account_owner_id, 
                    sf_users.name as account_owner_name,
                    acct.owned_since as account_owned_since,
                    acct.website, 
                    acct.industry, 
                    acct.annual_revenue, 
                    acct.number_of_employees, 
                    acct.description, 
                    acct.account_source, 
                    acct.arr, 
                    acct.account_source_custom, 
                    acct.recent_source, 
                    acct.account_status, 
                    acct.cloud_credits, 
                    acct.contracted_seats, 
                    acct.total_funding,
                    acct.latest_funding_stage,
                    acct.region,
                    acct.revenue_segment,
                    acct.funding_rounds,
                    acct.last_funding_round_date,
                    acct.created_at,
                    acct.first_abm_campaign,
                    acct.bdr_engaged_contact_count, 
                    acct.seller_engaged_contact_count, 
                    acct.total_sales_engaged_contact_count,
                    acct.seller_activity_count_l90d,
                    acct.bdr_activity_count_l90d,
                    acct.last_sales_activity_at,
                    acct.total_sales_activity_count,
                    coalesce(opp_dates.open_opportunity_count, 0) as open_opportunity_count,
                    coalesce(opp_dates.open_opportunity_arr, 0) as open_opportunity_new_arr,
                    coalesce(acct.is_sales_working_account, false) as is_sales_working_account,
                    account_dates.first_day_as_target_account,
                    account_dates.first_day_with_intent_score,
                    account_dates.last_day_with_intent_score,
                    account_dates.first_day_with_intent_score_as_target,
                    account_dates.last_day_with_intent_score_as_target,
                    account_dates.first_day_engaged,
                    account_dates.last_day_engaged,
                    account_dates.first_day_engaged_as_target,
                    account_dates.last_day_engaged_as_target,
                    opp_dates.first_sal_date,
                    opp_dates.last_sal_date,
                    opp_dates.first_meeting_held_date,
                    opp_dates.first_opp_won_date,
                    contract_dates.first_contract_start_date,
                    contract_dates.last_contract_end_date,
                    contract_dates.has_active_contract
                from salesforce_accounts as acct
                left join hubspot_companies comp on comp.salesforce_account_id = acct.account_id
                left join sf_users on acct.owner_id = sf_users.user_id
                left join account_dates on acct.account_id = account_dates.account_id
                left join opp_dates on acct.account_id = opp_dates.account_id
                left join contract_dates on acct.account_id = contract_dates.account_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_accounts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.dim_accounts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_accounts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_ACCOUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'snapshot_hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'snapshot_salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Uses the snapshot of the Salesforce Account as the source of records with additional columns from the Hubspot Companies snapshot
        
        #### Raw SQL:
        ```sql
            with hubspot_companies_snapshot as (
        
                select * from {{ ref('snapshot_hubspot_companies') }}
            ),
        
            salesforce_accounts_snapshot as (
        
                select * from {{ ref('snapshot_salesforce_accounts') }}
            ),
        
            sf_users as (
        
                select * from {{ ref('salesforce_users') }}
            ),
        
            ---NOTE: the base of this model is Salesforce accounts. There are times that multiple Hubspot companies may be tied to a single Salesforce account.
            ---Over the course of the next few CTEs, we will identify the duplicates and then layer logic to identify the best Hubspot account to use.
            identify_hubspot_duplicates as (
        
                select
                    snapshot_date,
                    salesforce_account_id,
                    company_unique_id,
                    create_time
                from hubspot_companies_snapshot
                where salesforce_account_id is not null and salesforce_account_id != ''
                qualify count(*) over (partition by salesforce_account_id, snapshot_date) > 1
            ),
        
            --The first layer of logic focuses on the last snapshot available. If companies are merged, then the one with the correct info will be the only one in the most recent snapshot
            last_snapshot as (
            
                select
                    company_unique_id,
                    max(snapshot_date) as last_snapshot_date
                from identify_hubspot_duplicates 
                where company_unique_id in (select distinct company_unique_id from identify_hubspot_duplicates)
                group by all
            ),
        
            --- This is where we implement the logic of which Hubspot company we want to keep
            choose_hubspot_account as (
        
                select
                    dupes.salesforce_account_id,
                    dupes.company_unique_id,
                    dupes.create_time,
                    last_snapshot.last_snapshot_date
                from identify_hubspot_duplicates as dupes
                left join last_snapshot on dupes.company_unique_id = last_snapshot.company_unique_id
                where dupes.company_unique_id is not null and last_snapshot.company_unique_id is not null 
                --- select the account that is present in the most recent snapshot. if companies are merged, then the one with the correct info will be the only one in the most recent snapshot
                --- if multiple, then choose first created. first created is more commonly the right one
                qualify row_number() over (partition by dupes.salesforce_account_id order by last_snapshot.last_snapshot_date desc, create_time asc) = 1 
            ),
        
            ---Since we now have identified the company record, we need to now find all of the records where there are duplicates since not every account experiences duplication
            find_records as (
        
                select
                    identify_hubspot_duplicates.*,
                    choose_hubspot_account.last_snapshot_date,
                    case 
                        when choose_hubspot_account.last_snapshot_date is not null then true
                        else false
                        end as is_duplicate_to_remove
                from identify_hubspot_duplicates
                left join choose_hubspot_account on identify_hubspot_duplicates.company_unique_id = choose_hubspot_account.company_unique_id
            ),
        
            joined as (
        
                select
                    is_duplicate_to_remove,
                    acct.snapshot_date,
                    acct.account_id, 
                    acct.account_name,
                    coalesce(comp.is_target_account, false) as is_target_account,
                    coalesce(comp.intent_score, 0) as intent_score,
                    coalesce(comp.is_intent_score_greater_than_zero, false) as is_intent_score_greater_than_zero,
                    coalesce(comp.is_engaged, false) as is_engaged,
                    acct.target_account_type,
                    acct.organization_id, 
                    comp.company_unique_id as hubspot_company_id,
                    acct.stripe_customer_id, 
                    acct.owner_id as account_owner_id, 
                    sf_users.name as account_owner_name,
                    acct.owned_since as account_owned_since,
                    acct.website, 
                    acct.industry, 
                    acct.annual_revenue, 
                    acct.number_of_employees, 
                    acct.description, 
                    acct.account_source, 
                    acct.arr, 
                    acct.account_source_custom, 
                    acct.recent_source, 
                    acct.account_status, 
                    acct.cloud_credits, 
                    acct.contracted_seats, 
                    acct.created_at,
                    acct.is_named_account
                from salesforce_accounts_snapshot as acct
                left join hubspot_companies_snapshot comp 
                    on comp.salesforce_account_id = acct.account_id
                    and comp.snapshot_date = acct.snapshot_date
                left join sf_users on acct.owner_id = sf_users.user_id
                left join find_records 
                    on find_records.company_unique_id = comp.company_unique_id
                    and find_records.snapshot_date = comp.snapshot_date
            ),
        
            --- We leverage the deduplication logic from above. If a row is set to is_duplicate_to_remove = null, then we now it was not originally a duplicate.
            --- Even after all of this logic there are 45 records that do not have enough information to allow us to make a determination, so we throw one last qualify in place.
            remove_duplicates as (
        
                select 
                    *
                from joined
                where is_duplicate_to_remove is null or is_duplicate_to_remove = false
                qualify row_number() over (partition by account_id, snapshot_date order by snapshot_date) = 1
        
            )
        
            select * exclude (is_duplicate_to_remove) from remove_duplicates
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_accounts_by_day',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.dim_accounts_by_day',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_accounts_by_day',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_ACCOUNTS_BY_DAY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaign_members',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Uses Salesforce Campaign as the source of records to list all campaigns
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref("salesforce_campaigns") }}
            ),
        
            campaign_members as (
        
                select * from {{ ref("salesforce_campaign_members") }}
            ),
        
            final as (
        
                select 
                    source.*,
                    count(distinct campaign_members.account_id) as number_of_accounts
                from source
                left join campaign_members on source.campaign_id = campaign_members.campaign_id
                group by all
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_campaigns',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='campaign_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.dim_campaigns',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_campaigns',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_CAMPAIGNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'title_mappings',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Uses Salesforce Contact as the source of records to list all external contacts
        
        #### Raw SQL:
        ```sql
            with sf_contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
            ),
        
            accounts as (
        
                select * from {{ ref('dim_accounts') }}
            ),
        
            hubspot_contacts as (
        
                select * from {{ ref('hubspot_contacts') }}
            ),
        
        
            title_mappings as (
        
                select * from {{ ref('title_mappings') }}
            ),
        
            -- match titles to categories
            title_matches as (
                select 
                    sf_contacts.contact_id,
                    title_mappings.category as title_category
                from sf_contacts
                left join title_mappings on lower(sf_contacts.title) like '%' || lower(title_mappings.title_pattern) || '%'
                qualify row_number() over (partition by contact_id order by category) = 1
        
            ),
        
            joined as (
        
                select 
                    sf_contacts.contact_id as salesforce_contact_id,
                    hubspot_contacts.contact_id as hubspot_contact_id,
                    sf_contacts.name,
                    sf_contacts.account_id,
                    accounts.account_name,
                    accounts.hubspot_company_id,
                    sf_contacts.first_name,
                    sf_contacts.last_name,
                    sf_contacts.email,
                    split_part(sf_contacts.email, '@', 2) as contact_email_domain,
                    sf_contacts.phone,
                    sf_contacts.title,
                    coalesce(title_matches.title_category, 'Other') as title_category,
                    sf_contacts.lead_source,
                    sf_contacts.contact_source,
                    sf_contacts.traffic_source,
                    sf_contacts.owner_id,
                    sf_contacts.status,
                    sf_contacts.linkedin_url,
                    sf_contacts.created_date,
                    hubspot_contacts.trial_source,
                    hubspot_contacts.marketing_lead_source,
                    hubspot_contacts.latest_source,
                    hubspot_contacts.lead_source_action,
                    hubspot_contacts.latest_source_drill_level_1,
                    hubspot_contacts.latest_source_drill_level_2,
                    hubspot_contacts.latest_source_date,
                    hubspot_contacts.original_source,
                    hubspot_contacts.original_source_drill_level_1,
                    hubspot_contacts.original_source_drill_level_2,
                    hubspot_contacts.original_source_drill_level_2_category,
                    hubspot_contacts.import_source,
                    hubspot_contacts.lifecycle_stage,
                    hubspot_contacts.lifecycle_stage_date,
                    hubspot_contacts.mql_date,
                    hubspot_contacts.additional_emails,
                    hubspot_contacts.first_touch_session_started_at,
                    hubspot_contacts.first_touch_campaign_name,
                    hubspot_contacts.first_touch_adgroup_name,
                    hubspot_contacts.first_touch_campaign_content,
                    hubspot_contacts.first_touch_referrer_host,
                    hubspot_contacts.first_touch_referrer_medium,
                    hubspot_contacts.first_touch_path,
                    hubspot_contacts.first_touch_campaign_source,
                    hubspot_contacts.first_touch_campaign_medium,
                    hubspot_contacts.first_touch_utm_term,
                    hubspot_contacts.first_touch_attribution_category,
                    hubspot_contacts.first_touch_adgroup_id,
                    hubspot_contacts.first_touch_campaign_id,
                    hubspot_contacts.last_modified_time
                from sf_contacts
                left join accounts on sf_contacts.account_id = accounts.account_id
                left join hubspot_contacts on sf_contacts.contact_id = hubspot_contacts.salesforce_contact_id
                left join title_matches on sf_contacts.contact_id = title_matches.contact_id
                --- the vast majority of deduplication occurs when removing merged records. However, a small number of internal users continue to have duplicates.
                qualify row_number() over (partition by sf_contacts.contact_id order by hubspot_contacts.last_modified_time desc) = 1
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_contacts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='salesforce_contact_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.dim_contacts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_contacts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_CONTACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'opportunities_by_campaign',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunity_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_partners',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Uses Salesforce Opportunities as the source of records with additional columns from Hubspot and Salesforce
        
        #### Raw SQL:
        ```sql
            with opportunities as (
        
                select * from {{ ref('salesforce_opportunities') }}
            ),
        
            accounts as (
        
                select * from {{ ref('dim_accounts') }}
            ),
        
            sf_users as (
        
                select * from {{ ref('salesforce_users') }}
            ),
        
            contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
            ),
        
            salesforce_opportunity_history as (
        
                select * from {{ ref('salesforce_opportunity_history') }}
                where is_stage_before_closed_lost = true
            ),
        
            /*
                Partners are defined as accounts that have a relationship with the opportunity.
                There is at most one partner per opportunity. We filter to only include the 'Referrer'
                records, as there are 'Referee' records that are effectively the same record but in reverse.
            */
        
            partners as (
        
                select * from {{ ref('salesforce_partners') }}
                where role = 'Referrer'
        
            ),
        
            campaign_attribution_source as (
        
                select * from {{ ref('opportunities_by_campaign') }}
            ),
        
            campaign_attribution as (
        
                select 
                    opportunity_id,
                    min_by(campaign_id, first_campaign_member_created_date) as sal_first_touch_campaign_id,
                    max_by(campaign_id, first_campaign_member_created_date) as sal_last_touch_campaign_id,
                    min_by(campaign_name, first_campaign_member_created_date) as sal_first_touch_campaign_name,
                    max_by(campaign_name, first_campaign_member_created_date) as sal_last_touch_campaign_name,
                    min_by(campaign_id, first_campaign_member_created_date) as opp_first_touch_campaign_id,
                    max_by(campaign_id, first_campaign_member_created_date) as opp_last_touch_campaign_id,
                    min_by(campaign_name, first_campaign_member_created_date) as opp_first_touch_campaign_name,
                    max_by(campaign_name, first_campaign_member_created_date) as opp_last_touch_campaign_name
                from campaign_attribution_source
                group by opportunity_id
            ),
        
            final as (
        
                select 
                    opportunities.opportunity_id, 
                    opportunities.opportunity_name, 
                    opportunities.account_id, 
                    accounts.account_name, 
                    opp_owner.name as owner_name,
                    opp_creator.name as created_by_name,
                    opportunities.close_date, 
                    opportunities.stage_name, 
                    opportunities.stage_order_number,
                    opportunities.amount, 
                    opportunities.description, 
                    opportunities.is_closed,
                    opportunities.is_won, 
                    opportunities.sal_date, 
                    opportunities.term_months,
                    sal_creator.name as sal_created_by_name,
                    sales_engineer.name as sales_engineer_name,
                    contacts.name as contact_name,
                    opportunities.amount_year1, 
                    opportunities.amount_year2, 
                    opportunities.amount_year3, 
                    opportunities.amount_year4, 
                    opportunities.amount_year5, 
                    accounts.is_target_account, 
                    accounts.target_account_type,
                    opportunities.probability, 
                    opportunities.opportunity_type, 
                    opportunities.next_step, 
                    opportunities.lead_source, 
                    opportunities.created_at, 
                    opportunities.updated_at, 
                    opportunities.is_account_first_opp,
                    opportunities.loss_reason, 
                    opportunities.loss_details, 
                    opportunities.competitor, 
                    opportunities.win_loss_competitor, 
                    opportunities.manual_forecast_category, 
                    opportunities.forecast_category, 
                    opportunities.forecast_category_name, 
                    opportunities.arr, 
                    opportunities.new_arr, 
                    opportunities.prior_term_arr, 
                    opportunities.recent_source, 
                    opportunities.account_source, 
                    opportunities.current_orchestrator, 
                    opportunities.budget, 
                    opportunities.missing_functionality, 
                    opportunities.feature_requirements, 
                    opportunities.intro_meeting_date,
                    opportunities.meeting_held_date,
                    opportunities.pre_opportunity_date, 
                    opportunities.discovery_date, 
                    opportunities.evaluation_date, 
                    opportunities.proposal_date, 
                    opportunities.negotiation_review_date,
                    opportunities.contact_id, 
                    opportunities.owner_id,
                    opportunities.risks,
                    opportunities.within_budget,
                    opportunities.current_data_stack,
                    opportunities.is_primary_evaluator_identified,
                    accounts.first_day_as_target_account as account_first_day_as_target_account,
                    partners.account_to_id as partner_account_id,
                    partners.account_to_name as partner_account_name,
                    campaign_attribution.sal_first_touch_campaign_id,
                    campaign_attribution.sal_last_touch_campaign_id,
                    campaign_attribution.sal_first_touch_campaign_name,
                    campaign_attribution.sal_last_touch_campaign_name,
                    campaign_attribution.opp_first_touch_campaign_id,
                    campaign_attribution.opp_last_touch_campaign_id,
                    campaign_attribution.opp_first_touch_campaign_name,
                    campaign_attribution.opp_last_touch_campaign_name,
                    salesforce_opportunity_history.stage_name as stage_before_closed_lost
                from opportunities
                left join accounts on opportunities.account_id = accounts.account_id
                left join sf_users as opp_owner on opportunities.owner_id = opp_owner.user_id
                left join sf_users as opp_creator on opportunities.created_by_id = opp_creator.user_id
                left join sf_users as sal_creator on opportunities.sal_created_by_id = sal_creator.user_id
                left join sf_users as sales_engineer on opportunities.sales_engineer_id = sales_engineer.user_id
                left join contacts on opportunities.contact_id = contacts.contact_id
                left join partners on opportunities.opportunity_id = partners.opportunity_id
                left join campaign_attribution on opportunities.opportunity_id = campaign_attribution.opportunity_id
                left join salesforce_opportunity_history on opportunities.opportunity_id = salesforce_opportunity_history.opportunity_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_opportunities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='opportunity_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='stage_order_number',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.dim_opportunities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_opportunities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_OPPORTUNITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_partners',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'snapshot_salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Uses the snapshot of the Salesforce Opportunity table as the source of records with additional columns from other Salesforce tables
        
        #### Raw SQL:
        ```sql
            with opportunities as (
        
                select * from {{ ref('snapshot_salesforce_opportunities') }}
            ),
        
            sf_users as (
        
                select * from {{ ref('salesforce_users') }}
            ),
        
            accounts as (
        
                select * from {{ ref('dim_accounts') }}
            ),
        
            contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
            ),
        
            partners as (
        
                select * from {{ ref('salesforce_partners') }}
                where role = 'Referrer'
        
            ),
        
            final as (
        
                select 
                    opportunities.snapshot_date,
                    opportunities.opportunity_id, 
                    opportunities.opportunity_name, 
                    opportunities.account_id, 
                    accounts.account_name, 
                    opp_owner.name as owner_name,
                    opp_creator.name as created_by_name,
                    opportunities.close_date, 
                    opportunities.stage_name, 
                    opportunities.amount, 
                    opportunities.description, 
                    opportunities.is_closed,
                    opportunities.is_won, 
                    opportunities.sal_date, 
                    sal_creator.name as sal_created_by_name,
                    contacts.name as contact_name,
                    opportunities.amount_year1, 
                    opportunities.amount_year2, 
                    opportunities.amount_year3, 
                    opportunities.amount_year4, 
                    opportunities.amount_year5, 
                    accounts.is_target_account, 
                    accounts.target_account_type,
                    opportunities.probability, 
                    opportunities.opportunity_type, 
                    opportunities.next_step, 
                    opportunities.lead_source, 
                    opportunities.created_at, 
                    opportunities.updated_at, 
                    opportunities.loss_reason, 
                    opportunities.loss_details, 
                    opportunities.competitor, 
                    opportunities.win_loss_competitor, 
                    opportunities.manual_forecast_category, 
                    opportunities.forecast_category, 
                    opportunities.forecast_category_name, 
                    opportunities.arr, 
                    opportunities.new_arr, 
                    opportunities.prior_term_arr, 
                    opportunities.recent_source, 
                    opportunities.account_source, 
                    opportunities.current_orchestrator, 
                    opportunities.budget, 
                    opportunities.missing_functionality, 
                    opportunities.feature_requirements, 
                    opportunities.intro_meeting_date,
                    opportunities.meeting_held_date,
                    opportunities.pre_opportunity_date, 
                    opportunities.discovery_date, 
                    opportunities.evaluation_date, 
                    opportunities.proposal_date, 
                    opportunities.negotiation_review_date,
                    opportunities.contact_id, 
                    opportunities.owner_id,
                    accounts.first_day_as_target_account as account_first_day_as_target_account,
                    case  
                        when opportunities.sal_date >= accounts.first_day_as_target_account then true
                        else false
                        end as is_abm_influenced_sal,
                    case  
                        when opportunities.created_at >= accounts.first_day_as_target_account then true
                        else false
                        end as is_abm_influenced_opp,
                    partners.account_to_id as partner_account_id,
                    partners.account_to_name as partner_account_name
                from opportunities
                left join accounts on opportunities.account_id = accounts.account_id
                left join sf_users as opp_owner on opportunities.owner_id = opp_owner.user_id
                left join sf_users as opp_creator on opportunities.created_by_id = opp_creator.user_id
                left join sf_users as sal_creator on opportunities.sal_created_by_id = sal_creator.user_id
                left join contacts on opportunities.contact_id = contacts.contact_id
                left join partners on opportunities.opportunity_id = partners.opportunity_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_opportunities_by_day',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.dim_opportunities_by_day',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_opportunities_by_day',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_OPPORTUNITIES_BY_DAY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_deployments',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__customer_info',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster Organizations Core Table. This table contains one row for each organization.
        
        #### Raw SQL:
        ```sql
            with 
        
            accounts as (
                select * from {{ ref('salesforce_accounts') }}
            ),
        
            customer_info as (
                select * from {{ ref('stg_cloud_product__customer_info') }}
            ),
        
            organizations as (
                select * from {{ ref('stg_cloud_product__organizations') }}
            ),
        
            user_organizations as (
                select * from {{ ref('user_organizations') }}
            ),
        
            runs as (
                select * from {{ ref('stg_cloud_product__runs') }}
            ),
        
            deployments as (
                select * from {{ ref('cloud_product_deployments') }}
            ),
        
            stripe_subscriptions as (
                select * from {{ ref('stripe_subscriptions') }}
            ),
        
            stripe_invoices as (
                select * from {{ ref('stripe_invoices') }}
            ),
        
            sf_accounts as (
                select
                    account_id,
                    organization_id,
                    account_type,
                    account_status
        
                from accounts
                where not is_deleted and organization_id regexp '\\d+'
                qualify row_number() over (partition by organization_id order by created_at desc) = 1
            ),
        
            stripe_customer as (
                select
                    organization_id,
                    stripe_customer_id
        
                from customer_info
            ),
        
            orgs as (
                select *
                from organizations
            ),
        
            user_orgs as (
                select
                    organization_id,
                    max(last_user_login) as last_user_login
        
                from user_organizations
                where not is_elementl_user
                group by 1
            ),
        
            last_trial_dates as (
                select
                    customer_id as stripe_customer_id,
                    trial_start,
                    trial_end
                from stripe_subscriptions
                where trial_start is not null
                qualify row_number() over (partition by customer_id order by trial_start desc) = 1
            ),
        
            last_invoices as (
                select
                    customer_id as stripe_customer_id,
                    invoice_total as last_invoice_amount,
                    invoice_created_at::date as last_invoice_date
                from stripe_invoices
                where invoice_total > 0
                qualify row_number() over (partition by customer_id order by invoice_created_at desc) = 1
            ),
        
            user_role_counts as (
                select
                    organization_id,
                    count(case when role = 'ADMIN' then 1 end) as admin_count,
                    count(case when role = 'EDITOR' then 1 end) as editor_count,
                    count(case when role = 'VIEWER' then 1 end) as viewer_count,
                    count(case when role = 'LAUNCHER' then 1 end) as launcher_count,
                    count(case when role = 'CUSTOM' then 1 end) as custom_role_count,
                    count(*) as total_seats_count
                from user_organizations
                where 
                    not is_elementl_user 
                    and is_activated
                group by 1
            ),
        
            last_run_times as (
                select
                    organization_id,
                    max(started_at) as last_run_at
        
                from runs
                group by 1
            ),
        
            deployment_counts as (
                select
                    organization_id,
                    count(case when is_hybrid then deployment_id end) as hybrid_deployment_count,
                    count(case when is_serverless then deployment_id end) as serverless_deployment_count
                from deployments
                where is_active
                group by 1
            ),
        
            final as (
                select
                    orgs.organization_id,
                    orgs.organization_name,
        
                    orgs.plan_type,
                    split_part(orgs.plan_type, '_', 1) as base_plan_type,
                    case
                        when plan_type = 'ENTERPRISE' then 'ENTERPRISE'
                        else 'SELF_SERVE'
                    end as self_serve_or_enterprise,
        
                    orgs.is_internal,
                    orgs.has_saml_sso,
        
                    coalesce(orgs.status, 'ACTIVE') as status,
                    coalesce(orgs.status, 'ACTIVE') = 'ACTIVE' and not orgs.is_internal as is_active,
        
                    user_orgs.last_user_login,
                    last_run_times.last_run_at,
        
                    sf_accounts.account_id as salesforce_account_id,
                    coalesce(sf_accounts.account_type, 'unset') as salesforce_account_type,
                    coalesce(sf_accounts.account_status, 'unset') as salesforce_account_status,
        
                    stripe_customer.stripe_customer_id,
                
                    last_trial_dates.trial_start,
                    last_trial_dates.trial_end,
                
                    last_invoices.last_invoice_amount,
                    last_invoices.last_invoice_date,
        
                    coalesce(deployment_counts.hybrid_deployment_count, 0) as hybrid_deployment_count,
                    coalesce(deployment_counts.serverless_deployment_count, 0) as serverless_deployment_count,
        
                    coalesce(user_role_counts.admin_count, 0) as admin_count,
                    coalesce(user_role_counts.editor_count, 0) as editor_count,
                    coalesce(user_role_counts.viewer_count, 0) as viewer_count,
                    coalesce(user_role_counts.launcher_count, 0) as launcher_count,
                    coalesce(user_role_counts.custom_role_count, 0) as custom_role_count,
                    coalesce(user_role_counts.total_seats_count, 0) as total_seats_count,
        
                    orgs.organization_metadata,
                    orgs.organization_settings,
        
                    orgs.created_at as org_created_at,
                    orgs.updated_at as org_updated_at
        
                from orgs
                left join user_orgs using (organization_id)
                left join stripe_customer using (organization_id)
                left join last_run_times using (organization_id)
                left join sf_accounts using (organization_id)
                left join deployment_counts using (organization_id)
                left join user_role_counts using (organization_id)
                left join last_trial_dates using (stripe_customer_id)
                left join last_invoices using (stripe_customer_id)
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='A unique numeric ID that identifies the organization.',
              name='ORGANIZATION_ID',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The display name of the organization.',
              name='ORGANIZATION_NAME',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="The subscription plan type for the organization, such as 'Free Trial' or 'Enterprise'.",
              name='PLAN_TYPE',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Indicates whether the organization is an internal Purina organization. A value of TRUE means the organization is internal, while FALSE means it is an external customer organization.',
              name='IS_INTERNAL',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Indicates whether the organization uses SAML single sign-on for user authentication. A value of TRUE means SAML SSO is enabled for the organization.',
              name='HAS_SAML_SSO',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="The status of the organization, such as 'Active' or 'Inactive'.",
              name='STATUS',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Indicates whether the organization is currently active. A value of TRUE means the organization is active, while FALSE means it is inactive.',
              name='IS_ACTIVE',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The timestamp of the most recent login by any user associated with the organization.',
              name='LAST_USER_LOGIN',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The timestamp of the most recent data pipeline run for the organization.',
              name='LAST_RUN_AT',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The ID of the associated Salesforce account record. This links the organization to its account in the Salesforce CRM.',
              name='SALESFORCE_ACCOUNT_ID',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="The type of the Salesforce account, such as 'Customer' or 'Partner'.",
              name='SALESFORCE_ACCOUNT_TYPE',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="The status of the Salesforce account, such as 'Active' or 'Inactive'.",
              name='SALESFORCE_ACCOUNT_STATUS',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The ID of the associated Stripe customer record. This links the organization to its customer account in the Stripe billing system.',
              name='STRIPE_CUSTOMER_ID',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Additional metadata stored about the organization. The data type is VARIANT, meaning the data can be of various formats.',
              name='ORGANIZATION_METADATA',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Organization-specific settings stored in the system. The data type is VARIANT, meaning the data can be of various formats.',
              name='ORGANIZATION_SETTINGS',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The timestamp when the organization was first created in the Purina system.',
              name='ORG_CREATED_AT',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The timestamp when the organization record was last updated.',
              name='ORG_UPDATED_AT',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.dim_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_identifies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_dagster_u_identifies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_hubspot_form_submits',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Takes data from various Segment sources and attempts to create a mapping of anonymous_id to email
        
        #### Raw SQL:
        ```sql
            with segment_web_pages as (
        
                select
                    anonymous_id,
                    user_id,
                    cast(null as string) as email,
                    min(timestamp) as first_seen,
                    max(timestamp) as last_seen
        
                from {{ ref('segment_web_pages') }}
                where user_id is not null or email is not null 
                group by all
            ),
        
            cloud_identifies as (
        
                select
                    anonymous_id,
                    user_id,
                    email,
                    min(timestamp) as first_seen,
                    max(timestamp) as last_seen
        
                from {{ ref('segment_cloud_identifies') }}
                where user_id is not null or email is not null 
                group by all
            ),
        
            hubspot_form_submits as (
        
                select
                    anonymous_id,
                    user_id,
                    email,
                    min(timestamp) as first_seen,
                    max(timestamp) as last_seen
        
                from {{ ref('segment_web_hubspot_form_submits') }}
                where user_id is not null or email is not null 
                group by all
            ),
        
            dag_u_identifies as (
        
                select distinct
                    anonymous_id,
                    user_id,
                    email,
                    min(timestamp) as first_seen,
                    max(timestamp) as last_seen,
        
                from {{ ref('segment_dagster_u_identifies') }}
                where user_id is not null or email is not null 
                group by all
            ),
        
            unioned as (
        
                select * from segment_web_pages
                union all
                select * from cloud_identifies
                union all
                select * from dag_u_identifies
                union all
                select * from hubspot_form_submits
        
            ),
        
            single_columns as (
        
                select 
                    anonymous_id,
                    first_seen,
                    last_seen,
            --- There are certain Segment sources that include an email address as user_id while others provide the group_id. Since the group_id a number, we run a check against the value to see if it is an email or a group_id
                    coalesce(
                        email,
                        case 
                            when try_cast(user_id as number) is not null then email
                            else user_id 
                            end)
                        as email_column,
                    case 
                        when try_cast(user_id as number) is not null then user_id
                        else null 
                        end 
                        as user_id_column
                from unioned
            ),
        
            --- Grab the last available email and user_id. It is possible that the last record for an anonymous may only contain one of these values, so we attempt to find the latest record for each that contains a non-null value.
            final as (
        
                select 
                    distinct anonymous_id,
                    last_value(email_column ignore nulls) over (
                        partition by anonymous_id 
                        order by last_seen rows between unbounded preceding and unbounded following
                    ) as email,
                    last_value(user_id_column ignore nulls) over (
                        partition by anonymous_id 
                        order by last_seen rows between unbounded preceding and unbounded following
                    ) as user_id
                from single_columns
                qualify row_number() over (partition by anonymous_id order by last_seen desc) = 1
            )
        
            select * from final where anonymous_id is not null
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_segment_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='anonymous_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.dim_segment_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_segment_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_SEGMENT_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster Users Core Table. This table contains one row for each user. One user can be associated with multiple organizations.
        
        #### Raw SQL:
        ```sql
            select
        
                user_id,
                email,
                user_name,
                user_title,
                experience,
                created_at,
                updated_at
        
            from {{ ref('stg_cloud_product__users') }}
            where not is_elementl_user
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//dim_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.dim_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.dim_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/DIM_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_thinkific__course_reviews',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All course reviews for all courses
        
        #### Raw SQL:
        ```sql
            select
                'thinkific' as source,
                course_review_id,
                title,
                review_text,
                course_id,
                rating,
                user_id,
                approved,
                created_at
            from {{ ref('stg_thinkific__course_reviews') }}
        ```
      ''',
      'group_name': 'model_education',
      'key': 'sandbox//education_course_reviews',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.education_course_reviews',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.education_course_reviews',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/EDUCATION_COURSE_REVIEWS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_thinkific__courses',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Course information
        
        #### Raw SQL:
        ```sql
            select
                'thinkific' as source,
                course_id,
                name,
                slug,
                product_id,
                description,
                keywords,
                banner_image_url,
                course_card_image_url,
                user_id,
                reviews_enabled,
                instructor_id
            from {{ ref('stg_thinkific__courses') }}
        ```
      ''',
      'group_name': 'model_education',
      'key': 'sandbox//education_courses',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.education_courses',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.education_courses',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/EDUCATION_COURSES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_thinkific__enrollments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Enrollments for users in courses
        
        #### Raw SQL:
        ```sql
            select
                'thinkific' as source,
                enrollment_id,
                created_at,
                user_email,
                user_name,
                user_id,
                course_name,
                course_id,
                percentage_completed,
                expired,
                is_free_trial,
                --- Certain courses have a capstone at the end. Internally, we consider a course completed even if the user does not finish the capstone.
                case 
                    when course_name = 'Dagster Essentials' and percentage_completed >= 0.87 then true
                    when course_name = 'Dagster Essentials' and percentage_completed < 0.87 then false
                    when course_name = 'Dagster & dbt' and percentage_completed = 1 then true
                    when course_name = 'Dagster & dbt' and percentage_completed < 1 then false
                    else completed
                    end as completed_fully_or_without_capstone,
                completed,
                started_at,
                activated_at,
                updated_at,
                completed_at
            from {{ ref('stg_thinkific__enrollments') }}
        ```
      ''',
      'group_name': 'model_education',
      'key': 'sandbox//education_enrollments',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.education_enrollments',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.education_enrollments',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/EDUCATION_ENROLLMENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_thinkific__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Users in our education platform
        
        #### Raw SQL:
        ```sql
            select
                'thinkific' as source,
                user_id,
                created_at,
                first_name,
                last_name,
                full_name,
                company,
                email,
                avatar_url,
                affiliate_commission_type,
                headline
            from {{ ref('stg_thinkific__users') }}
        ```
      ''',
      'group_name': 'model_education',
      'key': 'sandbox//education_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.education_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.education_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/EDUCATION_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_dagster_u_sessions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_dagster_u_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Users first touch parameters prior to Dagster University signup
        
        #### Raw SQL:
        ```sql
            with education_users as (
                select * from {{ ref('education_users') }}
            ),
        
            dim_users as (
                select * from {{ ref('dim_users') }}
            ),
        
            sessions as (
                select * from {{ ref('segment_dagster_u_sessions') }}
            ),
        
            user_stitching as (
                select * from {{ ref('segment_dagster_u_users') }}
            ),
        
            user_sessions as (
                select
        
                    sessions.*,
                    coalesce(case when sessions.source = 'dagster u' then lower(sessions.user_id::varchar) else lower(dim_users.email::varchar) end, 
                        case when user_stitching.source = 'dagster u' then lower(user_stitching.user_id::varchar) else lower(sessions.user_id::varchar) end,
                        lower(user_stitching.user_id::varchar),
                        sessions.anonymous_id) as blended_user_id
                
                from sessions
                left join user_stitching on sessions.anonymous_id = user_stitching.anonymous_id
                left join education_users on sessions.user_id = education_users.email
                left join dim_users on user_stitching.user_id::varchar = dim_users.user_id::varchar
            ),
        
            session_cats as (
                select
        
                    blended_user_id,
                    session_id,
                    session_started_at,
                    first_referrer_host as referrer_host,
                    first_referrer_medium as referrer_medium,
                    first_path as path,
                    first_campaign_source as campaign_source,
                    first_campaign_medium as campaign_medium,
                    first_campaign_name as campaign_name,
                    first_campaign_content as campaign_content,
                    first_utm_term as utm_term,
                    first_reddit_cid as reddit_cid,
                    first_gclid as gclid,
                    first_attribution_category as attribution_category
        
                from user_sessions
            ),
        
            final as (
                select distinct
        
                    education_users.user_id,
                    education_users.email,
                    education_users.first_name,
                    education_users.last_name,
                    education_users.full_name,
                    education_users.company,
                    education_users.affiliate_commission_type,
        
                    first_value(signup_session_cats.session_id)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_session_id,
                    first_value(signup_session_cats.session_started_at)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_session_started_at,
                    first_value(referrer_host)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_referrer_host,
                    first_value(referrer_medium)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_referrer_medium,
                    first_value(path)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_path,
                    first_value(campaign_source)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_source,
                    first_value(campaign_medium)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_medium,
                    first_value(campaign_name)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_name,
                    first_value(campaign_content)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_content,
                    first_value(utm_term)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_utm_term,
                    first_value(reddit_cid)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_reddit_cid,
                    first_value(gclid)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_gclid,
                    first_value(signup_session_cats.attribution_category)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_attribution_category,
        
                    last_value(signup_session_cats.session_id)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_session_id,
                    last_value(signup_session_cats.session_started_at)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_session_started_at,
                    last_value(referrer_host)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_referrer_host,
                    last_value(referrer_medium)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_referrer_medium,
                    last_value(path)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_path,
                    last_value(campaign_source)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_source,
                    last_value(campaign_medium)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_medium,
                    last_value(campaign_name)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_name,
                    last_value(campaign_content)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_content,
                    last_value(utm_term)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_utm_term,
                    last_value(reddit_cid)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_reddit_cid,
                    last_value(gclid)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_gclid,
                    last_value(signup_session_cats.attribution_category)
                    ignore nulls over (
                        partition by education_users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_attribution_category,
                    coalesce(signup_first_referrer_host, signup_last_referrer_host) as referrer_host,
        
                    coalesce(signup_first_session_started_at, signup_last_session_started_at)
                        as session_started_at,
                    coalesce(signup_first_referrer_medium, signup_last_referrer_medium) as referrer_medium,
                    coalesce(signup_first_path, signup_last_path) as path,
                    coalesce(signup_first_campaign_source, signup_last_campaign_source) as campaign_source,
                    coalesce(signup_first_campaign_medium, signup_last_campaign_medium) as campaign_medium,
                    coalesce(signup_first_campaign_name, signup_last_campaign_name) as campaign_name,
                    coalesce(signup_first_campaign_content, signup_last_campaign_content) as campaign_content,
                    coalesce(signup_first_utm_term, signup_last_utm_term) as utm_term,
                    coalesce(signup_first_reddit_cid, signup_last_reddit_cid) as reddit_cid,
                    coalesce(signup_first_gclid, signup_last_gclid) as gclid,
                    coalesce(signup_first_attribution_category, signup_last_attribution_category)
                        as attribution_category
                from education_users
                inner join session_cats as signup_session_cats
                    on
                        lower(education_users.email) = signup_session_cats.blended_user_id
                        and education_users.created_at >= signup_session_cats.session_started_at
                        and datediff(
                            'days',
                            signup_session_cats.session_started_at,
                            education_users.created_at
                        )
                        <= {{ var('attribution_lookback_days') }}
            )
        
            select * from final
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//education_web_attributed_conversions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.education_web_attributed_conversions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.education_web_attributed_conversions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/EDUCATION_WEB_ATTRIBUTED_CONVERSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        dbt seed event_score_mapping
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//event_score_mapping',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/table_name': 'sandbox.event_score_mapping',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.event_score_mapping',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        dbt seed excludable_email_domains
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//excludable_email_domains',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/table_name': 'sandbox.excludable_email_domains',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.excludable_email_domains',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'materialization_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Execution time for a given step in a run
        
        #### Raw SQL:
        ```sql
            select
        
                mm.organization_id,
                mm.event_log_id,
                mm.run_id,
                mm.step_key,
                mm.metadata_value as execution_time_s
        
            from
                {{ ref('materialization_metadata') }} as mm
            where
                mm.label in ('Execution Time (seconds)', 'Execution Duration')
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//execution_time_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.execution_time_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.execution_time_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/EXECUTION_TIME_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gong_conversation_participants',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gong_meetings',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per meeting participant using Gong Meeting and Meeting Participant data
        
        #### Raw SQL:
        ```sql
            with meetings as (
        
              select * from {{ ref('gong_meetings') }}
            ),
        
            participants as (
        
              select * from {{ ref('gong_conversation_participants') }}
            ),
        
            contacts as (
        
              select * from {{ ref('dim_contacts') }}
            ),
        
            joined as (
        
              select 
                meetings.meeting_title,
                coalesce(participants.name, contacts.name) as attendee_name,
                coalesce(contacts.title, participants.internal_role_name) as title,
                contacts.title_category,
                case when contacts.title_category = 'Executive' then true else false end as is_executive,
                case when contacts.title_category = 'Manager' then true else false end as is_manager,
                participants.email,
                participants.affiliation,
                participants.type,
                participants.invitee_status,
                participants.internal_role_name,
                contacts.account_id,
                contacts.account_name,
                meetings.start_at,
                meetings.end_at,
                meetings.is_canceled,
                meetings.row_id,
                meetings.conversation_key,
                meetings.meeting_event_type,
                meetings.created_at,
                meetings.modified_at,
                meetings.organizer_user_id,
                meetings.organizer_name,
                meetings.is_recurring,
                meetings.is_internal,
                meetings.opportunity_id,
                meetings.is_all_day,
                meetings.conversation_id,
                meetings.call_id,
                meetings.call_conversation_key,
                meetings.workspace_ids,
                participants.fields_snapshot,
                participants.user_id,
                participants.associated_object_id,
              from meetings
              left join participants on meetings.conversation_key = participants.conversation_key
              left join contacts on participants.associated_object_id = contacts.salesforce_contact_id
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_gong_meeting_participants',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.fct_gong_meeting_participants',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_gong_meeting_participants',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_GONG_MEETING_PARTICIPANTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_gong_meeting_participants',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per meeting using Gong Meeting with aggregated facts from Meeting Participant data
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ ref('fct_gong_meeting_participants') }}
            ),
        
            choose_primary_account as (
        
            --- there is the possibility that more than one account is represented on the call, so we try to choose a primary
                select 
                    conversation_key, 
                    account_id,
                    account_name
                from source
                where account_id is not null
                group by all
                qualify row_number() over (partition by conversation_key order by count(*) desc) = 1
            ),
        
            first_meeting_flag as (
            
                select
                    opportunity_id,
                    conversation_key
                from source
                where is_canceled = false
                and is_internal = false
                qualify row_number() over (partition by opportunity_id order by start_at) = 1
            ),
        
            final as (
        
                select
                    source.conversation_key,
                    meeting_title,
                    organizer_name,
                    start_at,
                    end_at,
                    count(case when affiliation != 'company' then email end) as customer_invite_count,
                    count(case when affiliation = 'company' then email end) as internal_invite_count,
                    choose_primary_account.account_id as primary_account_id,
                    choose_primary_account.account_name as primary_account_name,
                    is_canceled,
                    meeting_event_type,
                    created_at,
                    modified_at,
                    organizer_user_id,
                    is_recurring,
                    is_internal,
                    is_all_day,
                    conversation_id,
                    source.opportunity_id,
                    coalesce(case when first_meeting_flag.conversation_key is not null then true else false end, false) as is_first_opportunity_meeting
                from source
                left join choose_primary_account on source.conversation_key = choose_primary_account.conversation_key
                left join first_meeting_flag on source.conversation_key = first_meeting_flag.conversation_key
                group by all
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_gong_meetings',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='conversation_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_gong_meetings',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_gong_meetings',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_GONG_MEETINGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'outreach_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'outreach_mailings',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'outreach_prospects',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'outreach_sequences',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Takes Outreach outbound mail and adds information about the prospect who is receiving the email
        
        #### Raw SQL:
        ```sql
            with mailings as (
        
                select * from {{ ref('outreach_mailings') }}
            ),
        
            prospects as (
        
                select * from {{ ref('outreach_prospects') }}
            ),
        
            sequences as (
        
                select * from {{ ref('outreach_sequences') }}
            ),
        
            accounts as (
            
                select * from {{ ref('outreach_accounts') }}
            ),
        
            joined as (
        
                select 
                    mailings.mailing_id, 
                    mailings.state, 
                    mailings.created_at, 
                    mailings.delivered_at, 
                    prospects.name,
                    prospects.email,
                    prospects.salesforce_contact_id,
                    accounts.account_name,
                    accounts.salesforce_account_id,
                    sequences.sequence_name,
                    mailings.clicked_at, 
                    mailings.click_count, 
                    mailings.opened_at, 
                    mailings.open_count, 
                    mailings.replied_at, 
                    mailings.bounced_at, 
                    mailings.error_backtrace, 
                    mailings.error_reason, 
                    mailings.follow_up_task_scheduled_at, 
                    mailings.follow_up_task_type, 
                    mailings.mailbox_address, 
                    mailings.mailing_type, 
                    mailings.marked_as_spam_at, 
                    mailings.message_id, 
                    mailings.notify_thread_condition, 
                    mailings.notify_thread_scheduled_at, 
                    mailings.notify_thread_status, 
                    mailings.override_safety_settings, 
                    mailings.retry_at, 
                    mailings.retry_count, 
                    mailings.retry_interval, 
                    mailings.scheduled_at, 
                    mailings.state_changed_at, 
                    mailings.subject, 
                    mailings.track_links, 
                    mailings.track_opens, 
                    mailings.unsubscribed_at, 
                    mailings.updated_at, 
                    mailings.relationship_follow_up_sequence_id, 
                    mailings.relationship_mailbox_id, 
                    mailings.relationship_opportunity_id, 
                    mailings.relationship_prospect_id, 
                    mailings.relationship_sequence_id, 
                    mailings.relationship_sequence_state_id, 
                    mailings.relationship_sequence_step_id, 
                    mailings.relationship_task_id, 
                    mailings.relationship_template_id, 
                    mailings.relationship_user_id
                from mailings
                left join prospects on mailings.relationship_prospect_id = prospects.prospect_id
                left join sequences on mailings.relationship_sequence_id = sequences.sequence_id
                left join accounts on prospects.relationship_account_id = accounts.account_id
            ),
        
            flags as (
        
                select
                    *,
                    case 
                        when replied_at is not null then true
                        else false
                        end as is_replied_to,
                    case 
                        when created_at = min(case when (state = 'delivered' or state = 'replied') then created_at end) over (partition by relationship_prospect_id) 
                        then true 
                        else false end as is_first_delivered_email,
                    case 
                        when created_at = min(case when opened_at is not null then created_at end) over (partition by relationship_prospect_id) 
                        then true 
                        else false end as is_first_opened_email,
                    case 
                        when created_at = min(case when replied_at is not null then created_at end) over (partition by relationship_prospect_id) 
                        then true 
                        else false end as is_first_replied_email,
                    row_number() over (partition by relationship_prospect_id order by created_at) as prospect_email_send_count
                from joined
            )
        
            select * from flags
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_outreach_mailings',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='mailing_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_outreach_mailings',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_outreach_mailings',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_OUTREACH_MAILINGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__event_logs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__run_tags',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__runs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        This model contains a row for each run initiated by Dagster. Runs
        are enriched with data from Run Tags that include details such as
        what type of agent was used to execute the run.
        
        
        #### Raw SQL:
        ```sql
            {{ config(snowflake_warehouse="L_WAREHOUSE") }}
            with event_logs as (
                select * from {{ ref('stg_cloud_product__event_logs') }}
            ),
        
            run_tags as (
                select * from {{ ref('stg_cloud_product__run_tags') }}
            ),
        
            runs as (
                select * from {{ ref('stg_cloud_product__runs') }}
            ),
        
            events as (
                select
                    event_start.organization_id,
                    event_start.deployment_id,
                    event_start.run_id,
                    event_start.created_at as started_at,
                    event_end.created_at as ended_at,
                    timestampdiff('ms', started_at, ended_at) as duration_ms
        
                from event_logs as event_start,
                    lateral (
                        select min(created_at) as created_at
                        from event_logs
                        where
                            dagster_event_type in ('PIPELINE_SUCCESS', 'PIPELINE_FAILURE', 'PIPELINE_CANCELED')
                            and event_logs.run_id = event_start.run_id
                            and event_logs.organization_id = event_start.organization_id
                            and event_logs.deployment_id = event_start.deployment_id
                    ) as event_end
                where event_start.dagster_event_type = 'PIPELINE_START'
                qualify
                    row_number()
                        over (
                            partition by organization_id, deployment_id, run_id -- noqa: RF02
                            order by event_start.created_at
                        )
                    = 1
            ),
        
            tags as (
                select
                    organization_id,
                    deployment_id,
                    run_id,
                    max(case when key = '.dagster/agent_type' then value end) as agent_type,
                    max(case when key = 'dagster/backfill' then value end) as backfill_id,
                    max(case when key = 'dagster/partition_set' then value end) as partition_set_name,
                    max(case when key = 'dagster/schedule_name' then value end) as schedule_name,
                    max(case when key = 'dagster/sensor_name' then value end) as sensor_name
                from run_tags
                where
                    key in (
                        '.dagster/agent_type',
                        'dagster/backfill',
                        'dagster/partition_set',
                        'dagster/schedule_name',
                        'dagster/sensor_name'
                    )
                group by 1, 2, 3
        
            ),
        
        
            final as (
        
                select
        
                    runs.organization_id,
                    runs.deployment_id,
                    runs.run_id,
        
                    runs.job_name,
                    runs.status as run_status,
                    runs.repository_name,
                    runs.code_location_name,
        
                    coalesce(tags.agent_type, 'HYBRID') as agent_type,
        
                    tags.backfill_id,
                    tags.partition_set_name,
        
                    tags.schedule_name,
                    tags.sensor_name,
        
                    runs.created_at,
                    runs.updated_at,
        
                    events.started_at,
                    events.ended_at,
                    events.duration_ms,
                    events.duration_ms / 1000 / 60.0 as duration_mins,
        
                    current_timestamp() as _incremented_at
        
                from runs
                left join events using (organization_id, deployment_id, run_id)
                left join tags using (organization_id, deployment_id, run_id)
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//fct_runs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='run_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='agent_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_runs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_runs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_RUNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_segment_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Takes the Segment data from the web app and appends identifiable information. Further it deduplicates records.
        
        #### Raw SQL:
        ```sql
            with web_page_data as (
        
                select * from {{ ref('segment_cloud_pages') }}
            ),
        
            deanonymized_user as (
        
                select * from {{ ref('dim_segment_users') }}
            ),
        
            --- Note: the cloud website does not have the same issue with duplication as the marketing website as documented in fct_segment_web_page_visits 
            final as (
        
                select
                    web_page_data.* exclude (user_id),
                    deanonymized_user.email,
                    deanonymized_user.user_id
                from web_page_data
                left join deanonymized_user on web_page_data.anonymous_id = deanonymized_user.anonymous_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_segment_cloud_page_visits',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_segment_cloud_page_visits',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_segment_cloud_page_visits',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_SEGMENT_CLOUD_PAGE_VISITS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_segment_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_dagster_u_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Takes the Segment data from the Dagster University website and appends identifiable information.
        
        #### Raw SQL:
        ```sql
            with web_page_data as (
        
                select * from {{ ref('segment_dagster_u_pages') }}
            ),
        
            deanonymized_user as (
        
                select * from {{ ref('dim_segment_users') }}
            ),
        
            --- Note: the cloud website does not have the same issue with duplication as the marketing website as documented in fct_segment_web_page_visits 
            final as (
        
                select
                    web_page_data.* exclude (user_id, email),
                    coalesce(deanonymized_user.email, web_page_data.email) as email,
                    deanonymized_user.user_id
                from web_page_data
                left join deanonymized_user on web_page_data.anonymous_id = deanonymized_user.anonymous_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_segment_dagster_u_page_visits',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_segment_dagster_u_page_visits',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_segment_dagster_u_page_visits',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_SEGMENT_DAGSTER_U_PAGE_VISITS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_segment_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_docs_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Takes the Segment data from the docs website and appends identifiable information.
        
        #### Raw SQL:
        ```sql
            with web_page_data as (
        
                select * from {{ ref('segment_docs_pages') }}
            ),
        
            deanonymized_user as (
        
                select * from {{ ref('dim_segment_users') }}
            ),
        
            --- Note: the docs website does not have the same issue with duplication as the marketing website as documented in fct_segment_web_page_visits 
            final as (
        
                select
                    web_page_data.* exclude (user_id),
                    deanonymized_user.email,
                    deanonymized_user.user_id
                from web_page_data
                left join deanonymized_user on web_page_data.anonymous_id = deanonymized_user.anonymous_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_segment_docs_page_visits',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_segment_docs_page_visits',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_segment_docs_page_visits',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_SEGMENT_DOCS_PAGE_VISITS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_segment_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Takes the Segment data from the marketing website (i.e. Dagster.io) and appends identifiable information. Further it deduplicates records.
        
        #### Raw SQL:
        ```sql
            with web_page_data as (
        
                select * from {{ ref('segment_web_pages') }}
            ),
        
            deanonymized_user as (
        
                select * from {{ ref('dim_segment_users') }}
            ),
        
            --- It is a known issue that there is a significant amount of duplication in our marketing site data. At the time of creating this deduplication, nearly 10% of records had a duplicate.
            --- Here we create a surrogate key using the columns that are the same across the duplicate records
            surrogate_key as (
        
                select
                    {{ dbt_utils.generate_surrogate_key([
                        'anonymous_id', 
                        'referrer_host_unparsed', 
                        'referrer_host', 
                        'referrer', 
                        'path', 
                        'title', 
                        'search', 
                        'search_params', 
                        'campaign_source', 
                        'campaign_medium', 
                        'campaign_name', 
                        'campaign_content', 
                        'utm_term', 
                        'reddit_cid', 
                        'gclid' 
                    ]) }} as event_surrogate_key,
                    *
                from web_page_data
            ),
        
            --- There is a possibility that this surrogate key could be appropriately duplicated, especially in cases where there is sparse data in these columns
            --- As such, we decided that we would only remove duplicates if the timestamp on the records was less than 2 seconds apart. In nearly all cases of true duplication, the records have timestamps less than 1 second apart; however, we want to be safe.
            check_for_dupes as (
        
                select 
                    *,
                    lag(timestamp, 1) over (partition by event_surrogate_key order by timestamp desc) as timestamp_lag,
                    timestampdiff(second, timestamp, lag(timestamp, 1) over (partition by event_surrogate_key order by timestamp desc)) as time_diff_to_next
                from surrogate_key
            ),
        
            final as (
        
                select
                    check_for_dupes.* exclude (user_id),
                    deanonymized_user.email,
                    deanonymized_user.user_id
                from check_for_dupes
                left join deanonymized_user on check_for_dupes.anonymous_id = deanonymized_user.anonymous_id
                where (time_diff_to_next >= 2 or time_diff_to_next is null)
            )
        
            select * exclude (timestamp_lag, time_diff_to_next, event_surrogate_key) from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_segment_web_page_visits',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_segment_web_page_visits',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_segment_web_page_visits',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_SEGMENT_WEB_PAGE_VISITS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__event_logs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Fact table containing information about step durations and events
        
        
        #### Raw SQL:
        ```sql
            /* This is a partitioned, incremental model. Paritioning is handled
            by Dagster through the min_date and max_date variables.
            Most often, this will append new rows to the existing table, but
            in cases of a backfill, we'll use merge to overwrite using the
            unique step_id key.
        
            We use the `is_incremntal` tag to identify this as an incremental model,
            this tag is used by Dagster's dbt asset selector to find all incremental
            models *
            */
        
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key='step_id',
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
        
            with
        
            runs as (
                select *
                from {{ ref("fct_runs") }}
                {% if is_incremental() %}
                    where ended_at >= '{{ var('min_date') }}' and ended_at < '{{ var('max_date') }}'
                {% endif %}
            ),
        
            run_bounds as (
                select
                    min(started_at) as min_run_started_at,
                    max(ended_at) as max_run_ended_at
                from runs
            ),
        
            event_logs as (
                select e.*
                from {{ ref('stg_cloud_product__event_logs') }} as e
                inner join runs using (run_id)
                where
                    e.created_at between (select min_run_started_at from run_bounds
                    ) and (select max_run_ended_at from run_bounds
                    )
            ),
        
            steps_up_for_retry as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    created_at
                from event_logs
                where dagster_event_type = 'STEP_UP_FOR_RETRY'
            ),
        
            steps_restarted as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    created_at
                from event_logs
                where dagster_event_type = 'STEP_RESTARTED'
            ),
        
            retries as (
                select
                    steps_up_for_retry.organization_id,
                    steps_up_for_retry.run_id,
                    steps_up_for_retry.step_key,
                    steps_up_for_retry.created_at as start_time,
                    min(steps_restarted.created_at) as end_time
                from steps_up_for_retry
                left join steps_restarted
                    on
                        steps_up_for_retry.organization_id = steps_restarted.organization_id
                        and steps_up_for_retry.run_id = steps_restarted.run_id
                        and steps_up_for_retry.step_key = steps_restarted.step_key
                        and steps_up_for_retry.created_at < steps_restarted.created_at
                group by all
            ),
        
            retry_durations as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    sum(timestampdiff('ms', start_time, end_time)) as retry_duration_ms
                from retries
                group by all
            ),
        
            step_execution_starts as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    min(created_at) as start_time
                from event_logs
                where dagster_event_type = 'STEP_START'
                group by all
            ),
        
            step_execution_ends as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    dagster_event_type,
                    created_at as end_time,
                    rank()
                        over (partition by organization_id, run_id, step_key order by created_at asc)
                        as ranking
                from event_logs
                where dagster_event_type in ('STEP_SUCCESS', 'STEP_FAILURE')
            ),
        
            step_worker_init_starts as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    min(created_at) as start_time
                from event_logs
                where dagster_event_type = 'STEP_WORKER_STARTING'
                group by all
            ),
        
            step_worker_init_ends as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    min(created_at) as end_time
                from event_logs
                where dagster_event_type = 'STEP_WORKER_STARTED'
                group by all
            ),
        
            resource_init_starts as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    min(created_at) as start_time
                from event_logs
                where dagster_event_type = 'RESOURCE_INIT_STARTED'
                group by all
            ),
        
            resource_init_ends as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    dagster_event_type,
                    created_at as end_time,
                    rank()
                        over (partition by organization_id, run_id, step_key order by created_at asc)
                        as ranking
                from event_logs
                where dagster_event_type in ('RESOURCE_INIT_SUCCESS', 'RESOURCE_INIT_FAILURE')
            ),
        
            step_execution_durations as (
                select
                    ss.organization_id,
                    ss.run_id,
                    ss.step_key,
                    ss.start_time,
                    se.end_time,
                    se.dagster_event_type as status,
                    timestampdiff('ms', ss.start_time, se.end_time) as duration_ms
                from step_execution_starts as ss
                left join step_execution_ends as se
                    on
                        ss.organization_id = se.organization_id
                        and ss.run_id = se.run_id
                        and ss.step_key = se.step_key
                        and se.ranking = 1
            ),
        
            step_init_durations as (
                select
                    ws.organization_id,
                    ws.run_id,
                    ws.step_key,
                    re.dagster_event_type as status,
                    timestampdiff('ms', ws.start_time, we.end_time) as step_worker_init_duration_ms,
                    timestampdiff('ms', rs.start_time, re.end_time) as resource_init_duration_ms
                from step_worker_init_starts as ws
                left join step_worker_init_ends as we
                    on
                        ws.run_id = we.run_id
                        and ws.step_key = we.step_key
                        and ws.organization_id = we.organization_id
                left join resource_init_starts as rs
                    on
                        ws.run_id = rs.run_id
                        and ws.step_key = rs.step_key
                        and ws.organization_id = rs.organization_id
                left join resource_init_ends as re
                    on
                        ws.run_id = re.run_id
                        and ws.step_key = re.step_key
                        and ws.organization_id = re.organization_id
                        and re.ranking = 1
            ),
        
            step_durations as (
                select
                    coalesce(se.organization_id, si.organization_id) as organization_id,
                    coalesce(se.run_id, si.run_id) as run_id,
                    coalesce(se.step_key, si.step_key) as step_key,
                    coalesce(se.status, si.status) as status,
                    se.start_time,
                    se.end_time,
                    coalesce(se.duration_ms, 0) as duration_ms,
                    coalesce(si.step_worker_init_duration_ms, 0) as step_worker_init_duration_ms,
                    coalesce(si.resource_init_duration_ms, 0) as resource_init_duration_ms,
                    coalesce(rd.retry_duration_ms, 0) as retry_duration_ms
                from step_execution_durations as se
                full outer join step_init_durations as si
                    on
                        se.run_id = si.run_id
                        and se.step_key = si.step_key
                        and se.organization_id = si.organization_id
                left join retry_durations as rd
                    on
                        se.run_id = rd.run_id
                        and se.step_key = rd.step_key
                        and se.organization_id = si.organization_id
            ),
        
            total_step_durations as (
                select
                    sd.organization_id,
                    sd.run_id,
                    (sum(sd.duration_ms) + sum(sd.resource_init_duration_ms) - sum(sd.retry_duration_ms))
                    / 1000
                    / 60 as total_step_duration_mins
                from step_durations as sd
                group by all
            ),
        
            event_metrics as (
                select
                    organization_id,
                    run_id,
                    step_key,
                    count_if(dagster_event_type = 'ASSET_MATERIALIZATION') as asset_materializations,
                    count_if(dagster_event_type = 'ASSET_MATERIALIZATION_PLANNED')
                        as asset_materializations_planned,
                    count_if(dagster_event_type = 'ASSET_CHECK_EVALUATION') as asset_check_evalutations,
                    count_if(dagster_event_type = 'ASSET_CHECK_EVALUATION_PLANNED')
                        as asset_check_evalutations_planned
                from event_logs
                where
                    dagster_event_type in (
                        'ASSET_MATERIALIZATION',
                        'ASSET_MATERIALIZATION_PLANNED',
                        'ASSET_CHECK_EVALUATION',
                        'ASSET_CHECK_EVALUATION_PLANNED'
                    )
                group by all
            )
        
            select distinct
                r.organization_id,
                r.deployment_id,
        
        
                {{ dbt_utils.generate_surrogate_key(['sd.organization_id', 'sd.run_id', 'sd.step_key']) }}
                    as step_id,
                uuid_string('82aa6994-b73d-4874-bfbe-fcfadebe6968', step_id) as step_data_id,
                sd.run_id,
                sd.step_key,
                r.agent_type,
                r.repository_name,
                r.code_location_name,
                r.job_name,
                sd.start_time,
                sd.end_time,
                sd.status,
                sd.duration_ms,
                sd.step_worker_init_duration_ms,
                sd.resource_init_duration_ms,
                sd.retry_duration_ms,
                r.started_at as run_started_at,
                r.ended_at as run_ended_at,
                (sd.duration_ms + sd.resource_init_duration_ms - sd.retry_duration_ms) as step_duration_ms,
                (sd.duration_ms + sd.resource_init_duration_ms - sd.retry_duration_ms)
                / 1000
                / 60 as step_duration_mins,
                tsd.total_step_duration_mins >= 100000 as is_anomaly,
                zeroifnull(asset_materializations) > 0
                or zeroifnull(asset_materializations_planned) > 0 as is_asset_materialization_step,
                zeroifnull(asset_check_evalutations) > 0
                or zeroifnull(asset_check_evalutations_planned) > 0 as is_asset_check_step,
                (not is_asset_check_step) or is_asset_materialization_step as is_billable_step,
                current_timestamp() as _incremented_at
        
            from step_durations as sd
            inner join runs as r
                on sd.run_id = r.run_id and sd.organization_id = r.organization_id
            left join total_step_durations as tsd
                on sd.run_id = tsd.run_id and sd.organization_id = tsd.organization_id
            left join event_metrics as m
                on sd.run_id = m.run_id and sd.organization_id = m.organization_id and sd.step_key = m.step_key
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//fct_steps',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='ID of the organization associated with the run',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='ID of the deployment associated with the run',
              name='deployment_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Surrogate key for the step',
              name='step_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='ID of the run associated with the step',
              name='run_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Key of the step',
              name='step_key',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Type of the agent associated with the run',
              name='agent_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Start time of the step execution',
              name='start_time',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='End time of the step execution',
              name='end_time',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Status of the step execution',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Duration of the step execution in milliseconds',
              name='duration_ms',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Duration of the step worker initialization in milliseconds',
              name='step_worker_init_duration_ms',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Duration of the resource initialization in milliseconds',
              name='resource_init_duration_ms',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Duration of the step retry in milliseconds',
              name='retry_duration_ms',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Start time of the run',
              name='run_started_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='End time of the run',
              name='run_ended_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Flag indicating if the step duration is an anomaly',
              name='is_anomaly',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date this particular row was updated during the incremental run',
              name='_incremented_at',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_steps',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_steps',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_STEPS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'zoom_registrants',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'zoom_webinars',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Takes Zoom data and creates one line per sign up for a webinar with the outcome of that sign up (Registered, Did Not Attend, Attended)
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('zoom_registrants') }}
            ),
        
            webinars as (
        
                select * from {{ ref('zoom_webinars') }}
            ),
        
            joined as (
        
                select
                    source.registrant_id,
                    source.name,
                    source.email,
                    source.webinar_id,
                    webinars.webinar_name,
                    case 
                        when date(webinars.start_time) >= current_date then 'Registered' 
                        when source.participant_registrant_id is not null then 'Attended'
                        when source.absentee_registrant_id is not null then 'Registered, Did Not Attend'
                        end as attendance_status, 
                    source.create_time as signed_up_at,
                    webinars.start_time as webinar_start_at,
                    source.initial_join_time as initial_join_at,
                    source.join_url,
                    source.total_duration as total_attendance_time
                from source
                left join webinars on source.webinar_id = webinars.webinar_id
            ),
        
            cumulative_counts as (
        
                select
                    *,
                    coalesce(row_number() over (partition by email order by webinar_start_at), 0) as cumulative_webinars_registered,
                    coalesce(case when lower(attendance_status) = 'attended' then row_number() over (partition by email order by webinar_start_at) end, 0) as cumulative_webinars_attended
                from joined
            ),
        
            flags as (
        
                select 
                    *,
                    case 
                        when cumulative_webinars_registered = 1 then true
                        else false
                        end as is_first_webinar_registration,
                    case 
                        when cumulative_webinars_attended = 1 then true
                        else false
                        end as is_first_webinar_attended,
                from cumulative_counts
            )
        
            select * from flags
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//fct_zoom_webinar_registration',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='registrant_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.fct_zoom_webinar_registration',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.fct_zoom_webinar_registration',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FCT_ZOOM_WEBINAR_REGISTRATION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_sessions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        First touch attributed model on sessions
        
        #### Raw SQL:
        ```sql
            with sessions as (
                select * from {{ ref('segment_web_sessions') }}
            ),
        
            user_stitching as (
                select * from {{ ref('segment_cloud_users') }}
            ),
        
            attributed as (
        
                select
        
                    *,
                    first_attribution_category as attribution_category
        
                from sessions
            ),
        
            final as (
        
                select
        
                    attributed.*,
                    coalesce(user_stitching.user_id, attributed.anonymous_id) as blended_user_id
        
                from attributed
                left join user_stitching using (anonymous_id)
            )
        
            select * from final
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//first_touch',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='blended_user_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='session_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.first_touch',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.first_touch',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FIRST_TOUCH',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_sessions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        First user web session information for cloud users
        
        #### Raw SQL:
        ```sql
            with sessions as (
        
                select * from {{ ref('segment_web_sessions') }}
        
            ),
        
            user_stitching as (
        
                select * from {{ ref('segment_cloud_users') }}
        
            ),
        
            user_sessions as (
        
                select
        
                    sessions.*,
                    user_id,
                    coalesce(user_stitching.user_id, sessions.anonymous_id) as blended_user_id
        
                from sessions
                left join user_stitching using (anonymous_id)
        
            ),
        
            first_user_web_session as (
        
                select
                    user_id,
                    session_id,
                    session_started_at,
                    first_referrer_host as referrer_host,
                    first_referrer_medium as referrer_medium,
                    first_path as path,
                    first_campaign_source as campaign_source,
                    first_campaign_medium as campaign_medium,
                    first_campaign_name as campaign_name,
                    first_campaign_content as campaign_content,
                    first_utm_term as utm_term,
                    first_reddit_cid as reddit_cid,
                    first_gclid as gclid,
                    first_attribution_category as attribution_category
        
                from user_sessions
                where user_id is not null
                qualify row_number() over (partition by user_id order by session_started_at asc) = 1
        
            )
        
            select * from first_user_web_session
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//first_user_web_session',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.first_user_web_session',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.first_user_web_session',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FIRST_USER_WEB_SESSION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_sessions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contact_form_submissions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Attribution information for all hubspot form submissions
        
        #### Raw SQL:
        ```sql
            with stg_hubspot__contact_form_submissions as (
        
                select * from {{ ref('stg_hubspot__contact_form_submissions') }}
        
            ),
        
            sessions as (
        
                select * from {{ ref('segment_web_sessions') }}
        
            ),
        
            session_cats as (
                select
        
                    anonymous_id,
                    session_id,
                    session_started_at,
                    first_referrer_host as referrer_host,
                    first_referrer_medium as referrer_medium,
                    first_path as path,
                    first_campaign_source as campaign_source,
                    first_campaign_medium as campaign_medium,
                    first_campaign_name as campaign_name,
                    first_campaign_content as campaign_content,
                    first_utm_term as utm_term,
                    first_reddit_cid as reddit_cid,
                    first_gclid as gclid,
                    first_attribution_category as attribution_category
        
                from sessions
            )
        
            select distinct
                stg_hubspot__contact_form_submissions.*,
                first_value(form_fill_session_cats.session_id)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_session_id,
                first_value(form_fill_session_cats.session_started_at)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_session_started_at,
                first_value(referrer_host)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_referrer_host,
                first_value(referrer_medium)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_referrer_medium,
                first_value(path)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_path,
                first_value(campaign_source)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_campaign_source,
                first_value(campaign_medium)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_campaign_medium,
                first_value(campaign_name)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_campaign_name,
                first_value(campaign_content)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_campaign_content,
                first_value(utm_term)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_utm_term,
                first_value(reddit_cid)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_reddit_cid,
                first_value(gclid)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_gclid,
                first_value(form_fill_session_cats.attribution_category)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_first_attribution_category,
        
                last_value(form_fill_session_cats.session_id)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_session_id,
                last_value(form_fill_session_cats.session_started_at)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_session_started_at,
                last_value(referrer_host)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_referrer_host,
                last_value(referrer_medium)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_referrer_medium,
                last_value(path)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_path,
                last_value(campaign_source)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_campaign_source,
                last_value(campaign_medium)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_campaign_medium,
                last_value(campaign_name)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_campaign_name,
                last_value(campaign_content)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_campaign_content,
                last_value(utm_term)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_utm_term,
                last_value(reddit_cid)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_reddit_cid,
                last_value(gclid)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_gclid,
                last_value(form_fill_session_cats.attribution_category)
                ignore nulls over (
                    partition by stg_hubspot__contact_form_submissions.form_fill_id
                    order by form_fill_session_cats.session_started_at
                ) as form_fill_last_attribution_category,
                coalesce(form_fill_first_referrer_host, form_fill_last_referrer_host) as referrer_host,
                coalesce(form_fill_first_session_started_at, form_fill_last_session_started_at) as session_started_at,
                coalesce(form_fill_first_referrer_medium, form_fill_last_referrer_medium) as referrer_medium,
                coalesce(form_fill_first_path, form_fill_last_path) as path,
                coalesce(form_fill_first_campaign_source, form_fill_last_campaign_source) as campaign_source,
                coalesce(form_fill_first_campaign_medium, form_fill_last_campaign_medium) as campaign_medium,
                coalesce(form_fill_first_campaign_name, form_fill_last_campaign_name) as campaign_name,
                coalesce(form_fill_first_campaign_content, form_fill_last_campaign_content) as campaign_content,
                coalesce(form_fill_first_utm_term, form_fill_last_utm_term) as utm_term,
                coalesce(form_fill_first_reddit_cid, form_fill_last_reddit_cid) as reddit_cid,
                coalesce(form_fill_first_gclid, form_fill_last_gclid) as gclid,
                coalesce(form_fill_first_attribution_category, form_fill_last_attribution_category)
                    as attribution_category
            from stg_hubspot__contact_form_submissions
            inner join session_cats as form_fill_session_cats
                on
                    stg_hubspot__contact_form_submissions.anonymous_id = form_fill_session_cats.anonymous_id
                    and stg_hubspot__contact_form_submissions.timestamp >= form_fill_session_cats.session_started_at
                    and datediff(
                        'days',
                        form_fill_session_cats.session_started_at,
                        stg_hubspot__contact_form_submissions.timestamp
                    )
                    <= {{ var('attribution_lookback_days') }}
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//form_fill_attribution',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.form_fill_attribution',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.form_fill_attribution',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/FORM_FILL_ATTRIBUTION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gong_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_gong__conversation_participants',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per individual in the meeting or email
        
        #### Raw SQL:
        ```sql
            with source as (
              
                  select * from {{ ref('stg_gong__conversation_participants') }}
            ),
        
            users as (
        
                  select * from {{ ref('gong_users') }} 
            ),
        
            renamed as (
            
              select
                  source.row_id, 
                  source.conversation_key, 
                  --- without this coalesce the name field for internal users is "-"
                  coalesce(users.name, source.name) as name, 
                  source.email, 
                  source.phone_number, 
                  source.associated_object_type, 
                  source.speaker_id, 
                  source.mapped_fields_snapshot, 
                  source.fields_snapshot, 
                  source.affiliation, 
                  source.type, 
                  source.invitee_status, 
                  source.user_id, 
                  source.associated_object_id,
                  users.role_name as internal_role_name
              from source
              left join users on source.user_id = users.user_id
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'model_gong',
      'key': 'sandbox//gong_conversation_participants',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.gong_conversation_participants',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gong_conversation_participants',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GONG_CONVERSATION_PARTICIPANTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_gong__conversation_contexts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_gong__conversations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per Gong Conversation, this could be a meeting or email
        
        #### Raw SQL:
        ```sql
            with source as (
              
                  select * from {{ ref('stg_gong__conversations') }}
            ),
        
            conversation_context as (
        
              select * from {{ ref('stg_gong__conversation_contexts') }}
            ),
        
            opportunity as (
        
              select 
                * 
              from conversation_context
              where object_type = 'opportunity'
              qualify row_number() over (partition by conversation_key order by etl_modified_datetime desc) = 1
            ),
        
            renamed as (
            
              select
                source.conversation_id, 
                source.conversation_key, 
                source.workspace_ids, 
                source.conversation_type, 
                source.conversation_datetime, 
                opportunity.object_id as opportunity_id,
                source.row_id
              from source
              left join opportunity on source.conversation_key = opportunity.conversation_key
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'model_gong',
      'key': 'sandbox//gong_conversations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.gong_conversations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gong_conversations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GONG_CONVERSATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_gong__emails',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per email tracked by Gong
        
        #### Raw SQL:
        ```sql
            with emails as (
            
                select * from {{ ref('stg_gong__emails') }}
            ),
        
            renamed as (
            
                select
                    conversation_id, 
                    conversation_key, 
                    is_auto_submitted, 
                    auto_submitted_type, 
                    is_meeting_invite, 
                    direction, 
                    ooo_return_date, 
                    sent_at, 
                    workspace_ids, 
                    row_id
                from emails
                )
        
            select * from renamed
        ```
      ''',
      'group_name': 'model_gong',
      'key': 'sandbox//gong_emails',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.gong_emails',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gong_emails',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GONG_EMAILS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gong_conversations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gong_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_gong__meetings',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per meeting tracked by Gong
        
        #### Raw SQL:
        ```sql
            with source as (
        
              select * from {{ ref('stg_gong__meetings') }}
            ),
        
            users as (
        
              select * from {{ ref('gong_users') }}
            ),
        
            gong_conversations as (
        
              select * from {{ ref('gong_conversations') }}
            ),
        
            renamed as (
          
              select
                source.row_id, 
                source.conversation_key, 
                source.meeting_title, 
                source.organizer_user_id, 
                users.name as organizer_name,
                source.meeting_event_type, 
                source.created_at, 
                source.modified_at, 
                source.start_at, 
                source.end_at, 
                source.is_canceled, 
                source.is_recurring, 
                source.is_internal, 
                source.is_all_day, 
                source.conversation_id, 
                gong_conversations.opportunity_id,
                source.call_id, 
                source.call_conversation_key, 
                source.workspace_ids
              from source
              left join users on source.organizer_user_id = users.user_id
              left join gong_conversations on source.conversation_key = gong_conversations.conversation_key
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'model_gong',
      'key': 'sandbox//gong_meetings',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.gong_meetings',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gong_meetings',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GONG_MEETINGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_gong__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per internal Gong user
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ ref('stg_gong__users') }}
            ),
        
            salesforce_users as (
        
                select * from {{ ref('salesforce_users') }}
            ),
        
            ---if a user gets a new manager, a new record is created with the same user_id
            latest_record as (
        
                select 
                    * 
                from source
                qualify row_number() over (partition by user_id order by valid_from_datetime desc) = 1
            ),
        
            joined as (
                select 
                    latest_record.*,
                    salesforce_users.role_name 
                from latest_record
                left join salesforce_users on latest_record.email = salesforce_users.email
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'model_gong',
      'key': 'sandbox//gong_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.gong_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gong_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GONG_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_groups',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_ads__ad_group_stats',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Google Ads Ad Group Stats
        
        #### Raw SQL:
        ```sql
            with ad_group_stats as (
                select * from {{ ref('stg_google_ads__ad_group_stats') }}
            ),
        
            ad_groups as (
                select * from {{ ref('google_ads_ad_groups') }}
            ),
        
            campaigns as (
                select * from {{ ref('google_ads_campaigns') }}
            ),
        
            final as (
                select
                    ad_group_stats.date,
                    ad_group_stats.ad_group_id,
                    ad_groups.ad_group_name,
                    ad_group_stats.campaign_id,
                    campaigns.campaign_name,
                    ad_group_stats.impressions,
                    ad_group_stats.clicks,
                    ad_group_stats.cost,
                    ad_group_stats.customer_id
                from ad_group_stats
                left join ad_groups on ad_group_stats.ad_group_id = ad_groups.ad_group_id
                left join campaigns on ad_groups.campaign_id = campaigns.campaign_id
                group by all
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_google_ads',
      'key': 'sandbox//google_ads_ad_group_stats',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.google_ads_ad_group_stats',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_ads_ad_group_stats',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ADS_AD_GROUP_STATS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_ads__ad_groups',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Google Ads Ad Group details
        
        #### Raw SQL:
        ```sql
            with source as (
                select * from {{ ref('stg_google_ads__ad_groups') }}
            )
        
            select *
            from source
        ```
      ''',
      'group_name': 'model_google_ads',
      'key': 'sandbox//google_ads_ad_groups',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.google_ads_ad_groups',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_ads_ad_groups',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ADS_AD_GROUPS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_group_stats',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_groups',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_campaigns_wo_ad_group_stats',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Aggregated daily google adgroup stats
        
        #### Raw SQL:
        ```sql
            with stg_google_ads_campaigns as (
        
                select * from {{ ref('google_ads_campaigns') }}
        
            ),
        
            stg_google_ads_ad_group_stats as (
        
                select
                    date,
                    ad_group_id,
                    campaign_id,
                    impressions,
                    clicks,
                    cost
                from {{ ref('google_ads_ad_group_stats') }}
        
                union all
        
                select
                    date,
                    ad_group_id,
                    campaign_id,
                    impressions,
                    clicks,
                    cost
                from {{ ref('google_ads_campaigns_wo_ad_group_stats') }}
        
        
            ),
        
            stg_google_ads_ad_groups as (
        
                select * from {{ ref('google_ads_ad_groups') }}
        
        
            ),
        
            google_ads_adgroup_stats as (
        
                select
                    stg_google_ads_ad_group_stats.campaign_id::varchar as campaign_id,
                    stg_google_ads_campaigns.campaign_name,
                    stg_google_ads_ad_group_stats.ad_group_id,
                    stg_google_ads_ad_groups.ad_group_name,
                    stg_google_ads_ad_group_stats.date,
                    sum(stg_google_ads_ad_group_stats.impressions) as impressions,
                    sum(stg_google_ads_ad_group_stats.clicks) as clicks,
                    sum(stg_google_ads_ad_group_stats.cost) as cost
                from stg_google_ads_ad_group_stats
                left join
                    stg_google_ads_ad_groups
                    on stg_google_ads_ad_group_stats.ad_group_id = stg_google_ads_ad_groups.ad_group_id
                left join
                    stg_google_ads_campaigns
                    on stg_google_ads_ad_group_stats.campaign_id = stg_google_ads_campaigns.campaign_id
                group by all
            )
        
            select
                {{ dbt_utils.generate_surrogate_key(['campaign_id','ad_group_id','date']) }} as unique_key,
                *
            from google_ads_adgroup_stats
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//google_ads_adgroup_stats',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='unique_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.google_ads_adgroup_stats',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_ads_adgroup_stats',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ADS_ADGROUP_STATS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_ads__campaign_stats',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Aggregated daily google campaign stats
        
        #### Raw SQL:
        ```sql
            with stg_google_ads_campaign_stats as (
        
                select * from {{ ref('stg_google_ads__campaign_stats') }}
        
            ),
        
            stg_google_ads_campaigns as (
        
                select * from {{ ref('google_ads_campaigns') }}
        
            ),
        
            google_ads_campaign_stats as (
        
                select
                    stg_google_ads_campaign_stats.campaign_id,
                    stg_google_ads_campaigns.campaign_name,
                    stg_google_ads_campaign_stats.date,
                    sum(stg_google_ads_campaign_stats.impressions) as impressions,
                    sum(stg_google_ads_campaign_stats.clicks) as clicks,
                    sum(stg_google_ads_campaign_stats.cost) as cost
                from stg_google_ads_campaign_stats
                inner join
                    stg_google_ads_campaigns
                    on stg_google_ads_campaign_stats.campaign_id = stg_google_ads_campaigns.campaign_id
                group by 1, 2, 3
        
            )
        
            select
                {{ dbt_utils.generate_surrogate_key(['campaign_id','date']) }} as unique_key,
                *
            from google_ads_campaign_stats
        ```
      ''',
      'group_name': 'model_google_ads',
      'key': 'sandbox//google_ads_campaign_stats',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='unique_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.google_ads_campaign_stats',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_ads_campaign_stats',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ADS_CAMPAIGN_STATS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_ads__campaigns',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Google Ads Ad Group Details
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ ref('stg_google_ads__campaigns') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'model_google_ads',
      'key': 'sandbox//google_ads_campaigns',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.google_ads_campaigns',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_ads_campaigns',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ADS_CAMPAIGNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_group_stats',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_campaign_stats',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Aggregated daily google campaign stats w/out ad groups stats
        
        #### Raw SQL:
        ```sql
            with stg_google_ads_campaign_stats as (
        
                select * from {{ ref('google_ads_campaign_stats') }}
        
            ),
        
            stg_google_ads_ad_group_stats as (
        
                select * from {{ ref('google_ads_ad_group_stats') }}
        
            ),
        
            google_ad_group_campaign_dates as (
        
                select distinct campaign_id
                from stg_google_ads_ad_group_stats
        
            ),
        
            stg_google_ads_campaigns_wo_ad_group_stats as (
        
                select
                    {{ dbt_utils.generate_surrogate_key([
                        'cast(stg_google_ads_campaign_stats.campaign_id as varchar)',
                        'stg_google_ads_campaign_stats.date']) }}
                        as unique_key,
                    stg_google_ads_campaign_stats.date,
                    '' as ad_group_id,
                    cast(stg_google_ads_campaign_stats.campaign_id as varchar) as campaign_id,
                    stg_google_ads_campaign_stats.impressions,
                    stg_google_ads_campaign_stats.clicks,
                    stg_google_ads_campaign_stats.cost
                from stg_google_ads_campaign_stats
                left join google_ad_group_campaign_dates
                    on stg_google_ads_campaign_stats.campaign_id = google_ad_group_campaign_dates.campaign_id
                where google_ad_group_campaign_dates.campaign_id is null
        
            )
        
            select * from stg_google_ads_campaigns_wo_ad_group_stats
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//google_ads_campaigns_wo_ad_group_stats',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='unique_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.google_ads_campaigns_wo_ad_group_stats',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_ads_campaigns_wo_ad_group_stats',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ADS_CAMPAIGNS_WO_AD_GROUP_STATS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_analytics__page_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        report on page activity over time
        
        #### Raw SQL:
        ```sql
            with source as (
                select * from {{ ref('stg_google_analytics__page_report') }}
            ),
        
            final as(
                select 
                    DATE::date as date,
                    UNIFIED_SCREEN_CLASS as screen_class, 
                    EVENT_COUNT as num_event_count, 
                    TOTAL_USERS as num_total_users, 
                    KEY_EVENTS as num_key_events, 
                    USER_ENGAGEMENT_DURATION as num_user_engagement_duration, 
                    NEW_USERS as num_new_users, 
                    SCREEN_PAGE_VIEWS as num_screen_page_views
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_google_analytics',
      'key': 'sandbox//google_analytics_page_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.google_analytics_page_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_analytics_page_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ANALYTICS_PAGE_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_analytics__traffic_default_group',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        session traffic broken down by day and major traffic source buckets.
        
        #### Raw SQL:
        ```sql
            with source as (
                select * from {{ ref('stg_google_analytics__traffic_default_group') }}
            ),
        
            final as (
                select
                    DATE::date as date, 
                    SESSION_DEFAULT_CHANNEL_GROUPING as channel_grouping, 
                    SESSIONS as num_sessions,
                    KEY_EVENTS as num_key_events,
                    TOTAL_USERS as num_total_users,
                    ENGAGED_SESSIONS as num_engaged_sessions,
                    EVENT_COUNT as num_events,
                    EVENTS_PER_SESSION as num_events_per_session,
                    USER_ENGAGEMENT_DURATION as avg_engagement_duration,
                    ENGAGEMENT_RATE as avg_engagement_rate
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_google_analytics',
      'key': 'sandbox//google_analytics_traffic_session_default_group',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.google_analytics_traffic_session_default_group',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_analytics_traffic_session_default_group',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ANALYTICS_TRAFFIC_SESSION_DEFAULT_GROUP',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_analytics__session_source_medium',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        session traffic broken down by day, session, source, and medium
        
        #### Raw SQL:
        ```sql
            with source as (
                select * from {{ ref('stg_google_analytics__session_source_medium') }}
            ),
        
            final as (
                select
                    DATE::date as date,
                    SESSION_SOURCE as session_source,
                    SESSION_MEDIUM as session_medium,
                    SESSIONS as num_sessions,
                    KEY_EVENTS as num_key_events,
                    TOTAL_USERS as num_total_users,
                    ENGAGED_SESSIONS as num_engaged_sessions,
                    EVENT_COUNT as num_event_count,
                    EVENTS_PER_SESSION as avg_events_per_session,
                    USER_ENGAGEMENT_DURATION as avg_engagement_duration,
                    ENGAGEMENT_RATE as avg_engagement_rate
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_google_analytics',
      'key': 'sandbox//google_analytics_traffic_session_source_medium_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.google_analytics_traffic_session_source_medium_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.google_analytics_traffic_session_source_medium_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GOOGLE_ANALYTICS_TRAFFIC_SESSION_SOURCE_MEDIUM_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_web_attributed_conversions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'first_user_web_session',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_groups',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gtm_user_mappings',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contact_form_submissions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaign_members',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contact_lifecycle_changes',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        GTM User Activity Table. This table combines key activities from Salesforce, HubSpot, Daggy U, and Dagster product into 1 table.
        
        #### Raw SQL:
        ```sql
            with hubspot_contacts as (
        
                select * from {{ ref('hubspot_contacts') }}
        
            ),
        
            salesforce_contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
        
            ),
        
            dim_users as (
        
                select * from {{ ref('dim_users') }}
        
            ),
        
            user_organizations as (
        
                select * from {{ ref('user_organizations') }}
        
            ),
        
            first_user_web_session as (
        
                select * from {{ ref('first_user_web_session') }}
        
            ),
        
            google_ads_ad_groups as (
        
                select * from {{ ref('google_ads_ad_groups') }}
        
            ),
        
            education_users as (
        
                select
                    email,
                    min(created_at) as created_at
                from {{ ref('education_users') }}
                group by 1
        
            ),
        
            education_web_attributed_conversions as (
        
                select 
                    education_web_attributed_conversions.* exclude(campaign_name),
                    coalesce(
                        google_ads_ad_groups.campaign_name,
                        google_ads_id.campaign_name,
                        education_web_attributed_conversions.campaign_name
                    ) as campaign_name,
                    coalesce(google_ads_ad_groups.campaign_id, google_ads_id.campaign_id) as campaign_id,
                    coalesce(google_ads_ad_groups.ad_group_id, google_ads_id.ad_group_id) as ad_group_id,
                    coalesce(google_ads_ad_groups.ad_group_name, google_ads_id.ad_group_name) as ad_group_name,
                from {{ ref('education_web_attributed_conversions') }}
                left join google_ads_ad_groups
                    on
                        education_web_attributed_conversions.campaign_name = google_ads_ad_groups.campaign_name
                        and coalesce(education_web_attributed_conversions.campaign_content, '')
                        = coalesce(google_ads_ad_groups.ad_group_id, '')
                left join google_ads_ad_groups as google_ads_id
                    on
                        education_web_attributed_conversions.campaign_name = google_ads_id.campaign_id
                        and coalesce(education_web_attributed_conversions.campaign_content, '')
                        = coalesce(google_ads_id.ad_group_id, '')
                group by all
        
            ),
        
            hubspot_contact_form_submissions as (
        
                select * from {{ ref('hubspot_contact_form_submissions') }}
        
            ),
        
            salesforce_campaign_members as (
        
                select * from {{ ref('salesforce_campaign_members') }}
                where
                    campaign_name not in (
                        'Website Signup', 'Enterprise Contact Us', 'Daggy U Signup', 'Common Room'
                    )
        
            ),
        
            hubspot_lifecycle_changes as (
        
                select * from {{ ref('stg_hubspot__contact_lifecycle_changes') }}
                where lifecycle_stage in ('MQL','Customer','Opportunity')
        
            ),
        
            gtm_user_mappings as (
        
                select * from {{ ref('gtm_user_mappings') }}
            ),
        
            all_gtm_user_activity as (
        
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'HubSpot Contact' as source,
                    case
                        when original_source_drill_level_2_category not in ('Integration','Contact Upload') then original_source_drill_level_2_category
                        when original_source_drill_level_2 = 'Zoom' then 'Webinar'
                        else 'Import'
                    end as event_category,
                    original_source_drill_level_2 as event_subcategory,
                    hubspot_contacts.create_time + interval '2 minutes' as event_time,
                    cast(event_time as date) as event_date,
                    object_construct(
                        'hubspot_contact_attribution', cast(
                            case 
                                when hubspot_contacts.original_source_drill_level_1 in ('IMPORT','INTEGRATION')
                                    then hubspot_contacts.original_source_drill_level_2
                                else hubspot_contacts.original_source_drill_level_1
                            end as variant
                        ),
                        'hubspot_contact_lead_source', cast(hubspot_contacts.marketing_lead_source as variant),
                        'hubspot_contact_original_source', cast(hubspot_contacts.original_source as variant),
                        'hubspot_contact_original_source_drill_level_1', cast(hubspot_contacts.original_source_drill_level_1 as variant),
                        'hubspot_contact_original_source_drill_level_2', cast(hubspot_contacts.original_source_drill_level_2 as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join
                    hubspot_contacts
                    on gtm_user_mappings.hubspot_contact_id = hubspot_contacts.contact_id
                where gtm_user_mappings.is_primary_mapping
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'Product' as source,
                    'User Created' as event_category,
                    '' as event_subcategory,
                    dim_users.created_at as event_time,
                    cast(event_time as date) as event_date,
                    cast(null as variant) as event_attributes
                from gtm_user_mappings
                inner join dim_users on gtm_user_mappings.dagster_user_id = dim_users.user_id
                where gtm_user_mappings.is_primary_mapping
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'Segment' as source,
                    'Trial Started / Organization Created' as event_category,
                    '' as event_subcategory,
                    user_organizations.organization_created_at as event_time,
                    cast(event_time as date) as event_date,
                    object_construct(
                        'organization_id', cast(user_organizations.organization_id as variant),
                        'organization_user_rank', cast(user_organizations.organization_user_rank as variant),
                        'user_organization_rank', cast(user_organizations.user_organization_rank as variant),
                        'first_touch_session_started_at',
                        cast(hubspot_contacts.first_touch_session_started_at as variant),
                        'first_touch_campaign_name',
                        cast(hubspot_contacts.first_touch_campaign_name as variant),
                        'first_touch_ad_group_name',
                        cast(hubspot_contacts.first_touch_adgroup_name as variant),
                        'first_touch_campaign_content',
                        cast(hubspot_contacts.first_touch_campaign_content as variant),
                        'first_touch_referrer_medium',
                        cast(hubspot_contacts.first_touch_referrer_medium as variant),
                        'first_touch_referrer_host',
                        cast(hubspot_contacts.first_touch_referrer_host as variant),
                        'first_touch_path',
                        cast(hubspot_contacts.first_touch_path as variant),
                        'first_touch_campaign_source',
                        cast(hubspot_contacts.first_touch_campaign_source as variant),
                        'first_touch_campaign_medium',
                        cast(hubspot_contacts.first_touch_campaign_medium as variant),
                        'first_touch_utm_term',
                        cast(hubspot_contacts.first_touch_utm_term as variant),
                        'first_touch_reddit_cid',
                        cast(hubspot_contacts.first_touch_reddit_cid as variant),
                        'first_touch_gclid',
                        cast(hubspot_contacts.first_touch_gclid as variant),
                        'first_touch_attribution_category',
                        cast(hubspot_contacts.first_touch_attribution_category as variant),
                        'first_touch_adgroup_id',
                        cast(hubspot_contacts.first_touch_adgroup_id as variant),
                        'first_touch_campaign_id',
                        cast(hubspot_contacts.first_touch_campaign_id as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join dim_users on gtm_user_mappings.dagster_user_id = dim_users.user_id
                inner join user_organizations
                    on
                        dim_users.user_id = user_organizations.user_id
                        and user_organizations.organization_user_rank = 1
                left join
                    hubspot_contacts
                    on gtm_user_mappings.hubspot_contact_id = hubspot_contacts.contact_id
                where gtm_user_mappings.is_primary_mapping
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'Product' as source,
                    'User Added to Organization' as event_category,
                    '' as event_subcategory,
                    user_organizations.relationship_created_at as event_time,
                    cast(user_organizations.relationship_created_at as date) as event_date,
                     object_construct(
                        'organization_id', cast(user_organizations.organization_id as variant),
                        'organization_user_rank', cast(user_organizations.organization_user_rank as variant),
                        'user_organization_rank', cast(user_organizations.user_organization_rank as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join dim_users on gtm_user_mappings.dagster_user_id = dim_users.user_id
                inner join user_organizations
                    on
                        dim_users.user_id = user_organizations.user_id
                        and user_organizations.organization_user_rank > 1
                left join
                    hubspot_contacts
                    on gtm_user_mappings.hubspot_contact_id = hubspot_contacts.contact_id
                where gtm_user_mappings.is_primary_mapping
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'Salesforce Contact' as source,
                    salesforce_contacts.lead_source as event_category,
                    '' as event_subcategory,
                    salesforce_contacts.created_date + interval '2 minutes' as event_time,
                    cast(event_time as date) as event_date,
                    object_construct(
                        'salesforce_contact_lead_source', cast(salesforce_contacts.lead_source as variant),
                        'salesforce_contact_traffic_source',
                        cast(salesforce_contacts.traffic_source as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join
                    salesforce_contacts
                    on gtm_user_mappings.salesforce_contact_id = salesforce_contacts.contact_id
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'Daggy U' as source,
                    'Daggy U' as event_category,
                    '' as event_subcategory,
                    education_users.created_at as event_time,
                    cast(event_time as date) as event_date,
                    object_construct(
                        'session_started_at',
                        cast(education_web_attributed_conversions.session_started_at as variant),
                        'campaign_name',
                        cast(education_web_attributed_conversions.campaign_name as variant),
                        'ad_group_name',
                        cast(education_web_attributed_conversions.ad_group_name as variant),
                        'campaign_content',
                        cast(education_web_attributed_conversions.campaign_content as variant),
                        'referrer_medium',
                        cast(education_web_attributed_conversions.referrer_medium as variant),
                        'referrer_host',
                        cast(education_web_attributed_conversions.referrer_host as variant),
                        'path',
                        cast(education_web_attributed_conversions.path as variant),
                        'campaign_source',
                        cast(education_web_attributed_conversions.campaign_source as variant),
                        'campaign_medium',
                        cast(education_web_attributed_conversions.campaign_medium as variant),
                        'utm_term',
                        cast(education_web_attributed_conversions.utm_term as variant),
                        'reddit_cid',
                        cast(education_web_attributed_conversions.reddit_cid as variant),
                        'gclid',
                        cast(education_web_attributed_conversions.gclid as variant),
                        'attribution_category',
                        cast(education_web_attributed_conversions.attribution_category as variant),
                        'adgroup_id',
                        cast(education_web_attributed_conversions.ad_group_id as variant),
                        'campaign_id',
                        cast(education_web_attributed_conversions.campaign_id as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join education_users on gtm_user_mappings.email = education_users.email
                left join education_web_attributed_conversions on gtm_user_mappings.email = education_web_attributed_conversions.email
                where gtm_user_mappings.is_primary_mapping
        
                union all
        
                select distinct
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'HubSpot Form' as source,
                    'HubSpot Form Submission' as event_category,
                    hubspot_contact_form_submissions.form_category as event_subcategory,
                    hubspot_contact_form_submissions.form_submitted_at as event_time,
                    cast(event_time as date) as event_date,
                    object_construct(
                        'hubspot_form_name',cast(hubspot_contact_form_submissions.form_name as variant),
                        'hubspot_form_category', cast(hubspot_contact_form_submissions.form_category as variant),
                        'form_fill_referrer_host', cast(hubspot_contact_form_submissions.form_fill_referrer_host as variant),
                        'form_fill_session_started_at', cast(hubspot_contact_form_submissions.form_fill_session_started_at as variant),
                        'form_fill_referrer_medium', cast(hubspot_contact_form_submissions.form_fill_referrer_medium as variant),
                        'form_fill_path', cast(hubspot_contact_form_submissions.form_fill_path as variant),
                        'form_fill_campaign_source', cast(hubspot_contact_form_submissions.form_fill_campaign_source as variant),
                        'form_fill_campaign_medium', cast(hubspot_contact_form_submissions.form_fill_campaign_medium as variant),
                        'form_fill_campaign_name', cast(hubspot_contact_form_submissions.form_fill_campaign_name as variant),
                        'form_fill_campaign_content', cast(hubspot_contact_form_submissions.form_fill_campaign_content as variant),
                        'form_fill_utm_term', cast(hubspot_contact_form_submissions.form_fill_utm_term as variant),
                        'form_fill_reddit_cid', cast(hubspot_contact_form_submissions.form_fill_reddit_cid as variant),
                        'form_fill_gclid', cast(hubspot_contact_form_submissions.form_fill_gclid as variant),
                        'form_fill_attribution_category', cast(hubspot_contact_form_submissions.form_fill_attribution_category as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join
                    hubspot_contact_form_submissions
                    on gtm_user_mappings.hubspot_contact_id = hubspot_contact_form_submissions.contact_id
                where gtm_user_mappings.is_primary_mapping
                    and event_subcategory != 'Trial Sign-Up'
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'Salesforce Campaign Member' as source,
                    salesforce_campaign_members.campaign_type as event_category,
                    salesforce_campaign_members.campaign_name as event_subcategory,
                    salesforce_campaign_members.created_date as event_time,
                    cast(event_time as date) as event_date,
                    object_construct(
                        'campaign_name', cast(salesforce_campaign_members.campaign_name as variant),
                        'campaign_type', cast(salesforce_campaign_members.campaign_type as variant),
                        'has_responded', cast(salesforce_campaign_members.has_responded as variant),
                        'member_status', cast(salesforce_campaign_members.member_status as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join
                    salesforce_campaign_members
                    on gtm_user_mappings.salesforce_contact_id = salesforce_campaign_members.contact_id
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'HubSpot Lifecycle' as source,
                    'Lifecycle Change'  as event_category,
                    lifecycle_stage as event_subcategory,
                    hubspot_lifecycle_changes.lifecycle_stage_datetime as event_time,
                    cast(event_time as date) as event_date,
                    cast(null as variant) as event_attributes
                from gtm_user_mappings
                inner join
                    hubspot_lifecycle_changes
                    on gtm_user_mappings.hubspot_contact_id = hubspot_lifecycle_changes.contact_id
        
            ), gtm_user_activity as (
        
                select * from all_gtm_user_activity
                qualify row_number() over
                    (partition by gtm_user_unique_key, event_category, event_subcategory, event_date order by event_time asc) = 1
                    and (
                        row_number() over (partition by gtm_user_unique_key order by event_time asc) = 1 
                        or source not in ('HubSpot Contact','Salesforce Contact')
                    )
        
                union all
        
                select
                    gtm_user_mappings.gtm_user_unique_key,
                    gtm_user_mappings.email,
                    gtm_user_mappings.hubspot_contact_id,
                    gtm_user_mappings.salesforce_contact_id,
                    gtm_user_mappings.dagster_user_id,
                    'Segment' as source,
                    'First Web Session' as event_category,
                    '' as event_subcategory,
                    first_user_web_session.session_started_at as event_time,
                    cast(event_time as date) as event_date,
                    object_construct(
                        'first_web_session_referrer_host', cast(first_user_web_session.referrer_host as variant),
                        'first_web_session_referrer_medium', cast(first_user_web_session.referrer_medium as variant),
                        'first_web_session_path', cast(first_user_web_session.path as variant),
                        'first_web_session_campaign_source', cast(first_user_web_session.campaign_source as variant),
                        'first_web_session_campaign_medium', cast(first_user_web_session.campaign_medium as variant),
                        'first_web_session_campaign_name', cast(first_user_web_session.campaign_name as variant),
                        'first_web_session_campaign_content', cast(first_user_web_session.campaign_content as variant),
                        'first_web_session_utm_term', cast(first_user_web_session.utm_term as variant),
                        'first_web_session_reddit_cid', cast(first_user_web_session.reddit_cid as variant),
                        'first_web_session_gclid', cast(first_user_web_session.gclid as variant),
                        'first_web_session_attribution_category', cast(first_user_web_session.attribution_category as variant)
                    ) as event_attributes
                from gtm_user_mappings
                inner join
                    first_user_web_session
                    on cast(gtm_user_mappings.dagster_user_id as varchar) = first_user_web_session.user_id
                where gtm_user_mappings.is_primary_mapping
        
            )
        
            select
                {{ dbt_utils.generate_surrogate_key([
                    'gtm_user_unique_key',
                    'event_category',
                    'event_subcategory',
                    'event_time'
                ]) }} as unique_key,
                row_number() over (partition by gtm_user_unique_key order by event_time asc) as order_of_activities,
                *
            from gtm_user_activity
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//gtm_user_activity',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='unique_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.gtm_user_activity',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gtm_user_activity',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GTM_USER_ACTIVITY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gtm_user_activity',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gtm_user_mappings',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Signup attribution information for Dagster+ users.
        
        #### Raw SQL:
        ```sql
            with gtm_user_mapping as (
            
               select * from {{ ref('gtm_user_mappings') }}
        
            ), gtm_user_activity as (
            
               select * from {{ ref('gtm_user_activity') }}
        
            ), hubspot_contacts as (
        
                select * from {{ ref('hubspot_contacts') }}
        
            ), user_signup as (
        
                select distinct
                    gtm_user_unique_key,
                    email,
                    hubspot_contact_id,
                    salesforce_contact_id,
                    dagster_user_id,
                    event_time as user_signup_at,
                    cast(event_time as date) as user_signup_date
                from gtm_user_activity
                where event_category = 'User Created'
        
            ), user_signup_attribution as (
        
                select
                    user_signup.dagster_user_id,
                    user_signup.user_signup_at,
                    user_signup.user_signup_date,
                    gtm_user_activity.unique_key as user_signup_attribution_unique_key,
                    gtm_user_activity.event_category as user_signup_event_category,
                    gtm_user_activity.event_subcategory as user_signup_event_subcategory,
                    gtm_user_activity.event_time as user_signup_attribution_at,
                    gtm_user_activity.event_date as user_signup_attribution_date,
                    gtm_user_activity.event_attributes as user_signup_attribution_event_attributes,
                    coalesce(event_category || coalesce(': ' || coalesce(
                        gtm_user_activity.event_attributes:first_touch_attribution_category,
                        gtm_user_activity.event_attributes:hubspot_contact_lead_source,
                        gtm_user_activity.event_attributes:hubspot_contact_lead_source,
                        gtm_user_activity.event_attributes:salesforce_contact_lead_source,
                        gtm_user_activity.event_attributes:hubspot_form_name,
                        gtm_user_activity.event_attributes:campaign_name
                    ), ''), 'User Invited')::varchar as user_signup_attribution
                from user_signup
                left join gtm_user_activity on user_signup.dagster_user_id = gtm_user_activity.dagster_user_id
                    and user_signup.user_signup_at > gtm_user_activity.event_time
                        and datediff(
                            'days',
                            gtm_user_activity.event_time,
                            user_signup.user_signup_at
                        )
                        <= {{ var('attribution_lookback_days') }}
                qualify row_number() over (partition by user_signup.dagster_user_id order by gtm_user_activity.event_time asc nulls last) = 1
        
            ), gtm_user_attribution as (
        
                select
                    gtm_user_mapping.gtm_user_unique_key,
                    gtm_user_mapping.email,
                    gtm_user_mapping.hubspot_contact_id,
                    gtm_user_mapping.salesforce_contact_id,
                    gtm_user_mapping.dagster_user_id,
                    user_signup_attribution.user_signup_at,
                    user_signup_attribution.user_signup_date,
                    user_signup_attribution.user_signup_attribution_unique_key,
                    user_signup_attribution.user_signup_event_category,
                    user_signup_attribution.user_signup_event_subcategory,
                    user_signup_attribution.user_signup_attribution_at,
                    user_signup_attribution.user_signup_attribution_date,
                    user_signup_attribution.user_signup_attribution_event_attributes,
                    user_signup_attribution.user_signup_attribution
                from gtm_user_mapping
                left join user_signup_attribution
                    on gtm_user_mapping.dagster_user_id = user_signup_attribution.dagster_user_id
        
            )
        
            select * from gtm_user_attribution
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//gtm_user_attribution',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.gtm_user_attribution',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gtm_user_attribution',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GTM_USER_ATTRIBUTION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gtm_user_activity',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Lead source for all Go-to-Market users
        
        #### Raw SQL:
        ```sql
            with first_contact_activity as (
        
                select *
                from {{ ref('gtm_user_activity') }}
                where event_category not in ('User Created','First Web Session','Lifecycle Change to Opportunity')
                qualify row_number() over (partition by gtm_user_unique_key order by order_of_activities asc) = 1
            
            ), gtm_user_lead_source as (
            
                select
                    first_contact_activity.gtm_user_unique_key,
                    first_contact_activity.email,
                    first_contact_activity.hubspot_contact_id,
                    first_contact_activity.salesforce_contact_id,
                    first_contact_activity.dagster_user_id,
                    first_contact_activity.event_time as lead_action_time,
                    source,
                    event_category,
                    event_subcategory,
                    case
                        when first_contact_activity.event_subcategory = 'Trial Sign-Up'
                            or event_attributes:hubspot_contact_original_source_drill_level_2 = 'Trial Start'
                            then 'Trial Started / Organization Created'
                        when first_contact_activity.event_category = 'HubSpot Form Submission'
                            then first_contact_activity.event_subcategory
                        else first_contact_activity.event_category
                    end as lead_source_action,
                    coalesce(
                        iff(first_contact_activity.event_category = 'User Added to Organization', event_category, null),
                        iff(first_contact_activity.event_category = 'Lifecycle Change', event_subcategory, null),
                        nullif(
                            iff(
                                event_subcategory = 'Marketing Event',
                                event_attributes:hubspot_form_name,
                                event_attributes:form_fill_attribution_category
                            ), ''
                        ),
                        nullif(event_attributes:campaign_name, ''),
                        nullif(event_attributes:first_touch_attribution_category, ''),
                        nullif(event_attributes:hubspot_contact_attribution, ''),
                        nullif(nullif(event_attributes:salesforce_contact_lead_source, ''),'Other'),
                        nullif(event_attributes:attribution_category, '')::varchar
                    ) as lead_source
                from first_contact_activity
        
            )
        
            select * from gtm_user_lead_source
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//gtm_user_lead_source',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.gtm_user_lead_source',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gtm_user_lead_source',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GTM_USER_LEAD_SOURCE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_enrollments',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        GTM User Mappings Table. This table combines unique identifiers from Salesforce, HubSpot, Daggy U, and Dagster product into 1 table.
        
        #### Raw SQL:
        ```sql
            with hubspot_contacts as (
        
                select * from {{ ref('hubspot_contacts') }}
        
            ),
        
            salesforce_contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
        
            ),
        
            dim_users as (
        
                select * from {{ ref('dim_users') }}
        
            ),
        
            education_enrollments as (
        
                select
                    user_email as email,
                    min(created_at) as education_enrolled_at
                from {{ ref('education_enrollments') }}
                group by all
        
            ),
        
            gtm_user_mappings as (
        
                select distinct
                    coalesce(
                        hubspot_contacts.email,
                        salesforce_contact_id_join.email,
                        salesforce_contact_email_join.email,
                        dim_users.email,
                        education_enrollments.email
                    ) as email,
                    hubspot_contacts.contact_id as hubspot_contact_id,
                    coalesce(salesforce_contact_id_join.contact_id, salesforce_contact_email_join.contact_id)
                        as primary_salesforce_contact_id,
                    coalesce(salesforce_contact_id_join.account_id, salesforce_contact_email_join.account_id)
                        as primary_salesforce_account_id,
                    coalesce(salesforce_contact_email_join.contact_id, salesforce_contact_id_join.contact_id)
                        as salesforce_contact_id,
                    coalesce(salesforce_contact_email_join.account_id, salesforce_contact_id_join.account_id)
                        as salesforce_account_id,
                    dim_users.user_id as dagster_user_id
                from hubspot_contacts
                full outer join
                    salesforce_contacts as salesforce_contact_email_join
                    on hubspot_contacts.email = salesforce_contact_email_join.email
                left join
                    salesforce_contacts as salesforce_contact_id_join
                    on hubspot_contacts.salesforce_contact_id = salesforce_contact_id_join.contact_id
                full outer join
                    dim_users
                    on
                        coalesce(
                            hubspot_contacts.email,
                            salesforce_contact_id_join.email,
                            salesforce_contact_email_join.email
                        )
                        = dim_users.email
                full outer join
                    education_enrollments
                    on
                        coalesce(
                            hubspot_contacts.email,
                            salesforce_contact_id_join.email,
                            salesforce_contact_email_join.email,
                            dim_users.email
                        )
                        = education_enrollments.email
        
            )
        
            select
                {{ dbt_utils.generate_surrogate_key([
                    'email',
                    'hubspot_contact_id',
                    'salesforce_contact_id',
                    'dagster_user_id'
                ]) }} as gtm_user_unique_key,
                row_number()
                    over (
                        partition by email
                        order by
                            primary_salesforce_contact_id = salesforce_contact_id desc,
                            salesforce_contact_id desc
                    )
                = 1 as is_primary_mapping,
                *
            from gtm_user_mappings
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//gtm_user_mappings',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='gtm_user_unique_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.gtm_user_mappings',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.gtm_user_mappings',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/GTM_USER_MAPPINGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__company',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All hubspot companies
        
        #### Raw SQL:
        ```sql
            with source as (
                select 
                    * exclude(website, is_target_account, intent_score),
                    coalesce(is_target_account, false) as is_target_account,
                    coalesce(intent_score, 0) as intent_score,
                    {{ is_intent_score_greater_than_zero('intent_score') }} as is_intent_score_greater_than_zero,
                    {{ is_engaged('intent_score') }} as is_engaged,
                    coalesce(replace(parse_url(website, 1):host, 'www.'), website, '') as website,
                    array_remove(
                        array_distinct(
                            array_compact(
                                array_append(
                                    array_cat(
                                        to_array(coalesce(replace(parse_url(stg_hubspot__company.website, 1):host, 'www.'), stg_hubspot__company.website, '')),
                                        coalesce(split(additional_domains, ';'), to_array(''))
                                    ),
                                    coalesce(domain, '')
                                )
                            )
                        )
                    , ''::variant) as domain_array
                from {{ ref('stg_hubspot__company') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'model_hubspot',
      'key': 'sandbox//hubspot_companies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.hubspot_companies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.hubspot_companies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/HUBSPOT_COMPANIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'form_fill_attribution',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contact_form_submissions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__forms',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All hubspot contact form submissions
        
        #### Raw SQL:
        ```sql
            with hubspot_contact_form_submissions as (
        
                select * from {{ ref('stg_hubspot__contact_form_submissions') }}
        
            ),
        
            hubspot_forms as (
        
                select * from {{ ref('stg_hubspot__forms') }}
        
            ),
        
            form_fill_attribution as (
        
                select * from {{ ref('form_fill_attribution') }}
        
            ),
        
            final as (
        
                select
                    hubspot_contact_form_submissions.contact_id,
                    hubspot_contact_form_submissions.anonymous_id,
                    hubspot_contact_form_submissions.event_id,
                    hubspot_contact_form_submissions.email,
                    hubspot_forms.form_id,
                    case
                        when lower(hubspot_forms.form_name) like '%newsletter%'
                        then 'Newsletter Signup'
                        else hubspot_forms.form_name
                    end as form_name,
                    hubspot_contact_form_submissions.timestamp as form_submitted_at,
                    case
                        when lower(hubspot_forms.form_name) like '%contact us%' then 'Contact Us'
                        when
                            lower(hubspot_forms.form_name) like '%newsletter%'
                            or lower(hubspot_forms.form_name) like 'newsletter%' then 'Newsletter Sign Up'
                        when lower(hubspot_forms.form_name) like '%webinar%' then 'Webinar'
                        when
                            lower(hubspot_forms.form_name) like '%party%'
                            or lower(hubspot_forms.form_name) like '%event%'
                            or lower(hubspot_forms.form_name) like '%conference%'
                            or lower(hubspot_forms.form_name) like '%registration%'
                            or lower(hubspot_forms.form_name) like '%happy hour%'
                            or lower(hubspot_forms.form_name) like '%data platform week%'
                            or lower(hubspot_forms.form_name) like '%raffle%' then 'Marketing Event'
                        when lower(hubspot_forms.form_name) like '%deep-dive%' then 'Deep Dive'
                        when lower(hubspot_forms.form_name) like '%partner%' then 'Partner'
                        when lower(hubspot_forms.form_name) like '%dagster oss security modal%' then 'OSS Security Modal'
                        when lower(hubspot_forms.form_name) like '%forrester%' then 'Website Document Download'
                        when lower(hubspot_forms.form_name) like '%user profile at plus%' then 'Trial Sign-Up'
                        else hubspot_forms.form_name
                    end as form_category,
                    form_fill_attribution.referrer_host as form_fill_referrer_host,
                    form_fill_attribution.session_started_at as form_fill_session_started_at,
                    form_fill_attribution.referrer_medium as form_fill_referrer_medium,
                    form_fill_attribution.path as form_fill_path,
                    form_fill_attribution.campaign_source as form_fill_campaign_source,
                    form_fill_attribution.campaign_medium as form_fill_campaign_medium,
                    form_fill_attribution.campaign_name as form_fill_campaign_name,
                    form_fill_attribution.campaign_content as form_fill_campaign_content,
                    form_fill_attribution.utm_term as form_fill_utm_term,
                    form_fill_attribution.reddit_cid as form_fill_reddit_cid,
                    form_fill_attribution.gclid as form_fill_gclid,
                    form_fill_attribution.attribution_category as form_fill_attribution_category,
                    hubspot_contact_form_submissions.request_type,
                    hubspot_contact_form_submissions.company, 
                    hubspot_contact_form_submissions.num_employees,
                    hubspot_contact_form_submissions.website,
                    hubspot_contact_form_submissions.message,
                    hubspot_contact_form_submissions.how_did_you_hear_about_us,
                    hubspot_contact_form_submissions.who_are_marque_customers_your_company_works_with,
                    hubspot_contact_form_submissions.how_many_consultants_engineers_are_working_with_dagster,
                    hubspot_contact_form_submissions.which_customers_have_you_implemented_on_dagster,
                    hubspot_contact_form_submissions.what_geographies_do_you_serve
                from hubspot_contact_form_submissions
                left join form_fill_attribution on hubspot_contact_form_submissions.event_id = form_fill_attribution.event_id
                left join hubspot_forms on hubspot_contact_form_submissions.form_id = hubspot_forms.form_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_hubspot',
      'key': 'sandbox//hubspot_contact_form_submissions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.hubspot_contact_form_submissions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.hubspot_contact_form_submissions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/HUBSPOT_CONTACT_FORM_SUBMISSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contact_first_touch',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All hubspot contacts
        
        #### Raw SQL:
        ```sql
            with hubspot_contacts as (
        
                select * from {{ ref('stg_hubspot__contacts') }}
        
            ),
        
            hubspot_companies as (
        
                select * from {{ ref('hubspot_companies') }}
        
            ),
        
            salesforce_contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
        
            ),
        
            salesforce_accounts as (
        
                select * from {{ ref('salesforce_accounts') }}
        
            ),
        
            hubspot_contact_first_touch as (
        
                select * from {{ ref('stg_hubspot__contact_first_touch') }}
        
            ),
        
            --- Fivetran does not remove merged contacts, but it is tracked. This CTE creates a mapping of merged contacts and the contact they are merged into
        
            identify_merged_contacts as(
        
                select
                    trim(value::string) as merged_id,
                    contact_id as merged_into_id
                from hubspot_contacts,
                    lateral flatten(input => split(merged_object_ids, ';'))
            ),
        
            final as (
        
                select
                    hubspot_contacts.contact_id,
                    hubspot_companies.name as company_name,
                    hubspot_companies.id as company_id,
                    hubspot_companies.hubspot_owner_id as company_owner_id,
                    salesforce_contacts.contact_id as salesforce_contact_id,
                    salesforce_accounts.account_id as salesforce_account_id,
                    salesforce_accounts.stripe_customer_id,
                    salesforce_accounts.account_name as salesforce_account_name,
                    row_number()
                        over (partition by salesforce_account_id order by hubspot_contacts.create_date asc)
                        as contact_rank,
                    hubspot_contacts.create_date,
                    hubspot_contacts.create_time,
                    hubspot_contacts.last_modified_time,
                    hubspot_contacts.lead_source,
                    hubspot_contacts.trial_source,
                    hubspot_contacts.marketing_lead_source,
                    hubspot_contacts.latest_source,
                    hubspot_contacts.lead_source_action,
                    hubspot_contacts.latest_source_drill_level_1,
                    hubspot_contacts.latest_source_drill_level_2,
                    hubspot_contacts.latest_source_date,
                    hubspot_contacts.original_source,
                    hubspot_contacts.original_source_drill_level_1,
                    hubspot_contacts.original_source_drill_level_2,
                    hubspot_contacts.original_source_drill_level_2_category,
                    hubspot_contacts.import_source,
                    hubspot_contacts.lifecycle_stage,
                    hubspot_contacts.lifecycle_stage_date,
                    hubspot_contacts.hubspot_score,
                    hubspot_contacts.mql_date,
                    hubspot_contacts.email,
                    hubspot_contacts.email_domain,
                    hubspot_contacts.additional_emails,
                    hubspot_contacts.first_name,
                    hubspot_contacts.last_name,
                    hubspot_contact_first_touch.first_touch_session_started_at,
                    hubspot_contact_first_touch.first_touch_campaign_name,
                    hubspot_contact_first_touch.first_touch_adgroup_name,
                    hubspot_contact_first_touch.first_touch_campaign_content,
                    hubspot_contact_first_touch.first_touch_referrer_host,
                    hubspot_contact_first_touch.first_touch_referrer_medium,
                    hubspot_contact_first_touch.first_touch_path,
                    hubspot_contact_first_touch.first_touch_campaign_source,
                    hubspot_contact_first_touch.first_touch_campaign_medium,
                    hubspot_contact_first_touch.first_touch_utm_term,
                    hubspot_contact_first_touch.first_touch_reddit_cid,
                    hubspot_contact_first_touch.first_touch_gclid,
                    hubspot_contact_first_touch.first_touch_attribution_category,
                    hubspot_contact_first_touch.first_touch_adgroup_id,
                    hubspot_contact_first_touch.first_touch_campaign_id
                from hubspot_contacts
                left join hubspot_companies on hubspot_contacts.associatedcompanyid = hubspot_companies.id
                left join salesforce_contacts on hubspot_contacts.salesforce_contact_id = salesforce_contacts.contact_id
                left join salesforce_accounts on salesforce_contacts.account_id = salesforce_accounts.account_id
                left join hubspot_contact_first_touch on hubspot_contacts.contact_id = hubspot_contact_first_touch.contact_id
                left join identify_merged_contacts on hubspot_contacts.contact_id = identify_merged_contacts.merged_id
                --- remove all contacts that have been merged
                where merged_id is null
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_hubspot',
      'key': 'sandbox//hubspot_contacts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.hubspot_contacts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.hubspot_contacts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/HUBSPOT_CONTACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__organization',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All hubspot organizations
        
        #### Raw SQL:
        ```sql
            with source as (
                select * from {{ ref('stg_hubspot__organization') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'model_hubspot',
      'key': 'sandbox//hubspot_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.hubspot_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.hubspot_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/HUBSPOT_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        dbt seed hubspot_source_drill_level_2_labels
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//hubspot_source_drill_level_2_labels',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/table_name': 'sandbox.hubspot_source_drill_level_2_labels',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.hubspot_source_drill_level_2_labels',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_insights__asset_materialization_metrics',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Long table of metrics for insights asset materializations
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_insights__asset_materialization_metrics') }}
        ```
      ''',
      'group_name': 'model_insights',
      'key': 'sandbox//insights_asset_materialization_metrics',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.insights_asset_materialization_metrics',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.insights_asset_materialization_metrics',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/INSIGHTS_ASSET_MATERIALIZATION_METRICS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Mapping between an instance type and its priority compared to another
        
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//instance_type_priority',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='instance_priority',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='instance_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.instance_type_priority',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.instance_type_priority',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'referrer_mapping',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_web__pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Page views with session information attached
        
        #### Raw SQL:
        ```sql
            with pages as (
                select * from {{ ref('stg_segment_web__pages') }}
            ),
        
            referrer as (
                select * from {{ ref('referrer_mapping') }}
            ),
        
            sessions as (
                select
        
                    *,
        
                    row_number() over (partition by anonymous_id order by timestamp) as page_view_number,
                    lag(timestamp) over (partition by anonymous_id order by timestamp) as previous_tstamp,
                    datediff('second', previous_tstamp, timestamp) as period_of_inactivity,
                    iff(period_of_inactivity <= {{ var('session_threshold_seconds') }}, 0, 1) as new_session
        
                from pages
            ),
        
            categorized as (
        
                select
                    sessions.*,
                    referrer.medium as referrer_medium,
        
                    case
                    -- Ads
                        when gclid is not null then 'cpc'
                        when reddit_cid is not null then 'cpc'
                        when campaign_medium = 'cpc' then 'cpc'
        
                        -- UTM Params
                        when campaign_medium is not null then campaign_medium
        
                        -- Search Breakdown
                        when referrer.medium = 'search' and path = '/' then 'search-brand'
                        when referrer.medium = 'search' and path = '/cloud' then 'search-brand'
                        when referrer.medium = 'search' and path like '/blog%' then 'search-blog'
                        when referrer.medium = 'search' and path like '/vs-%' then 'search-vs'
                        when
                            referrer.medium = 'search' and path like '/integrations%'
                            then 'search-integrations'
                        when referrer.medium = 'search' then 'search-other'
        
                        -- Referrers
                        when referrer.medium is not null then referrer.medium
        
                        -- Path Attribution
                        when referrer.host = 'docs.dagster.io' then 'docs'
                        when path like '/blog%' and referrer_host is null then 'blog'
                        when path = '/glossary' and referrer_host is null then 'glossary'
                        when path like '/events%' and referrer_medium is null then 'events'
        
                        -- Other, uncategorized
                        when
                            coalesce(
                                campaign_source,
                                campaign_medium,
                                campaign_name,
                                utm_term
                            ) is not null
                            then 'other-campaign'
                        when referrer_host in ('dagster.io', 'dagster.cloud') then 'dagster-referrer'
                        when referrer_host is not null then 'other-referrer'
                        else 'uncategorized'
                    end as attribution_category
        
                from sessions
                inner join referrer on sessions.referrer_host = referrer.host
        
            )
        
        
            select
                *,
                sum(new_session)
                    over (
                        partition by anonymous_id
                        order by page_view_number rows between unbounded preceding and current row
                    )
                    as session_number,
                md5(anonymous_id || session_number) as session_id
        
            from categorized
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//int_sessionized_pageviews',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.int_sessionized_pageviews',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.int_sessionized_pageviews',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/INT_SESSIONIZED_PAGEVIEWS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'int_sessionized_pageviews',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Sessionized pageviews table
        
        #### Raw SQL:
        ```sql
            {% set partition_by = "partition by session_id order by page_view_number
            rows between unbounded preceding and unbounded following" %}
        
            {% set attributes = ["referrer_host", "referrer_medium", "path", "campaign_source",
                "campaign_medium", "campaign_name", "campaign_content", "utm_term", "reddit_cid", "gclid"] %}
        
            with session as (
                select * from {{ ref('int_sessionized_pageviews') }}
            ),
        
        
            agg as (
        
                select distinct
        
                    session_id,
                    anonymous_id,
                    min(timestamp) over (partition by session_id) as session_started_at,
                    max(timestamp) over (partition by session_id) as session_ended_at,
                    count(*) over (partition by session_id) as page_views,
        
                    {% for key in attributes %}
                        first_value({{ key }}) over ({{ partition_by -}}) as first_{{ key }},
                    {%- endfor %}
        
                {% for key in attributes %}
                    last_value({{ key }}) over ({{ partition_by -}})
                        as last_{{ key }}{% if not loop.last %},
                    {% endif %}
                {%- endfor %}
        
                from session
        
            )
        
            select * from agg
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//int_sessions_aggregated',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='session_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.int_sessions_aggregated',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.int_sessions_aggregated',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/INT_SESSIONS_AGGREGATED',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__customers',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__invoice_line_items',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__invoices',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Intermediate table that gets invoice item plans from a stripe invoice
        
        #### Raw SQL:
        ```sql
            with customers as (
                select * from {{ ref('stg_stripe__customers') }}
            ),
        
            organizations as (
                select * from {{ ref('dim_organizations') }}
            ),
        
            invoices as (
                select * from {{ ref('stg_stripe__invoices') }}
            ),
        
            line_items as (
                select * from {{ ref('stg_stripe__invoice_line_items') }}
            ),
        
            subscriptions as (
                select * from {{ ref('stg_stripe__subscriptions') }}
            ),
        
            final as (
        
                select
        
                    customers.customer_id,
                    subscriptions.subscription_id,
                    subscriptions.ended_at as subscription_ended_at,
                    invoices.invoice_id,
                    invoices.is_paid,
                    -- invoices.is_closed,
                    invoices.amount_due_dollars,
                    invoices.amount_paid_dollars,
                    invoices.invoice_total_dollars,
                    invoices.period_start,
                    invoices.period_end,
                    invoices.status
                    -- line_items.plan:usage_type::string as usage_type,
                    -- line_items.plan:metadata:plan::string as plan_type
        
                from
                    customers
                inner join organizations on customers.customer_id = organizations.stripe_customer_id
                left join invoices using (customer_id)
                left join line_items using (invoice_id)
                left join subscriptions on line_items.subscription_id = subscriptions.subscription_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//int_stripe_customer_invoices',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.int_stripe_customer_invoices',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.int_stripe_customer_invoices',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/INT_STRIPE_CUSTOMER_INVOICES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_cloud__tracks',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_web__pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        User data attached to segment anonymous ids
        
        #### Raw SQL:
        ```sql
            with all_events as (
                select distinct
                    anonymous_id,
                    user_id,
                    timestamp
        
                from {{ ref('stg_segment_web__pages') }}
        
                union distinct
        
                select distinct
                    anonymous_id,
                    user_id,
                    timestamp
        
                from {{ ref('stg_segment_cloud__tracks') }}
            ),
        
            mapping as (
        
                select distinct
        
                    anonymous_id,
                    last_value(user_id ignore nulls) over (
                        partition by anonymous_id order by timestamp
                        rows between unbounded preceding and unbounded following
                    ) as user_id,
        
                    min(timestamp) over (partition by anonymous_id) as first_seen_at,
                    max(timestamp) over (partition by anonymous_id) as last_seen_at
        
                from all_events
                where anonymous_id is not null
        
            )
        
            select * from mapping
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//int_users_stitched',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.int_users_stitched',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.int_users_stitched',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/INT_USERS_STITCHED',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_linkedin__ad_analytics_by_campaign',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_linkedin__campaign_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per linkedin campaign per day active
        
        #### Raw SQL:
        ```sql
            with ad_analytics as (
        
                select * from {{ ref('stg_linkedin__ad_analytics_by_campaign') }}
            ),
        
            campaigns as (
        
                select * from {{ ref('stg_linkedin__campaign_history') }}
            
            ),
        
            latest_campaign as (
        
                select * from campaigns
                qualify row_number() over (partition by campaign_id order by last_modified_time desc) = 1
        
            ),
        
            final as (
        
                select 
                    campaign.campaign_name,
                    ad_analytics.campaign_id,
                    ad_analytics.date,
                    ad_analytics.estimated_reach,
                    ad_analytics.cost_usd,
                    ad_analytics.impressions,
                    ad_analytics.clicks,
                    ad_analytics.likes,
                    ad_analytics.other_engagements,
                    ad_analytics.total_engagements,
                from ad_analytics
                left join latest_campaign as campaign on ad_analytics.campaign_id = campaign.campaign_id
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_linkedin_ads',
      'key': 'sandbox//linkedin_ads_daily_campaign',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.linkedin_ads_daily_campaign',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.linkedin_ads_daily_campaign',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/LINKEDIN_ADS_DAILY_CAMPAIGN',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__alerts_alert_policies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        A map of alert IDs to corresponding alert policy IDs
        
        #### Raw SQL:
        ```sql
            select
                alert_policy_uuid,
                alert_id,
                created_at,
                updated_at
            from {{ ref('stg_cloud_product__alerts_alert_policies') }}
        ```
      ''',
      'group_name': 'maps',
      'key': 'sandbox//maps_alerts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.maps_alerts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.maps_alerts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/MAPS_ALERTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_customer_info',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        A map of organization IDs to corresponding IDs in other contexts
        
        #### Raw SQL:
        ```sql
            with sf_account_population as (
        
                select * from {{ ref('salesforce_accounts') }}
            ),
        
            stripe_account_population as (
        
                select * from {{ ref('cloud_product_customer_info') }}
            ),
        
            orgs as (
        
                select * from {{ ref('cloud_product_organizations') }}
            ),
        
            hubspot_population as (
        
                select * from {{ ref('hubspot_companies') }}
            ),
        
            sf_accounts as (
            
                select
                    account_id,
                    organization_id,
                    created_at
                from sf_account_population
            ),
        
            stripe_customer as (
            
                select
                    organization_id,
                    stripe_customer_id
                from stripe_account_population
            ),
        
            hubspot_companies as (
            
                select
                    organization_id,
                    company_unique_id
                from hubspot_population
            ),
        
            final as (
        
                select
                    orgs.organization_id,
                    orgs.organization_name,
                    sf_accounts.account_id as salesforce_account_id,
                    stripe_customer.stripe_customer_id,
                    hubspot_companies.company_unique_id as hubspot_company_id
                from orgs
                left join stripe_customer using (organization_id)
                left join sf_accounts using (organization_id)
                left join hubspot_companies using (organization_id)
                qualify row_number() over (partition by orgs.organization_id order by sf_accounts.created_at) = 1
            )
        
            select * from final
        ```
      ''',
      'group_name': 'maps',
      'key': 'sandbox//maps_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.maps_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.maps_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/MAPS_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'marketing_events',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaign_members',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Contact information for attendees of marketing events
        
        #### Raw SQL:
        ```sql
            select
                salesforce_campaign_members.campaign_member_id,
                salesforce_campaign_members.contact_id,
                salesforce_campaign_members.campaign_id,
                salesforce_campaign_members.campaign_name,
                salesforce_campaign_members.first_name,
                salesforce_campaign_members.last_name,
                salesforce_campaign_members.email,
                salesforce_campaign_members.company_or_account,
                salesforce_campaign_members.title,
                salesforce_campaign_members.first_responded_date as attendance_date
            from {{ ref('salesforce_campaign_members') }}
            inner join {{ ref('marketing_events') }} using (campaign_id)
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//marketing_event_attendees',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='campaign_member_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.marketing_event_attendees',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.marketing_event_attendees',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/MARKETING_EVENT_ATTENDEES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Marketing events info pulled in from Salesforce, can include conferences, webinars, demos, etc.
        
        #### Raw SQL:
        ```sql
            select
                campaign_id,
                campaign_name,
                campaign_status,
                start_date,
                end_date,
                is_active,
                number_of_contacts,
                number_of_responses
                    as number_of_opportunities,
                amount_all_opportunities
            from {{ ref('salesforce_campaigns') }}
            where campaign_source = 'Marketing Event'
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//marketing_events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='campaign_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.marketing_events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.marketing_events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/MARKETING_EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_adgroup_stats',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_hubspot_form_submits',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_pages',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'web_attributed_conversions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Aggregated daily snapshot of Marketing WBR metrics.
        
        #### Raw SQL:
        ```sql
            with web_attributed_conversions as (
                select * from {{ ref('web_attributed_conversions') }}
            ),
        
            date_spine as (
                select date_day from {{ ref('time_spine') }}
                where date_day <= current_date
                and date_day >= '2023-01-30'
            ),
        
            hubspot_form_fills as (
                select * from {{ ref('segment_web_hubspot_form_submits') }}
            ),
        
            segment_page_traffic as (
                select * from {{ ref('segment_web_pages') }}
            ),
        
            adgroup_stats as (
                select * from {{ ref('google_ads_adgroup_stats') }}
            ),
        
            sales_form_fills_by_date as (
                select 
                    date(timestamp) as form_fill_date,
                    count(distinct email) as contact_form_fills
                from hubspot_form_fills
                where request_type = 'Contact Sales'
                group by 1
            ),
        
            conversions_by_date as (
                select
                    date(signup_first_session_started_at) as signup_date,
                    count(distinct case when signup_first_campaign_source is not null then user_id else null end) as ad_source_signups,
                    count(distinct case when signup_first_campaign_source is null then user_id else null end) as organic_signups
                from web_attributed_conversions
                group by 1
            ),
        
            traffic_by_date as (
                select 
                    date(timestamp) as traffic_date,
                    count(distinct case when campaign_medium is not null then coalesce(user_id, anonymous_id) else null end) as paid_traffic,
                    count(distinct coalesce(user_id, anonymous_id)) as traffic
                from segment_page_traffic
                group by 1
            ),
        
            ad_impressions_by_date as (
                select
                    date as ad_date,
                    sum(impressions) as impressions
                from adgroup_stats
                group by 1
            ),
        
            metrics_by_date as (
                select
                    date_spine.date_day as date,
                    coalesce(ad_impressions_by_date.impressions, 0) as ad_impressions,
                    coalesce(traffic_by_date.traffic, 0) as traffic,
                    coalesce(traffic_by_date.paid_traffic, 0) as paid_traffic,
                    coalesce(conversions_by_date.organic_signups, 0) as organic_signups,
                    coalesce(conversions_by_date.ad_source_signups, 0) as ad_source_signups,
                    coalesce(sales_form_fills_by_date.contact_form_fills, 0) as contact_form_fills,
                    coalesce(sales_form_fills_by_date.contact_form_fills + conversions_by_date.ad_source_signups, 0) as paid_traffic_conversions
                from date_spine
                left join ad_impressions_by_date
                    on date_spine.date_day = ad_impressions_by_date.ad_date
                left join traffic_by_date
                    on date_spine.date_day = traffic_by_date.traffic_date
                left join conversions_by_date
                    on date_spine.date_day = conversions_by_date.signup_date
                left join sales_form_fills_by_date
                    on date_spine.date_day = sales_form_fills_by_date.form_fill_date
            )
        
            select * from metrics_by_date
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//marketing_wbr_metrics_by_date',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.marketing_wbr_metrics_by_date',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.marketing_wbr_metrics_by_date',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/MARKETING_WBR_METRICS_BY_DATE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'asset_event_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Intermediate table that stores metadata about asset materializations
        
        #### Raw SQL:
        ```sql
            select
        
                organization_id,
                deployment_id,
                event_log_id,
                run_id,
                step_key,
                created_at,
                asset_key,
                label,
                metadata_type,
                metadata_value
            from
                {{ ref('asset_event_metadata') }}
            where
                dagster_event_type = 'ASSET_MATERIALIZATION'
                and metadata_type in ('FloatMetadataEntryData', 'IntMetadataEntryData')
                and metadata_value is not null
                and try_cast(cast(metadata_value as text) as numeric) is not null
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//materialization_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.materialization_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.materialization_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/MATERIALIZATION_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'base_sales_cycles',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sales_activities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Sales cycle stages that are not associated with an opportunity - i.e., `Cycle Started` and `Meeting Set`.
        
        #### Raw SQL:
        ```sql
            with sales_cycles as (
                select * from {{ ref('base_sales_cycles') }}
            )
            , meetings as (
                select * 
                from {{ ref('sales_activities') }}
                where type = 'Meeting'
            )
            , cycle_begins as (
                select 
                    account_id,
                    account_sales_cycle_id,
                    owner as owner_id,
                    start_date as cycle_start,
                    iff(is_active, null, end_date) as cycle_end,
                    is_active as cycle_is_active,
                    opportunity_id,
                    is_won,
                    'Cycle Started' as stage,
                    0 as stage_order,
                    start_date as stage_start,
                    null as stage_end, 
                from sales_cycles
            )
            , first_meeting as (
                select
                    sales_cycles.account_id,
                    sales_cycles.account_sales_cycle_id,
                    sales_cycles.owner as owner_id,
                    sales_cycles.start_date as cycle_start,
                    iff(is_active, null, sales_cycles.end_date) as cycle_end,
                    is_active as cycle_is_active,
                    sales_cycles.opportunity_id,
                    sales_cycles.is_won,
                    'Meeting Set' as stage,
                    1 as stage_order,
                    meetings.completed_at as stage_start,
                    meetings.completed_at as stage_end,
                from sales_cycles
                left join meetings on sales_cycles.account_id = meetings.account_id
                    and (
                        (meetings.completed_at >= sales_cycles.start_date and meetings.completed_at < coalesce(sales_cycles.opportunity_start, sales_cycles.end_date))
                        or
                        (meetings.completed_at >= sales_cycles.start_date and coalesce(sales_cycles.opportunity_start, sales_cycles.end_date) is null)
                    )
                qualify row_number() over (partition by sales_cycles.account_id, account_sales_cycle_id, opportunity_id order by stage_start desc) = 1
                order by sales_cycles.account_id, account_sales_cycle_id
            )
            , unioned as (
                select * from cycle_begins
                union all
                select * from first_meeting where stage_start is not null
            )
        
            select * from unioned
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//non_opportunity_stages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.non_opportunity_stages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.non_opportunity_stages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/NON_OPPORTUNITY_STAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__onboarding_checklist',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Model to calculate metrics for onboarding events
        
        #### Raw SQL:
        ```sql
            with checklist as (
                select * from {{ ref('stg_cloud_product__onboarding_checklist') }}
            ),
        
            orgs as (
                select * from {{ ref('dim_organizations') }}
            ),
        
            final as (
        
                select
        
                    checklist.organization_id,
                    checklist.entry_key,
                    checklist.status,
                    date_trunc('day', checklist.created_at) as event_created_day,
                    count(checklist.primary_id) as total_events,
        
                    /* TODO: Confirm if we want created or updated here */
                    sum(datediff('second', orgs.org_created_at, checklist.updated_at)) as sum_time_to_event,
                    avg(datediff('second', orgs.org_created_at, checklist.updated_at)) as avg_time_to_event
        
                from checklist
                inner join orgs using (organization_id)
                group by all
            )
        
            select * from final
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//onboarding_events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the organization',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Key to identify the checklist entry',
              name='entry_key',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Status of the checklist entry',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Day when the event was created',
              name='event_created_day',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total number of events for the checklist entry',
              name='total_events',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Sum of time taken to complete the event',
              name='sum_time_to_event',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Average time taken to complete the event',
              name='avg_time_to_event',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.onboarding_events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.onboarding_events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ONBOARDING_EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per opportunity in Salesforce, with additional information from other Salesforce and Hubspot tables
        
        #### Raw SQL:
        ```sql
            with opportunities as (
        
                select * from {{ ref('dim_opportunities') }}
            ),
        
            final as (
        
                select 
                    opportunity_id, 
                    opportunity_name, 
                    account_id, 
                    account_name, 
                    owner_name,
                    created_by_name,
                    close_date, 
                    stage_name, 
                    stage_order_number,
                    amount, 
                    description, 
                    is_closed,
                    is_won, 
                    sal_date, 
                    sal_created_by_name,
                    sales_engineer_name,
                    contact_name,
                    amount_year1, 
                    amount_year2, 
                    amount_year3, 
                    amount_year4, 
                    amount_year5, 
                    is_target_account, 
                    target_account_type,
                    term_months,
                    probability, 
                    opportunity_type, 
                    next_step, 
                    lead_source, 
                    created_at, 
                    updated_at, 
                    is_account_first_opp,
                    loss_reason, 
                    loss_details, 
                    stage_before_closed_lost,
                    competitor, 
                    win_loss_competitor, 
                    manual_forecast_category, 
                    forecast_category, 
                    forecast_category_name, 
                    arr, 
                    new_arr, 
                    prior_term_arr, 
                    recent_source, 
                    account_source, 
                    current_orchestrator, 
                    risks,
                    budget, 
                    within_budget,
                    missing_functionality, 
                    feature_requirements, 
                    current_data_stack,
                    is_primary_evaluator_identified,
                    intro_meeting_date,
                    meeting_held_date,
                    pre_opportunity_date, 
                    discovery_date, 
                    evaluation_date, 
                    proposal_date, 
                    negotiation_review_date,
                    contact_id, 
                    owner_id,
                    account_first_day_as_target_account,
                    case  
                        when sal_date >= account_first_day_as_target_account then true
                        else false
                        end as is_abm_influenced_sal,
                    case  
                        when created_at >= account_first_day_as_target_account then true
                        else false
                        end as is_abm_influenced_opp,
                    datediff(day, sal_date, close_date) as sal_to_closed_days,
                    partner_account_id,
                    partner_account_name,
                    sal_first_touch_campaign_name,
                    sal_last_touch_campaign_name,
                    opp_first_touch_campaign_name,
                    opp_last_touch_campaign_name
                from opportunities
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business',
      'key': 'sandbox//opportunities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the opportunity from Salesforce',
              name='opportunity_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the opportunity',
              name='opportunity_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Related account identifier',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the related account',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the opportunity owner',
              name='owner_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the user who created the opportunity',
              name='created_by_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Expected or actual date of closing the opportunity',
              name='close_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current stage of the opportunity in the sales pipeline',
              name='stage_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Numerical order of the stage in the pipeline',
              name='stage_order_number',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of months in the term of the opportunity (i.e. contract length)',
              name='term_months',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total amount of the opportunity',
              name='amount',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Detailed description of the opportunity',
              name='description',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the opportunity is closed',
              name='is_closed',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the opportunity was won',
              name='is_won',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when this opportunity became a Sales Accepted Lead',
              name='sal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the user who created the SAL',
              name='sal_created_by_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the primary contact for this opportunity',
              name='contact_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the first year of the opportunity',
              name='amount_year1',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the second year of the opportunity',
              name='amount_year2',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the third year of the opportunity',
              name='amount_year3',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the fourth year of the opportunity',
              name='amount_year4',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the fifth year of the opportunity',
              name='amount_year5',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the related account is a target account',
              name='is_target_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Classification of target account type for the related account',
              name='target_account_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Probability of closing the opportunity (percentage)',
              name='probability',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Type of opportunity (e.g., new business, expansion)',
              name='opportunity_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Next step in the sales process',
              name='next_step',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the lead that generated the opportunity',
              name='lead_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the opportunity was created',
              name='created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the opportunity was last updated',
              name='updated_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this is the first opportunity for the account',
              name='is_account_first_opp',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Reason for closing the opportunity as lost',
              name='loss_reason',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Detailed explanation for closing the opportunity as lost',
              name='loss_details',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Information about competing solutions',
              name='competitor',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Competitor that won/lost the deal',
              name='win_loss_competitor',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Manually set forecast category',
              name='manual_forecast_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='System-calculated forecast category',
              name='forecast_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the forecast category',
              name='forecast_category_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Annual recurring revenue from the opportunity',
              name='arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='New annual recurring revenue from the opportunity',
              name='new_arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Change in annual recurring revenue',
              name='arr_change',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='ARR from the previous term',
              name='prior_term_arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent marketing source for the opportunity',
              name='recent_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the related account in Salesforce',
              name='account_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current workflow orchestrator used by the customer',
              name='current_orchestrator',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Budget information for the opportunity',
              name='budget',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Functionality that is missing and requested by the prospect',
              name='missing_functionality',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Specific feature requirements for the opportunity',
              name='feature_requirements',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the introductory meeting',
              name='intro_meeting_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when a meeting was held',
              name='meeting_held_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when this became a pre-opportunity',
              name='pre_opportunity_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the discovery call or meeting',
              name='discovery_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when evaluation stage was reached',
              name='evaluation_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when proposal was presented',
              name='proposal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of negotiation review',
              name='negotiation_review_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the primary contact',
              name='contact_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the opportunity owner',
              name='owner_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First date the related account was marked as a target account',
              name='account_first_day_as_target_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this SAL was influenced by account-based marketing',
              name='is_abm_influenced_sal',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this opportunity was influenced by account-based marketing',
              name='is_abm_influenced_opp',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the partner account',
              name='partner_account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the partner account',
              name='partner_account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identified risks associated with the opportunity',
              name='risks',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Boolean indicating if the opportunity is within the customer's budget",
              name='within_budget',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Description of the customer's current data stack",
              name='current_data_stack',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the primary evaluator has been identified',
              name='is_primary_evaluator_identified',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of days between SAL date and close date',
              name='sal_to_closed_days',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the first touch campaign when the opportunity became a SAL',
              name='sal_first_touch_campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the last touch campaign when the opportunity became a SAL',
              name='sal_last_touch_campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the first touch campaign when the opportunity was created',
              name='opp_first_touch_campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the last touch campaign when the opportunity was created',
              name='opp_last_touch_campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the sales engineer assigned to the opportunity',
              name='sales_engineer_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The stage of the opportunity immediately before it was marked as closed lost',
              name='stage_before_closed_lost',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.opportunities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.opportunities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OPPORTUNITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaign_members',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per opportunity per associated campaign. If a single account had several campaigns associated, there will be a line for each
        
        #### Raw SQL:
        ```sql
            with campaign_members as (
        
                select * from {{ ref('salesforce_campaign_members') }}
            ),
        
            contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
            ),
        
            opportunities as (
        
                select * from {{ ref('salesforce_opportunities') }}
            ),
        
            accounts as (
        
                select * from {{ ref('salesforce_accounts') }}
            ),
        
            account_backfill as (
        
                select 
                    campaign_members.campaign_id,
                    campaign_members.campaign_name,
                    campaign_members.parent_campaign_name,
                    campaign_members.campaign_member_id,
                    campaign_members.created_date as campaign_member_created,
                    campaign_members.start_date as campaign_start_date,
                    campaign_members.campaign_type,
                    campaign_members.first_name,
                    campaign_members.last_name,
                    coalesce(campaign_members.account_id, contacts.account_id) as account_id,
                from campaign_members
                left join contacts on campaign_members.contact_id = contacts.contact_id
            ),
        
            joined as (
        
                select 
                    opportunities.*,
                    account_backfill.campaign_id,
                    account_backfill.campaign_name,
                    account_backfill.parent_campaign_name,
                    account_backfill.campaign_type,
                    account_backfill.campaign_member_id,
                    account_backfill.campaign_member_created,
                    account_backfill.campaign_start_date,
                    account_backfill.first_name,
                    account_backfill.last_name,
                    accounts.revenue_segment
                from opportunities
                left join account_backfill on account_backfill.account_id = opportunities.account_id
                left join accounts on accounts.account_id = opportunities.account_id
            ),
        
            formatting as (
        
                select
                    opportunity_id,
                    opportunity_name,
                    opportunity_type,
                    account_id,
                    is_won,
                    is_closed,
                    stage_name,
                    close_date,
                    revenue_segment,
                    campaign_id,
                    new_arr,
                    coalesce(campaign_name, 'no associated campaign') as campaign_name,
                    case 
                        when campaign_name is null then 'no associated campaign'
                        when campaign_type is null then 'no type assigned'
                        else campaign_type
                        end as campaign_type,
                    campaign_start_date,
                    parent_campaign_name,
                    date(created_at) as opportunity_created_date,
                    date(sal_date) as sal_date,
                    coalesce(campaign_start_date, min(date(campaign_member_created))) as campaign_join_date,
                    --- here we define the maximum amount of time we will attribute a campaign to an opportunity
                    dateadd(year, 1, coalesce(campaign_start_date, min(date(campaign_member_created)))) as campaign_attribution_end_date,
                    case 
                        when date(sal_date) > coalesce(campaign_start_date, min(date(campaign_member_created)))
                        and date(sal_date) < dateadd(year, 1, coalesce(campaign_start_date, min(date(campaign_member_created)))) 
                        then true 
                        else false 
                        end as is_sal_from_campaign,
                    case 
                        when date(close_date) > coalesce(campaign_start_date, min(date(campaign_member_created))) 
                        and date(close_date) <dateadd(year, 1, coalesce(campaign_start_date, min(date(campaign_member_created)))) 
                        then true 
                        else false 
                        end as is_campaign_prior_to_close,
                    min(date(campaign_member_created)) as first_campaign_member_created_date,
                    count(campaign_member_id) as number_account_contacts
                from joined
                group by all
            ),
        
            sal_flags as (
        
                select
                    opportunity_id,
                    min_by(campaign_id, first_campaign_member_created_date) as sal_first_touch_campaign_id,
                    max_by(campaign_id, first_campaign_member_created_date) as sal_last_touch_campaign_id,
                    count(distinct campaign_id) as sal_num_influence_campaigns,
                    div0(1,count(distinct campaign_id)) as sal_percent_influence,
                from formatting
                where is_sal_from_campaign = true
                group by opportunity_id
            ),
        
            opp_flags as (
        
                select
                    opportunity_id,
                    min_by(campaign_id, first_campaign_member_created_date) as opp_first_touch_campaign_id,
                    max_by(campaign_id, first_campaign_member_created_date) as opp_last_touch_campaign_id,
                    count(distinct campaign_id) as opp_num_influence_campaigns,
                    div0(1,count(distinct campaign_id)) as opp_percent_influence,
                from formatting
                where is_campaign_prior_to_close = true
                group by opportunity_id
            ),
        
            final as (
        
                select 
                    formatting.*,
                    ---identify the first and last touch campaign for the SAL
                    case 
                        when sal_flags.sal_first_touch_campaign_id = formatting.campaign_id then true
                        else false
                        end as is_first_touch_campaign_sal,
                    case 
                        when sal_flags.sal_last_touch_campaign_id = formatting.campaign_id then true
                        else false
                        end as is_last_touch_campaign_sal,
                    --- this is our method of doing even credit. we divide 100% by all influencing campaigns and then only apply to campaigns that did influence
                    case 
                        when is_sal_from_campaign = true then sal_percent_influence 
                        else 0 
                        end as sal_percent_influence,
                    case 
                        when opp_flags.opp_first_touch_campaign_id = formatting.campaign_id then true
                        else false
                        end as is_first_touch_campaign_opp,
                    case 
                        when opp_flags.opp_last_touch_campaign_id = formatting.campaign_id then true
                        else false
                        end as is_last_touch_campaign_opp,
                    case 
                        when is_campaign_prior_to_close = true then opp_percent_influence 
                        else 0 
                        end as opp_percent_influence,
                    case 
                        when is_campaign_prior_to_close = true then opp_percent_influence * new_arr
                        else 0 
                        end as opp_percent_influence_new_arr,       
                from formatting
                left join sal_flags on formatting.opportunity_id = sal_flags.opportunity_id
                left join opp_flags on formatting.opportunity_id = opp_flags.opportunity_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'mart_gtm',
      'key': 'sandbox//opportunities_by_campaign',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.opportunities_by_campaign',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.opportunities_by_campaign',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OPPORTUNITIES_BY_CAMPAIGN',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_opportunities_by_day',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per day per opportunity in Salesforce, with additional information from other Salesforce tables
        
        #### Raw SQL:
        ```sql
            with opportunities as (
        
                select * from {{ ref('dim_opportunities_by_day') }}
            ),
        
            time_spine as (
        
                select * from {{ ref('time_spine') }}
            ),
        
            joined as (
        
                select 
                    opportunities.*,
                    time_spine.day_name,
                    time_spine.day_of_week,
                    time_spine.fiscal_year,
                    time_spine.fiscal_quarter,
                    time_spine.is_first_day_of_week,
                    time_spine.is_last_day_of_week,
                    time_spine.is_first_day_of_month,
                    time_spine.is_last_day_of_month
                from opportunities
                left join time_spine on time_spine.date_day = opportunities.snapshot_date
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'business_by_day',
      'key': 'sandbox//opportunities_by_day',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the opportunity from Salesforce',
              name='opportunity_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date for which this opportunity data snapshot applies',
              name='snapshot_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the opportunity',
              name='opportunity_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Related account identifier',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the related account',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the opportunity owner',
              name='owner_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the user who created the opportunity',
              name='created_by_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Expected or actual date of closing the opportunity',
              name='close_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current stage of the opportunity in the sales pipeline at snapshot date',
              name='stage_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total amount of the opportunity at snapshot date',
              name='amount',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Detailed description of the opportunity',
              name='description',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the opportunity is closed',
              name='is_closed',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the opportunity was won',
              name='is_won',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when this opportunity became a Sales Accepted Lead',
              name='sal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the user who created the SAL',
              name='sal_created_by_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the primary contact for this opportunity',
              name='contact_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the first year of the opportunity',
              name='amount_year1',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the second year of the opportunity',
              name='amount_year2',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the third year of the opportunity',
              name='amount_year3',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the fourth year of the opportunity',
              name='amount_year4',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Amount for the fifth year of the opportunity',
              name='amount_year5',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the related account is a target account',
              name='is_target_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Classification of target account type for the related account',
              name='target_account_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Probability of closing the opportunity (percentage) at snapshot date',
              name='probability',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Type of opportunity (e.g., new business, expansion)',
              name='opportunity_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Next step in the sales process',
              name='next_step',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the lead that generated the opportunity',
              name='lead_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the opportunity was created',
              name='created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the opportunity was last updated',
              name='updated_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Reason for closing the opportunity as lost',
              name='loss_reason',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Detailed explanation for closing the opportunity as lost',
              name='loss_details',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Information about competing solutions',
              name='competitor',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Competitor that won/lost the deal',
              name='win_loss_competitor',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Manually set forecast category',
              name='manual_forecast_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='System-calculated forecast category',
              name='forecast_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the forecast category',
              name='forecast_category_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Annual recurring revenue from the opportunity',
              name='arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='New annual recurring revenue from the opportunity at snapshot date',
              name='new_arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='ARR from the previous term',
              name='prior_term_arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Most recent marketing source for the opportunity',
              name='recent_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the related account in Salesforce',
              name='account_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current workflow orchestrator used by the customer',
              name='current_orchestrator',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Budget information for the opportunity',
              name='budget',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Functionality that is missing and requested by the prospect',
              name='missing_functionality',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Specific feature requirements for the opportunity',
              name='feature_requirements',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the introductory meeting',
              name='intro_meeting_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when a meeting was held',
              name='meeting_held_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when this became a pre-opportunity',
              name='pre_opportunity_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the discovery call or meeting',
              name='discovery_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when evaluation stage was reached',
              name='evaluation_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when proposal was presented',
              name='proposal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of negotiation review',
              name='negotiation_review_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the primary contact',
              name='contact_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the opportunity owner',
              name='owner_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='First date the related account was marked as a target account',
              name='account_first_day_as_target_account',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this SAL was influenced by account-based marketing',
              name='is_abm_influenced_sal',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this opportunity was influenced by account-based marketing',
              name='is_abm_influenced_opp',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the partner account',
              name='partner_account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the partner account',
              name='partner_account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Change in annual recurring revenue at snapshot date',
              name='arr_change',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the day (e.g., Monday, Tuesday)',
              name='day_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Numeric day of the week',
              name='day_of_week',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Fiscal year for the snapshot date',
              name='fiscal_year',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Fiscal quarter for the snapshot date',
              name='fiscal_quarter',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the first day of the week',
              name='is_first_day_of_week',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the last day of the week',
              name='is_last_day_of_week',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the first day of the month',
              name='is_first_day_of_month',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the snapshot date is the last day of the month',
              name='is_last_day_of_month',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.opportunities_by_day',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.opportunities_by_day',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OPPORTUNITIES_BY_DAY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__opportunities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__opportunity_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Contains a start of fiscal quarter snapshot of Salesforce Opportunities to see the state of all opportunities at the start of each fiscal quarter.
        
        #### Raw SQL:
        ```sql
            with date_spine as (
                select
                    case
                        when date_day >= '2025-02-01'
                            then dateadd('month', 1, date_trunc('quarter', dateadd(month, -1, date_day)))
                        when date_day between '2024-10-01' and '2025-01-31'
                            then '2024-10-01'::date
                        else date_trunc('quarter', dateadd(month, -1, date_day)) end as fiscal_qtr_start
                from {{ ref('time_spine') }}
                where date_day <= current_date
                group by 1
            ),
        
            field_history as (
                select
                    date_spine.fiscal_qtr_start,
                    date(created_date) as created_date,
                    opportunity_id,
                    stage_name,
                    forecast_category,
                    probability,
                    close_date
                from date_spine
                join {{ ref('stg_salesforce__opportunity_history') }} as opportunity_history
                    on date(opportunity_history.created_date) <= date(date_spine.fiscal_qtr_start)
                    and date(opportunity_history.close_date) >= date(date_spine.fiscal_qtr_start)
                qualify row_number() over (partition by opportunity_history.opportunity_id, date_spine.fiscal_qtr_start order by created_date desc nulls last) = 1
            ),
        
            opportunity as (
                select *
                from {{ ref('stg_salesforce__opportunities') }}
            ),
        
            users as (
                select *
                from {{ ref('stg_salesforce__users') }}
            ),
        
            final as (
            select
                date_spine.fiscal_qtr_start,
                opportunity.opportunity_id,
                opportunity.opportunity_name,
                opportunity.account_id,
                opportunity.owner_id,
                users.name as owner_name,
                opportunity_type,
                field_history.forecast_category as forecast_category_at_fiscal_qtr_start,
                opportunity.forecast_category as current_forecast_category,
                field_history.stage_name as stage_name_at_fiscal_qtr_start,
                field_history.created_date as stage_last_updated_date,
                opportunity.stage_name as current_stage_name,
                field_history.probability as probability_at_fiscal_qtr_start,
                opportunity.probability as current_probability,
                opportunity.arr,
                opportunity.new_arr,
                opportunity.amount_year1,
                date(opportunity.created_at) as created_date,
                field_history.close_date as close_date_at_fiscal_qtr_start,
                opportunity.close_date as current_close_date
            from date_spine
            join opportunity
                on date(opportunity.created_at) <= date_spine.fiscal_qtr_start
                and date(opportunity.close_date) >= date_spine.fiscal_qtr_start
            join users
                on opportunity.owner_id = users.user_id
            join field_history
                on opportunity.opportunity_id = field_history.opportunity_id
                and field_history.fiscal_qtr_start = date_spine.fiscal_qtr_start
            )
        
            select * from final
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//opportunity_fiscal_qtr_start_snapshots',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.opportunity_fiscal_qtr_start_snapshots',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.opportunity_fiscal_qtr_start_snapshots',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OPPORTUNITY_FISCAL_QTR_START_SNAPSHOTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              'snapshots',
              'salesforce_opportunities_daily_snapshot',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Contains a daily snapshot of Salesforce Opportunities to track changes over time.
        
        #### Raw SQL:
        ```sql
            {% set part = "over (partition by opportunity_id order by snapshot_date)" %}
        
            {% set attributes = ["stage_name", "opportunity_type", "lead_source", "loss_reason", 
                "competitor", "manual_forecast_category", "discovery_date", "sal_date", 
                "evaluation_date", "proposal_date", "negotiation_review_date", "amount", "arr", 
                "new_arr", "prior_term_arr", "close_date", "forecast_category"] %}
        
        
            with opportunity_snapshots as (
                select * from {{ ref('salesforce_opportunities_daily_snapshot') }}
            ),
        
            final as (
                select
                    *,
                    {{ dbt_utils.generate_surrogate_key(['opportunity_id', 'snapshot_date']) }} as id, -- noqa: LT02
                    {%- for k in attributes %}          
                        {%- if k not in ['amount', 'close_date', 'arr', 'new_arr', 'prior_term_arr'] %}
                            iff(
                                {{ k }} <> coalesce(lag({{ k }}) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_change,
                            lag({{ k }}) {{ part }} as prev_{{ k }},
                            iff(
                            {{ k }} <> coalesce(lag({{ k }}, 7) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_change_7day,
                            lag({{ k }}, 7) {{ part }} as prev_{{ k }}_7day,
                        {%- else %}
                            lag({{ k }}) {{ part }} as prev_{{ k }},
                            iff(
                                {{ k }} > coalesce(lag({{ k }}) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_inc,
                            iff(
                                {{ k }} < coalesce(lag({{ k }}) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_dec,
                            iff(
                                {{ k }} <> coalesce(lag({{ k }}) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_change,
                            lag({{ k }}, 7) {{ part }} as prev_{{ k }}_7day,
                            iff(
                                {{ k }} > coalesce(lag({{ k }}, 7) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_inc_7day,
                            iff(
                                {{ k }} < coalesce(lag({{ k }}, 7) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_dec_7day,
                            iff(
                                {{ k }} <> coalesce(lag({{ k }}, 7) {{ part }}, {{ k }}), true, false
                            ) as is_{{ k }}_change_7day{%- if not loop.last -%},{%- endif -%}
                        {%- endif %} -- noqa: LT02
                    {% endfor %}
                from opportunity_snapshots
            )
        
            select *
            from final
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//opportunity_snapshots',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The date the snapshot occurred.',
              name='snapshot_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce Opportunity ID',
              name='opportunity_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce Account ID the opportunity is associated to.',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce Contact ID associated with the opportunity.',
              name='contact_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce Opportunity Owner ID i.e. the Salesforce User that owns the opportunity.',
              name='owner_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the Salesforce Opportunity.',
              name='opportunity_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Opportunity description populated by the sales rep.',
              name='description',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Opportunity stage name indicating the Opportunity stage.',
              name='stage_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The value of the Opportunity (all time).',
              name='amount',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The value of the Opportunity in the first year of its closed-won lifecycle.',
              name='amount_year1',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The value of the Opportunity in the second year of its closed-won lifecycle.',
              name='amount_year2',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The value of the Opportunity in the third year of its closed-won lifecycle.',
              name='amount_year3',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The value of the Opportunity in the fourth year of its closed-won lifecycle.',
              name='amount_year4',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The value of the Opportunity in the fifth year of its closed-won lifecycle.',
              name='amount_year5',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The probability estimate that the opportunity will be won.',
              name='probability',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Expected close date of the opportunity',
              name='close_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='New or Existing business classification',
              name='opportunity_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The next step for the opportunity inputted by the sales rep.',
              name='next_step',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the lead resulting in this opportunity i.e. outbound, marketing event, waitlist, etc.',
              name='lead_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating the opportunity is closed (no longer active).',
              name='is_closed',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating the opportunity is won (closed and won).',
              name='is_won',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating the opportunity was deleted.',
              name='is_deleted',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date/Time the opportunity was created.',
              name='created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Latest date/time the opportunity was updated (field was changed).',
              name='updated_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Categorical reason used to classify why the opportunity was lost.',
              name='loss_reason',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Additional details provided about why the opportunity was lost.',
              name='loss_details',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Competitor denoted as responsible for the lost opportunity.',
              name='competitor',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Forecast category used to classify which stage of the pipeline the opportunity is in.',
              name='manual_forecast_category',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='ARR expected as a result of this opportunity being closed-won.',
              name='arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='New ARR expected as a result of this opportunity being closed-won i.e. add-on or new business ARR.',
              name='new_arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Opportunity Account ARR from the prior term.',
              name='prior_term_arr',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Sales Accepted Lead Date i.e. date the lead was verified and accepted by Sales.',
              name='sal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='account_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='pre_opportunity_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of Opportunity discovery meeting.',
              name='discovery_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of Opportunity evaluation.',
              name='evaluation_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date proposal will be/was sent to the Opportunity Account to be signed.',
              name='proposal_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date proposal will be/was negotiated.',
              name='negotiation_review_date',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.opportunity_snapshots',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.opportunity_snapshots',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OPPORTUNITY_SNAPSHOTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Contains the start and end date for each stage that a given opportunity reached.
        
        #### Raw SQL:
        ```sql
            with opportunities as (
                select * from {{ ref('salesforce_opportunities') }}
            )
            , opportunity_stages as (
                select
                    opportunity_id,
                    'Pre-Opportunity' as opportunity_stage,
                    created_at::timestamp as stage_start,
                    coalesce(discovery_date, iff(is_closed, close_date, null))::timestamp as stage_end,
                    2 as stage_order
                from opportunities
                where created_at is not null
        
                union all
        
                select
                    opportunity_id,
                    'Discovery' as opportunity_stage,
                    discovery_date::timestamp as stage_start,
                    coalesce(evaluation_date, iff(is_closed, close_date, null))::timestamp as stage_end,
                    3 as stage_order
                from opportunities
                where discovery_date is not null
        
                union all
        
                select
                    opportunity_id,
                    'Evaluation' as opportunity_stage,
                    evaluation_date::timestamp as stage_start,
                    coalesce(proposal_date, iff(is_closed, close_date, null))::timestamp as stage_end,
                    4 as stage_order
                from opportunities
                where evaluation_date is not null
        
                union all
        
                select
                    opportunity_id,
                    'Proposal' as opportunity_stage,
                    proposal_date::timestamp as stage_start,
                    coalesce(negotiation_review_date, iff(is_closed, close_date, null))::timestamp as stage_end,
                    5 as stage_order
                from opportunities
                where proposal_date is not null
        
                union all
        
                select
                    opportunity_id,
                    'Negotiation/Review' as opportunity_stage,
                    negotiation_review_date::timestamp as stage_start,
                    iff(is_closed, close_date, null)::timestamp as stage_end,
                    6 as stage_order
                from opportunities
                where negotiation_review_date is not null
        
                union all
        
                select
                    opportunity_id,
                    'Closed Won' as opportunity_stage,
                    close_date::timestamp as stage_start,
                    close_date::timestamp as stage_end,
                    iff(is_closed, 7, null) as stage_order
                from opportunities
                where is_closed and is_won
        
                union all
        
                select
                    opportunity_id,
                    'Closed Lost' as opportunity_stage,
                    close_date::timestamp as stage_start,
                    close_date::timestamp as stage_end,
                    iff(is_closed, 7, null) as stage_order
                from opportunities
                where is_closed and not is_won
            )
        
            select * from opportunity_stages
            order by opportunity_id, stage_order
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//opportunity_stages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.opportunity_stages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.opportunity_stages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OPPORTUNITY_STAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'opportunity_snapshots',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_google_sheets__nb_sales_rep_quotas',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__user_roles',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Contains a daily snapshot of aggregate pipeline metrics for pipeline metrics reporting cadence.
        
        #### Raw SQL:
        ```sql
            with opportunity_snapshots as (
                select * from {{ ref('opportunity_snapshots') }}
            ),
        
            opportunity_owners as (
                select
                    users.user_id,
                    users.name,
                    roles.role_name,
                    case 
                        when roles.role_name in ('West EAE', 'East EAE') then 'EAE'
                        when roles.role_name in ('West CSR', 'East CSR') then 'CSR'
                        when roles.role_name in ('Customer Success', 'CSM Manager') then 'CSM'
                        else null 
                    end as role,
                    case 
                        when roles.role_name in ('West EAE', 'West CSR') then 'West'
                        when roles.role_name in ('East EAE', 'East CSR') then 'East'
                        when roles.role_name in ('Customer Success', 'CSM Manager') then 'Global'
                        else null 
                    end as region,
                    users.is_active
                from {{ ref('stg_salesforce__users') }} as users
                left join {{ ref('stg_salesforce__user_roles')}} roles
                    on users.user_role_id = roles.user_role_id
            ),
        
            nb_quotas as (
                select
                    date(case 
                        when split_part(fiscal_quarter, ' ', 2) = 'Q1' then (LEFT(split_part(fiscal_quarter, 'FY', 2), 4)::integer - 1)::string || '-02-01'
                        when split_part(fiscal_quarter, ' ', 2) = 'Q2' then (LEFT(split_part(fiscal_quarter, 'FY', 2), 4)::integer - 1)::string || '-05-01'
                        when split_part(fiscal_quarter, ' ', 2) = 'Q3' then (LEFT(split_part(fiscal_quarter, 'FY', 2), 4)::integer - 1)::string || '-08-01'
                        when split_part(fiscal_quarter, ' ', 2) = 'Q4' then (LEFT(split_part(fiscal_quarter, 'FY', 2), 4)::integer - 1)::string || '-11-01'
                        ELSE NULL 
                    END) as fq_start,
                    opportunity_owners.role,
                    sum(value) as nb_quota
                from {{ ref('stg_google_sheets__nb_sales_rep_quotas') }} nb_quotas
                left join opportunity_owners
                    on nb_quotas.owner_id = opportunity_owners.user_id
                group by 1, 2
            ),
        
            yield_by_date as (
                select
                    snapshot_date,
                    opportunity_owners.role,
                    -- Accounts for change in fiscal year offset change for FY2026. Last 4 months of FY2025 is Q4 to account for this.
                    case when snapshot_date >= '2025-02-01' then dateadd('month', 1, date_trunc('quarter', dateadd(month, -1, snapshot_date)))
                        when snapshot_date between '2024-10-01' and '2025-01-31' then '2024-10-01'::date
                        else date_trunc('quarter', dateadd(month, -1, snapshot_date)) end as qtr_start,
                    case when snapshot_date >= '2025-02-01' then last_day(dateadd('month', 3, date_trunc('quarter', dateadd(month, -1, snapshot_date))))
                        when snapshot_date between '2024-10-01' and '2025-01-31' then '2025-01-31'::date
                        else last_day(dateadd('month', 2, date_trunc('quarter', dateadd(month, -1, snapshot_date)))) end as qtr_end,
                    sum(case
                        when stage_name not in ('Closed Won') 
                            and forecast_category not in ('Omitted')
                            and opportunity_type = 'New Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_nb_open_pipeline,
                    sum(case
                        when forecast_category in ('MostLikely') 
                            and opportunity_type = 'New Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_nb_most_likely_pipeline,
                    sum(case
                        when forecast_category in ('Forecast') 
                            and opportunity_type = 'New Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_nb_commit_pipeline,
                    sum(case
                        when forecast_category in ('BestCase') 
                            and opportunity_type = 'New Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_nb_best_case_pipeline,
                    sum(case
                        when stage_name in ('Closed Won') 
                            and forecast_category not in ('Omitted')
                            and opportunity_type = 'New Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_nb_won,
                    sum(case
                        when stage_name not in ('Closed Won') 
                            and forecast_category not in ('Omitted')
                            and opportunity_type = 'New Business'
                            and close_date between qtr_start + interval '3 months' and qtr_end + interval '3 months'
                        then new_arr
                        else 0 
                    end) as nq_nb_open_pipeline,
                    sum(case
                        when stage_name not in ('Closed Won') 
                            and forecast_category not in ('Omitted')
                            and opportunity_type = 'Existing Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_upsell_open_pipeline,
                    sum(case
                        when forecast_category in ('MostLikely') 
                            and opportunity_type = 'Existing Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_upsell_most_likely_pipeline,
                    sum(case
                        when forecast_category in ('Forecast') 
                            and opportunity_type = 'Existing Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_upsell_commit_pipeline,
                    sum(case
                        when forecast_category in ('BestCase') 
                            and opportunity_type = 'Existing Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_upsell_best_case_pipeline,
                    sum(case
                        when stage_name in ('Closed Won') 
                            and forecast_category not in ('Omitted')
                            and opportunity_type = 'Existing Business'
                            and close_date between qtr_start and qtr_end
                        then new_arr
                        else 0 
                    end) as cq_upsell_won,
                    max(nb_quotas.nb_quota) as nb_target,
                    max(nq_nb_quotas.nb_quota) as nq_target
                from opportunity_snapshots
                inner join opportunity_owners
                    on opportunity_snapshots.owner_id = opportunity_owners.user_id
                left join nb_quotas
                    on case when opportunity_snapshots.snapshot_date >= '2025-02-01' then dateadd('month', 1, date_trunc('quarter', dateadd(month, -1, opportunity_snapshots.snapshot_date)))
                        when opportunity_snapshots.snapshot_date between '2024-10-01' and '2025-01-31' then '2024-10-01'::date
                        else date_trunc('quarter', dateadd(month, -1, opportunity_snapshots.snapshot_date)) end = nb_quotas.fq_start
                    and opportunity_owners.role = nb_quotas.role
                left join nb_quotas nq_nb_quotas
                    on case when opportunity_snapshots.snapshot_date >= '2025-02-01' then dateadd('month', 3, dateadd('month', 1, date_trunc('quarter', dateadd(month, -1, opportunity_snapshots.snapshot_date))))
                        when opportunity_snapshots.snapshot_date between '2024-10-01' and '2025-01-31' then '2024-10-01'::date
                        else dateadd('month', 3, date_trunc('quarter', dateadd(month, -1, opportunity_snapshots.snapshot_date))) end = nb_quotas.fq_start
                    and opportunity_owners.role = nq_nb_quotas.role
                group by 1, 2, 3, 4
            ),
        
            yield_window as (
                select
                    snapshot_date,
                    role,
                    qtr_start,
                    qtr_end,
                    cq_nb_open_pipeline as cq_nb_open,
                    cq_nb_won,
                    cq_nb_best_case_pipeline,
                    cq_nb_most_likely_pipeline,
                    cq_nb_commit_pipeline,
                    last_value(cq_nb_won) over (partition by qtr_end, role order by snapshot_date) as cq_total_won,
                    (cq_total_won - cq_nb_won) / nullif(cq_nb_open_pipeline, 0) as nb_yield_pct,
                    nq_nb_open_pipeline as nq_nb_open,
                    cq_upsell_open_pipeline as cq_upsell_open,
                    cq_upsell_won,
                    cq_upsell_best_case_pipeline,
                    cq_upsell_most_likely_pipeline,
                    cq_upsell_commit_pipeline,
                    nb_target,
                    nq_target,
                    nq_nb_open / nullif(nq_target, 0) as nq_nb_open_coverage
                from yield_by_date
            ),
        
            opportunity_yield as (
                select
                    yield_window.snapshot_date,
                    yield_window.role,
                    yield_window.qtr_start,
                    yield_window.qtr_end,
                    yield_window.cq_nb_open,
                    yield_window.cq_nb_won,
                    yield_window.cq_nb_best_case_pipeline,
                    yield_window.cq_nb_most_likely_pipeline,
                    yield_window.cq_nb_commit_pipeline,
                    yield_window.cq_total_won,
                    yield_window.nb_yield_pct,
                    pq1_yield.nb_yield_pct as ly_nb_yield_pct,
                    coalesce(pq1_yield.nb_yield_pct, 0) * yield_window.cq_nb_open + yield_window.cq_nb_won as cq_nb_yield_forecast,
                    yield_window.nq_nb_open,
                    pq1_yield.nq_nb_open / nullif(pq1_yield.nb_target, 0) as cq1_pipeline_coverage,
                    yield_window.cq_upsell_open,
                    yield_window.cq_upsell_won,
                    yield_window.cq_upsell_best_case_pipeline,
                    yield_window.cq_upsell_most_likely_pipeline,
                    yield_window.cq_upsell_commit_pipeline,
                    yield_window.nb_target,
                    yield_window.nq_target as nq_nb_target,
                    pq1_yield.cq_total_won as ly_cq_total_won,
                    pq1_yield.cq_nb_open as ly_cq_nb_open,
                    pq1_yield.cq_nb_won as ly_cq_nb_won,
                    coalesce(pq1_yield.nq_nb_open_coverage, 0) as cq1_pipeline_multiple,
                    pq1_yield.nq_nb_open as pq1_nq_nb_open,
                    pq1_yield.nq_target as pq1_nq_target,
                    pq2_yield.nq_nb_open as pq2_nq_nb_open,
                    pq2_yield.nq_target as pq2_nq_target
                from yield_window
                left join yield_window as pq1_yield
                    on yield_window.snapshot_date - interval '4 months' = pq1_yield.snapshot_date
                    and yield_window.role = pq1_yield.role
                left join yield_window as pq2_yield
                    on yield_window.snapshot_date - interval '7 months' = pq2_yield.snapshot_date
                    and yield_window.role = pq2_yield.role
                where yield_window.role is not null
                group by all
            )
        
            select * from opportunity_yield
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//opportunity_yield',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.opportunity_yield',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.opportunity_yield',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OPPORTUNITY_YIELD',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'org_deployments_daily',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'usage_metrics_daily',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        A monthly view of dagster credit consumption along with information about deployments,
        users, and roles for the a given organization.
        
        
        #### Raw SQL:
        ```sql
            with
        
            organizations as (
                select
                    organization_id,
                    organization_name,
                    salesforce_account_id,
                    is_active as is_active_org
                from {{ ref('dim_organizations') }}
                where salesforce_account_id is not null
            ),
        
            organization_deployment_count as (
                select
                    organization_id,
                    date(date_trunc(month, deployment_created_day)) as month_start_date,
                    max(total_deployments) as deployment_count,
                    max(total_active_deployments) as active_deployment_count,
                    max(total_branch_deployments) as branch_deployment_count,
                    max(total_hybrid_deployments) as hybrid_deployment_count
                from {{ ref('org_deployments_daily') }}
                group by organization_id, month_start_date
            ),
        
            monthly_credit_usage as (
                select
                    date(date_trunc(month, ds)) as month_start_date,
                    organization_id,
                    sum(materializations) as materializations_credits,
                    sum(steps_credits) as steps_credits,
                    materializations_credits + sum(steps_credits) as dagster_credits
                from {{ ref('usage_metrics_daily') }}
                group by month_start_date, organization_id
            )
        
            select
                month_start_date,
                organization_id,
                {{ dbt_utils.generate_surrogate_key(["month_start_date", "salesforce_account_id"]) }}
                    as surrogate_key,
                organization_name,
                salesforce_account_id,
                is_active_org,
                coalesce(
                    deployment_count,
                    lag(deployment_count) ignore nulls
                        over (partition by organization_id order by month_start_date)
                ) as deployment_count,
                coalesce(
                    active_deployment_count,
                    lag(active_deployment_count) ignore nulls
                        over (partition by organization_id order by month_start_date)
                ) as active_deployment_count,
                coalesce(
                    branch_deployment_count,
                    lag(branch_deployment_count) ignore nulls
                        over (partition by organization_id order by month_start_date)
                ) as branch_deployment_count,
                coalesce(
                    hybrid_deployment_count,
                    lag(hybrid_deployment_count) ignore nulls
                        over (partition by organization_id order by month_start_date)
                ) as hybrid_deployment_count,
                zeroifnull(materializations_credits) as materializations_credits,
                zeroifnull(steps_credits) as steps_credits,
                zeroifnull(dagster_credits) as dagster_credits
            from monthly_credit_usage
            full outer join organization_deployment_count using (organization_id, month_start_date)
            inner join organizations using (organization_id)
            order by organization_id, month_start_date
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//org_activity_monthly',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='month_start_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='ID of the organization',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the organization',
              name='organization_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of deployments associated with the organization',
              name='deployment_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Credits used by the organization on materializations in the given month',
              name='materializations_credits',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Credits used by the organization on steps in the given month',
              name='steps_credits',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total credits used by the organization in the given month',
              name='dagster_credits',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.org_activity_monthly',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.org_activity_monthly',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORG_ACTIVITY_MONTHLY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__deployments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Contains organization-level metrics about deployments, aggregated
        daily by the day a deployment was created.
        
        
        #### Raw SQL:
        ```sql
            with deployments as (
        
                select * from {{ ref('stg_cloud_product__deployments') }}
        
            ),
        
            final as (
        
                select
        
                    organization_id,
                    date_trunc('day', created_at) as deployment_created_day,
                    count(deployment_id) as total_deployments,
                    count_if(is_active and not is_sandbox and not is_branch_deployment)
                        as total_active_deployments,
                    count_if(is_branch_deployment) as total_branch_deployments,
                    count_if(is_hybrid) as total_hybrid_deployments
        
                from deployments
                group by 1, 2
            )
        
            select * from final
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//org_deployments_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Reporting-day for deployment metrics',
              name='deployment_created_day',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Total number of deployments for the organization on the specified
                reporting day.
  
              ''',
              name='total_deployments',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Number of active deployments for the organization on the specified
                reporting day, excluding sandbox and branch deployments.
  
              ''',
              name='total_active_deployments',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Number of branch deployments for the organization on the specified
                reporting day.
  
              ''',
              name='total_branch_deployments',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of hybrid deployments for the organization on the specified reporting day.',
              name='total_hybrid_deployments',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.org_deployments_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.org_deployments_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORG_DEPLOYMENTS_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_customer_info',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'credit_utilization',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'credit_utilization_forecast',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'product_engagement',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__deployments',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster+ organization information. This data is sent to Salesforce.
        
        
        #### Raw SQL:
        ```sql
            with
        
            organizations as (
                select
                    organization_id,
                    organization_name,
                    plan_type,
                    salesforce_account_id,
                    stripe_customer_id,
                    is_active as is_active_org
                from {{ ref('dim_organizations') }}
                where salesforce_account_id is not null
            ),
        
            org_user_counts as (
                select
                    organization_id,
                    count(*) as total_user_count
                from {{ ref('user_organizations') }}
                group by 1
            ),
        
            last_invoice as (
                select
                    organization_id,
                    date(invoice_created_at) as last_invoice_date,
                    round(invoice_total, 2) as last_invoice_amount
                from {{ ref('stripe_invoices') }} as i
                inner join
                    {{ ref('cloud_product_customer_info') }} as ci
                    on i.customer_id = ci.stripe_customer_id
                qualify row_number() over (partition by organization_id order by invoice_created_at desc) = 1
            ),
        
            trials_dates as (
                select
                    customer_id as stripe_customer_id,
                    trial_start,
                    trial_end
                from {{ ref('stripe_subscriptions') }}
                where trial_start is not null
            ),
        
            running_credits_sum as (
                select
                    credits_date,
                    organization_id,
                    sum(total_credits_used)
                        over (partition by organization_id order by credits_date)
                        as running_credits_used
                from {{ ref('credit_utilization') }}
            ),
        
            last_weekly_utilization as (
                select
                    organization_id,
                    week_utilization_pct,
                    date_trunc(week, credits_date) as week_start_date
                from {{ ref('credit_utilization') }}
                where
                    credits_date < current_date
                    -- must be a complete week
                    and week_start_date < current_date - interval '7 days'
                qualify row_number() over (partition by organization_id order by credits_date desc) = 1
            ),
        
            contract_credits_used as (
                select
                    organization_id,
                    running_credits_used
                from running_credits_sum
                where credits_date < current_date
                qualify row_number() over (partition by organization_id order by credits_date desc) = 1
            ),
        
            forecast_predictions as (
                select
                    organization_id,
                    predicted_utilization,
                    actual_predicted_utilization,
                    is_predicted_healthy_organization,
                    actual_predicted_credits_used
                from {{ ref('credit_utilization_forecast') }}
            ),
        
            engagement as (
                select
                    organization_id,
                    is_90day_activated
        
                from {{ ref('product_engagement') }}
            ),
        
            deployment_type_count as (
                select
                    organization_id,
                    count_if(is_hybrid) as hybrid_deployment_count,
                    count_if(is_serverless) as serverless_deployment_count
                from {{ ref('stg_cloud_product__deployments') }}
                where is_active
                group by all
            )
        
            select
                organization_id,
                organization_name,
                plan_type,
                case
                    when plan_type = 'ENTERPRISE' then 'ENTERPRISE'
                    else 'SELF_SERVE'
                end as self_serve_or_enterprise,
                salesforce_account_id,
                stripe_customer_id,
                is_active_org,
                running_credits_used as contract_credits_used,
                total_user_count,
                hybrid_deployment_count,
                serverless_deployment_count,
                last_invoice_amount,
                last_invoice_date,
                trial_start as trial_start_date,
                trial_end as trial_end_date,
                predicted_utilization,
                actual_predicted_utilization,
                actual_predicted_credits_used,
                is_predicted_healthy_organization,
                is_90day_activated,
                week_utilization_pct
        
            from
                organizations
            inner join org_user_counts using (organization_id)
            left join last_invoice using (organization_id)
            left join contract_credits_used using (organization_id)
            left join trials_dates using (stripe_customer_id)
            left join forecast_predictions using (organization_id)
            left join engagement using (organization_id)
            left join deployment_type_count using (organization_id)
            left join last_weekly_utilization using(organization_id)
            qualify
                row_number() over (partition by organization_id order by trial_start_date desc nulls last) = 1
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//org_info',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.org_info',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.org_info',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORG_INFO',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_event_logs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'code_location_assets',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'code_location_external_repo_metadata',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_steps',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_pages',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'self_serve_plan_type_monthly',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily information about how a given organization has adopted different Dagster features
        
        #### Raw SQL:
        ```sql
            {{
                config(
                    snowflake_warehouse="L_WAREHOUSE",
                    materialized='incremental',
                    unique_key=['organization_id', 'date'],
                    incremental_strategy='merge',
                    on_schema_change='append_new_columns'
                )
            }}
        
            with
        
            self_serve_plan_type as (
                select *
                from {{ ref("self_serve_plan_type_monthly") }}
            ),
        
            dates as (
                select date_day
                from {{ ref("time_spine") }}
            ),
        
            orgs as (
                select
                    organization_id,
                    organization_name,
                    is_active,
                    org_created_at,
                    base_plan_type
                from {{ ref("dim_organizations") }}
            ),
        
            org_dates as (
                select
                    orgs.organization_id,
                    orgs.organization_name,
                    orgs.is_active,
                    orgs.base_plan_type,
                    dates.date_day as date
                from orgs, dates
                where dates.date_day between orgs.org_created_at and current_date - 1
                    and date between date('{{ var("min_date") }}') - 1 and date('{{ var("max_date") }}')
            ),
        
            event_logs as (
                select *
                from {{ ref("cloud_product_event_logs") }}
                where date(created_at) between date('{{ var("min_date") }}') - 1 and date('{{ var("max_date") }}')
            ),
        
            asset_materializations as (
                select
                    organization_id,
                    date(created_at) as date,
                    count(*) as asset_materializations
                from event_logs
                where dagster_event_type = 'ASSET_MATERIALIZATION'
                group by all
            ),
        
            distinct_asset_materializations as (
                select
                    organization_id,
                    date(created_at) as date,
                    count(distinct asset_key) as distinct_assets_materialized
                from event_logs
                where dagster_event_type = 'ASSET_MATERIALIZATION'
                group by all
            ),
        
            assets as (
                select
                    replication_date as date,
                    organization_id,
                    count(distinct asset_key) as asset_count,
                    count(distinct group_name) as asset_group_count,
                    count(distinct case when freshness_policy::varchar is not null then asset_key end) as assets_with_freshness_policy_count,
                    count(distinct case when auto_materialize_policy::varchar is not null then asset_key end) as assets_with_automation_condition_count,
                    count(distinct case when array_size(object_keys(tags)) > 0 then asset_key end) as assets_with_tags_count,
                    count(distinct case when array_size(kinds) > 0 then asset_key end) as assets_with_kinds_count
                from {{ ref("code_location_assets") }}
                group by all
            ),
        
            repo_metadata as (
                select
                    replication_date as date,
                    organization_id,
                    sum(array_size(object_keys(utilized_env_vars))) as env_vars_count,
                from {{ ref("code_location_external_repo_metadata") }}
                group by all
            ),
        
            steps as (
                select 
                    organization_id,
                    date(end_time) as date,
                    count(*) as billable_steps
                from {{ ref("fct_steps") }}
                where is_billable_step and date(end_time) between date('{{ var("min_date") }}') - 1 and date('{{ var("max_date") }}')
                group by all
            ),
        
            asset_checks as (
                select
                    organization_id,
                    date(created_at) as date,
                    count(*) as asset_checks
                from event_logs
                where dagster_event_type = 'ASSET_CHECK_EVALUATION'
                group by all
            ),
        
            alerts as (
                select
                    organization_id,
                    date(created_at) as date,
                    count(*) as alerts_sent
                from event_logs
                where dagster_event_type = 'ALERT_SUCCESS'
                group by all
            ),
        
            runs as (
                select
                    organization_id,
                    date(ended_at) as date,
                    count(*) as runs_completed
                from {{ ref("fct_runs") }}
                where date between date('{{ var("min_date") }}') - 1 and date('{{ var("max_date") }}')
                group by all
            ),
        
            insights_pages as (
                select
                    organization_id,
                    date(timestamp) as date,
                    count(*) as insights_page_views,
                    count(distinct user_id) as unique_insights_viewers
                from {{ ref("segment_cloud_pages") }} p
                    left join {{ ref("dim_organizations") }} on split_part(replace(url, 'https://'), '.', 1) = organization_name
                where path like '%insights%'
                    and date between date('{{ var("min_date") }}') - 1 and date('{{ var("max_date") }}')
                group by all
            ),
        
            catalog_home_page_views as (
                select
                    organization_id,
                    date(timestamp) as date,
                    count(*) as catalog_home_page_views,
                    count(distinct user_id) as unique_catalog_home_page_viewers
                from {{ ref("segment_cloud_pages") }}
                    left join {{ ref("dim_organizations") }} on split_part(replace(url, 'https://'), '.', 1) = organization_name
                where specific_path like '%/catalog'
                group by all
            ),
        
            asset_health_page_views as (
                select
                    organization_id,
                    date(timestamp) as date,
                    count(*) as asset_health_page_views,
                    count(distinct user_id) as unique_asset_health_viewers
                from {{ ref("segment_cloud_pages") }}
                    left join {{ ref("dim_organizations") }} on split_part(replace(url, 'https://'), '.', 1) = organization_name
                where specific_path like '%/asset-health'
                group by all
            ),
        
            custom_roles as (
                select
                    relationship_created_at::date as date,
                    organization_id,
                    count(*) as custom_role_users_count
                from {{ ref("user_organizations") }}
                where role = 'CUSTOM' and not is_elementl_user and is_activated
                group by all
            )
        
            select
                org_dates.organization_id,
                org_dates.organization_name,
                org_dates.date,
                is_active,
                coalesce(self_serve_plan_type.base_plan_type, org_dates.base_plan_type) as plan_type,
                coalesce(asset_materializations, 0) as asset_materializations,
                coalesce(distinct_assets_materialized, 0) as distinct_assets_materialized,
                coalesce(asset_checks, 0) as asset_checks,
                coalesce(runs_completed, 0) as runs_completed,
                coalesce(alerts_sent, 0) as alerts_sent,
                coalesce(unique_insights_viewers, 0) as unique_insights_viewers,
                coalesce(unique_catalog_home_page_viewers, 0) as unique_catalog_home_page_viewers,
                coalesce(unique_asset_health_viewers, 0) as unique_asset_health_viewers,
                -- We only have replication data from 2024-08-14 onward
                case when org_dates.date >= '2024-08-14' then coalesce(asset_count, lag(asset_count) over (partition by org_dates.organization_id order by org_dates.date)) end as asset_count,
                case when org_dates.date >= '2024-08-14' then coalesce(assets_with_freshness_policy_count, lag(assets_with_freshness_policy_count) over (partition by org_dates.organization_id order by org_dates.date)) end as assets_with_freshness_policy_count,
                case when org_dates.date >= '2024-08-14' then coalesce(assets_with_automation_condition_count, lag(assets_with_automation_condition_count) over (partition by org_dates.organization_id order by org_dates.date)) end as assets_with_automation_condition_count,
                case when org_dates.date >= '2024-08-14' then coalesce(assets_with_tags_count, lag(assets_with_tags_count) over (partition by org_dates.organization_id order by org_dates.date)) end as assets_with_tags_count,
                case when org_dates.date >= '2024-08-14' then coalesce(assets_with_kinds_count, lag(assets_with_kinds_count) over (partition by org_dates.organization_id order by org_dates.date)) end as assets_with_kinds_count,
                case when org_dates.date >= '2024-08-14' then coalesce(env_vars_count, lag(env_vars_count) over (partition by org_dates.organization_id order by org_dates.date)) end as env_vars_count,
                coalesce(insights_page_views, 0) as insights_page_views,
                coalesce(catalog_home_page_views, 0) as catalog_home_page_views,
                coalesce(asset_health_page_views, 0) as asset_health_page_views,
                coalesce(billable_steps, 0) as billable_steps,
                coalesce(asset_materializations, 0) + coalesce(billable_steps, 0) as credits,
                coalesce(custom_role_users_count, 0) as custom_role_users_count
            from org_dates
                left join self_serve_plan_type on 
                    date_trunc(month, org_dates.date) = self_serve_plan_type.month_start_date
                    and org_dates.organization_id = self_serve_plan_type.organization_id
                left join asset_materializations on
                    org_dates.date = asset_materializations.date
                    and org_dates.organization_id = asset_materializations.organization_id
                left join distinct_asset_materializations on
                    org_dates.date = distinct_asset_materializations.date
                    and org_dates.organization_id = distinct_asset_materializations.organization_id
                left join assets on
                    org_dates.date = assets.date
                    and org_dates.organization_id = assets.organization_id
                left join asset_checks on
                    org_dates.date = asset_checks.date
                    and org_dates.organization_id = asset_checks.organization_id
                left join alerts on
                    org_dates.date = alerts.date
                    and org_dates.organization_id = alerts.organization_id
                left join runs on
                    org_dates.date = runs.date
                    and org_dates.organization_id = runs.organization_id
                left join steps on
                    org_dates.date = steps.date
                    and org_dates.organization_id = steps.organization_id
                left join insights_pages on
                    org_dates.date = insights_pages.date
                    and org_dates.organization_id = insights_pages.organization_id
                left join catalog_home_page_views on
                    org_dates.date = catalog_home_page_views.date
                    and org_dates.organization_id = catalog_home_page_views.organization_id
                left join asset_health_page_views on
                    org_dates.date = asset_health_page_views.date
                    and org_dates.organization_id = asset_health_page_views.organization_id
                left join repo_metadata on
                    org_dates.date = repo_metadata.date
                    and org_dates.organization_id = repo_metadata.organization_id
                left join custom_roles on
                    org_dates.date = custom_roles.date
                    and org_dates.organization_id = custom_roles.organization_id
        ```
      ''',
      'group_name': 'mart_product',
      'key': 'sandbox//organization_adoption_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.organization_adoption_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organization_adoption_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATION_ADOPTION_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'maps_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Describes the conversion of an organization to a paying customer
        
        #### Raw SQL:
        ```sql
            with
        
            organizations as (
                select *
                from {{ ref("cloud_product_organizations") }}
            ),
        
            map as (
                select *
                from {{ ref("maps_organizations") }}
            ),
        
            org_info as (
                select
                    organizations.organization_id,
                    organizations.organization_name,
                    organizations.created_at,
                    organizations.plan_type,
                    map.stripe_customer_id
                from organizations
                left join map
                    using (organization_id)
                where not organizations.is_internal
            ),
        
            invoices as (
                select *
                from {{ ref("stripe_invoices") }}
                where invoice_total > 0
            ),
        
            subscriptions as (
                select *
                from {{ ref("stripe_subscriptions") }}
            ),
        
            customers_first_trial as (
                select
                    customer_id,
                    trial_start as first_trial_start,
                    trial_end as first_trial_end
                from subscriptions
                qualify row_number() over (partition by customer_id order by trial_start) = 1
            )
        
        
            select
                org_info.organization_id,
                org_info.organization_name,
                org_info.created_at,
                org_info.plan_type,
                customers_first_trial.first_trial_start,
                customers_first_trial.first_trial_end,
                datediff(day, created_at, min(invoice_created_at)) as days_to_convert,
                count(invoice_id) > 0 as is_converted
            from org_info
            left join invoices on org_info.stripe_customer_id = invoices.customer_id
            left join customers_first_trial on org_info.stripe_customer_id = customers_first_trial.customer_id
            group by all
        ```
      ''',
      'group_name': 'mart_product',
      'key': 'sandbox//organization_conversion_info',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The name of the organization',
              name='organization_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Timestamp the organization was created',
              name='created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Organization's plan type",
              name='plan_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Start timestamp of organization's first trial period",
              name='first_trial_start',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="End timestamp of organization's first trial period",
              name='first_trial_end',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total days from organization creation to conversion',
              name='days_to_convert',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='True if the organization has converted to a paying customer',
              name='is_converted',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.organization_conversion_info',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organization_conversion_info',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATION_CONVERSION_INFO',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Libraries and their versions for every organization
        
        #### Raw SQL:
        ```sql
            with
        
            repo_locations_data as (
                select *
                from {{ ref("stg_cloud_product__repository_locations_data") }}
            ),
        
            organizations as (
                select
                    organization_id,
                    organization_name
                from {{ ref('stg_cloud_product__organizations') }}
            )
        
            select
                organization_id,
                organization_name,
                key as library,
                max(replace(value, '"')) as version
            from
                repo_locations_data
            inner join organizations using (organization_id),
                lateral flatten(input => repo_locations_data.dagster_library_versions)
            group by all
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//organization_library_versions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.organization_library_versions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organization_library_versions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATION_LIBRARY_VERSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily information about the Dagster-related libraries that an organization has installed
        
        #### Raw SQL:
        ```sql
            with
        
            dates as (
                select date_day
                from {{ ref('time_spine') }}
            ),
        
            orgs as (
                select
                    organization_id,
                    organization_name,
                    is_active,
                    org_created_at,
                    base_plan_type
                from {{ ref('dim_organizations') }}
            ),
        
            org_dates as (
                select
                    orgs.organization_id,
                    orgs.organization_name,
                    orgs.is_active,
                    orgs.base_plan_type,
                    dates.date_day as date
                from orgs, dates
                where dates.date_day between orgs.org_created_at and current_date - 1
            ),
        
            repo_locations_data as (
                select *
                from {{ ref('cloud_product_repository_locations_data') }}
            ),
        
            organizations as (
                select
                    organization_id,
                    organization_name
                from {{ ref('cloud_product_organizations') }}
            ),
        
            org_library_dates as (
                select
                    organization_id,
                    updated_at::date as date,
                    dagster_library_versions
                from
                    repo_locations_data
                inner join organizations using (organization_id)
            ),
        
            grouped_library_versions as (
                select
                    date,
                    organization_id,
                    organization_name,
                    -- If we don't have a library version set for a given day, we should use the most recent one we have
                    coalesce(dagster_library_versions, lag(dagster_library_versions) ignore nulls over (partition by organization_id order by date)) as dagster_library_versions
                from org_dates
                    full outer join org_library_dates using (organization_id, date)
            )
        
            select
                date,
                organization_id,
                organization_name,
                key as library,
                value::varchar as version
            from grouped_library_versions,
                lateral flatten(input=>dagster_library_versions)
        ```
      ''',
      'group_name': 'mart_product',
      'key': 'sandbox//organization_library_versions_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.organization_library_versions_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organization_library_versions_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATION_LIBRARY_VERSIONS_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'maps_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'onboarding_events',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dates of milestones for a given Dagster organization customer
        
        #### Raw SQL:
        ```sql
            {%
                set milestones = [
                    "LAUNCHED_AGENT",
                    "LAUNCHED_RUN",
                    "LOADED_CODE",
                ]
            %}
        
            with
        
            orgs as (
                select
                    organization_id,
                    organization_name,
                    plan_type
                from {{ ref ('cloud_product_organizations') }}
            ),
        
            maps as (
                select
                    organization_id,
                    stripe_customer_id
                from {{ ref('maps_organizations') }}
            ),
        
            org_customers as (
                select
                    orgs.organization_id,
                    orgs.organization_name,
                    orgs.plan_type,
                    maps.stripe_customer_id
                from orgs
                left join maps using (organization_id)
            ),
        
            trial_dates as (
                select
                    customer_id as stripe_customer_id,
                    trial_start,
                    trial_end
                from {{ ref('stripe_subscriptions') }}
                qualify row_number() over (partition by stripe_customer_id order by created_at) = 1
            ),
        
            onboarding_events as (
                select
                    organization_id,
                    entry_key,
                    event_created_day
                from {{ ref('onboarding_events') }}
                where status = 'COMPLETE'
            ),
        
            onboard_events_wide as (
                select
                    organization_id,
                {% for milestone in milestones %}
                    {{ milestone }}{% if not loop.last %},{% endif %}
                {% endfor %}
                from onboarding_events
                pivot (
                    min(event_created_day) for entry_key in (
                        {% for milestone in milestones %}
                            '{{ milestone }}'{% if not loop.last %},{% endif %}
                        {% endfor %}
                    )
                ) as d (organization_id, {{ ", ".join(milestones) }})
            )
        
            select
                organization_id,
                organization_name,
                plan_type,
                trial_start,
                trial_end,
            {% for milestone in milestones %}
                {{ milestone }}{% if not loop.last %},{% endif %}
            {% endfor %}
            from org_customers
            left join trial_dates using (stripe_customer_id)
            left join onboard_events_wide using (organization_id)
        ```
      ''',
      'group_name': 'mart_product',
      'key': 'sandbox//organization_milestones',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.organization_milestones',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organization_milestones',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATION_MILESTONES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_asset_materializations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_customer_info',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_event_logs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_steps',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily usage metrics for every Dagster+ organization
        
        #### Raw SQL:
        ```sql
            {% set start_date = '2023-06-01' %}
        
            with
        
            events as (
                select
                    event_log_id,
                    created_at,
                    organization_id,
                    dagster_event_type
                from {{ ref('cloud_product_event_logs') }}
                where
                    created_at between '{{ start_date }}' and current_date
            ),
        
            dates as (
                select date_day
                from {{ ref('time_spine') }}
                where date_day between '{{ start_date }}' and current_date
            ),
        
            orgs as (
                select
                    organization_id,
                    organization_name,
                    is_active,
                    base_plan_type
                from {{ ref('dim_organizations') }}
            ),
        
            org_dates as (
                select
                    orgs.organization_id,
                    orgs.organization_name,
                    orgs.is_active,
                    orgs.base_plan_type,
                    dates.date_day as date
                from orgs, dates
            ),
        
            materializations as (
                select
                    date(timestamp) as date,
                    organization_id,
                    count(*) as materializations
                from {{ ref('cloud_product_asset_materializations') }}
                where timestamp between '{{ start_date }}' and current_date
                group by date, organization_id
            ),
        
            steps as (
                select
                    date(end_time) as date,
                    organization_id,
                    count(*) as steps,
                    count_if(is_billable_step) as billable_steps
                from {{ ref('fct_steps') }}
                where end_time between '{{ start_date }}' and current_date
                group by date, organization_id
            ),
        
            runs as (
                select
                    date(ended_at) as date,
                    organization_id,
                    count(*) as runs
                from {{ ref('fct_runs') }}
                where ended_at between '{{ start_date }}' and current_date
                group by date, organization_id
            ),
        
            event_metrics as (
                select
                    date(created_at) as date,
                    organization_id,
                    count_if(dagster_event_type = 'ASSET_CHECK_EVALUATION') as asset_check_evalutations,
                    count_if(dagster_event_type = 'ALERT_SUCCESS') as alerts_sent
                from events
                group by date, organization_id
            ),
        
            historical_plan_type as (
                select
                    organization_id,
                    date(date_trunc(month, invoice_created_at)) as invoice_month,
                    i.base_plan_type
                from {{ ref('stripe_invoices') }} as i
                left join
                    {{ ref('cloud_product_customer_info') }} as ci
                    on i.customer_id = ci.stripe_customer_id
                qualify
                    row_number() over (partition by organization_id, invoice_month order by invoice_created_at)
                    = 1
            )
        
            select
                date,
                org_dates.organization_id,
                organization_name,
                is_active,
                org_dates.base_plan_type,
                zeroifnull(materializations) as materializations,
                zeroifnull(steps) as steps,
                zeroifnull(billable_steps) as billable_steps,
                zeroifnull(materializations) + zeroifnull(billable_steps) as dagster_credits,
                zeroifnull(runs) as runs,
                zeroifnull(asset_check_evalutations) as asset_check_evalutations,
                zeroifnull(alerts_sent) as alerts_sent,
                coalesce(historical_plan_type.base_plan_type, org_dates.base_plan_type)
                    as historical_base_plan_type
            from org_dates
            left join materializations using (organization_id, date)
            left join steps using (organization_id, date)
            left join runs using (organization_id, date)
            left join event_metrics using (organization_id, date)
            left join historical_plan_type on
                org_dates.organization_id = historical_plan_type.organization_id
                and date_trunc(month, org_dates.date) = historical_plan_type.invoice_month
        ```
      ''',
      'group_name': 'metrics_cloud_product',
      'key': 'sandbox//organization_usage_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.organization_usage_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organization_usage_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATION_USAGE_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per organization in Dagster+
        
        #### Raw SQL:
        ```sql
            with organizations as (
        
                select * from {{ ref('dim_organizations') }}
            )
        
            select * from organizations
        ```
      ''',
      'group_name': 'business',
      'key': 'sandbox//organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the organization in Dagster+',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the organization',
              name='organization_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Related Salesforce account identifier',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the organization was created',
              name='created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The plan type of the organization without a version number',
              name='base_plan_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full plan type of the organization',
              name='plan_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Categorization of organization as either 'SELF_SERVE' or 'ENTERPRISE'",
              name='self_serve_or_enterprise',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the organization is internal to Elementl/Dagster',
              name='is_internal',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the organization has SAML SSO enabled',
              name='has_saml_sso',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current status of the organization',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the organization is active and not internal',
              name='is_active',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Timestamp of the last user login for the organization',
              name='last_user_login',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Timestamp of the last run in the organization',
              name='last_run_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the related Salesforce account',
              name='salesforce_account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Type of the related Salesforce account',
              name='salesforce_account_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Status of the related Salesforce account',
              name='salesforce_account_status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the related Stripe customer',
              name='stripe_customer_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Date when the organization's trial started",
              name='trial_start',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Date when the organization's trial ended",
              name='trial_end',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Amount of the organization's last invoice",
              name='last_invoice_amount',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description="Date of the organization's last invoice",
              name='last_invoice_date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of active hybrid deployments for the organization',
              name='hybrid_deployment_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of active serverless deployments for the organization',
              name='serverless_deployment_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of admin users in the organization',
              name='admin_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of editor users in the organization',
              name='editor_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of viewer users in the organization',
              name='viewer_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of launcher users in the organization',
              name='launcher_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of users with custom roles in the organization',
              name='custom_role_count',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total number of seats used in the organization',
              name='total_seats_count',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_event_logs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One line per day per organization in Dagster+, with organization details and daily event metrics
        
        #### Raw SQL:
        ```sql
            {{
                config(
                    materialized='incremental',
                    unique_key=['date_day', 'organization_id'],
                    incremental_strategy='merge',
                    on_schema_change='append_new_columns',
                )
            }}
        
            with 
            -- Organization details with creation date - always get all organizations
            organizations as (
                select
                    organization_id,
                    organization_name,
                    org_created_at,
                    status,
                    plan_type,
                    base_plan_type,
                    is_internal,
                    has_saml_sso,
                    is_active,
                    salesforce_account_id,
                    salesforce_account_type,
                    salesforce_account_status,
                    stripe_customer_id,
                    last_user_login,
                    last_run_at
                from {{ ref('dim_organizations') }}
                -- Always get all organizations without incremental filtering
            ),
        
            -- Time spine for all days 
            time_spine as (
                select date_day
                from {{ ref('time_spine') }}
                where date_day < current_date
                {% if is_incremental() %}
                -- For incremental loads, we only need to process dates in the specified range
                and date_day <= '{{ var('max_date') }}'
                and date_day >= '{{ var('min_date') }}'
                {% endif %}
            ),
        
            -- Join organizations with all dates since their creation
            org_dates as (
                select
                    o.organization_id,
                    o.organization_name,
                    o.org_created_at,
                    o.status,
                    o.plan_type,
                    o.base_plan_type,
                    o.is_internal,
                    o.has_saml_sso,
                    o.is_active,
                    o.salesforce_account_id,
                    o.salesforce_account_type,
                    o.salesforce_account_status,
                    o.stripe_customer_id,
                    o.last_user_login,
                    o.last_run_at,
                    t.date_day
                from organizations o
                cross join time_spine t
                where t.date_day >= date(o.org_created_at)
            ),
        
            -- Event logs aggregated by day and organization
            event_counts as (
                select
                    date(created_at) as event_date,
                    organization_id,
                    count(*) as total_events,
                    count_if(upper(dagster_event_type) = 'PIPELINE_START') as pipeline_starts,
                    count_if(upper(dagster_event_type) = 'PIPELINE_SUCCESS') as pipeline_successes,
                    count_if(upper(dagster_event_type) = 'PIPELINE_FAILURE') as pipeline_failures,
                    count_if(upper(dagster_event_type) = 'PIPELINE_CANCELED') as pipeline_cancellations,
                    count_if(upper(dagster_event_type) = 'ASSET_MATERIALIZATION') as asset_materializations,
                    count_if(upper(dagster_event_type) = 'ASSET_OBSERVATION') as asset_observations,
                    count_if(upper(dagster_event_type) = 'ASSET_CHECK_EVALUATION') as asset_check_evaluations,
                    count_if(upper(dagster_event_type) = 'ALERT_SUCCESS') as alerts_sent
                from {{ ref('cloud_product_event_logs') }}
                {% if is_incremental() %}
                where date(created_at) >= '{{ var('min_date') }}'
                  and date(created_at) <= '{{ var('max_date') }}'
                {% endif %}
                group by 1, 2
            )
        
            select
                od.date_day,
                od.organization_id,
                od.organization_name,
                od.org_created_at,
                od.status,
                od.plan_type,
                od.base_plan_type, 
                od.is_internal,
                od.has_saml_sso,
                od.is_active,
                od.salesforce_account_id,
                od.salesforce_account_type,
                od.salesforce_account_status,
                od.stripe_customer_id,
                od.last_user_login,
                od.last_run_at,
                datediff(day, date(od.org_created_at), od.date_day) as days_since_creation,
            
                -- Event metrics for the day
                coalesce(ec.total_events, 0) as total_system_events,
                coalesce(ec.pipeline_starts, 0) as pipeline_starts,
                coalesce(ec.pipeline_successes, 0) as pipeline_successes,
                coalesce(ec.pipeline_failures, 0) as pipeline_failures,
                coalesce(ec.pipeline_cancellations, 0) as pipeline_cancellations,
                coalesce(ec.asset_materializations, 0) as asset_materializations,
                coalesce(ec.asset_observations, 0) as asset_observations,
                coalesce(ec.asset_check_evaluations, 0) as asset_check_evaluations, 
                coalesce(ec.alerts_sent, 0) as alerts_sent
            from org_dates od
            left join event_counts ec
                on od.organization_id = ec.organization_id
                and od.date_day = ec.event_date
                and ec.event_date >= date(od.org_created_at)
            {% if is_incremental() %}
            where od.date_day <= '{{ var('max_date') }}'
            and od.date_day >= '{{ var('min_date') }}'
            {% endif %}
        ```
      ''',
      'group_name': 'business_by_day',
      'key': 'sandbox//organizations_by_day',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date for which this organization data snapshot applies',
              name='date_day',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the organization in Dagster+',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the organization',
              name='organization_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date when the organization was created',
              name='org_created_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Current status of the organization',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Subscription plan type of the organization',
              name='plan_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Base subscription plan type of the organization',
              name='base_plan_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if this is an internal organization',
              name='is_internal',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the organization has SAML SSO enabled',
              name='has_saml_sso',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Boolean indicating if the organization is currently active',
              name='is_active',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Related account identifier in Salesforce',
              name='salesforce_account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Type of the related account in Salesforce',
              name='salesforce_account_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Status of the related account in Salesforce',
              name='salesforce_account_status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Identifier for the customer in Stripe',
              name='stripe_customer_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the last user login for this organization',
              name='last_user_login',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the last pipeline/asset run for this organization',
              name='last_run_at',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of days between organization creation and the snapshot date',
              name='days_since_creation',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Total number of system events recorded for the organization on this date',
              name='total_system_events',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of pipeline start events recorded for the organization on this date',
              name='pipeline_starts',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of pipeline success events recorded for the organization on this date',
              name='pipeline_successes',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of pipeline failure events recorded for the organization on this date',
              name='pipeline_failures',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of pipeline cancellation events recorded for the organization on this date',
              name='pipeline_cancellations',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of asset materialization events recorded for the organization on this date',
              name='asset_materializations',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of asset observation events recorded for the organization on this date',
              name='asset_observations',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of asset check evaluation events recorded for the organization on this date',
              name='asset_check_evaluations',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Number of alert success events recorded for the organization on this date',
              name='alerts_sent',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.organizations_by_day',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.organizations_by_day',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ORGANIZATIONS_BY_DAY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'instance_type_priority',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'telemetry_events',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily metric table describing OSS telemetry events for a given instance
        
        #### Raw SQL:
        ```sql
            {% set actions_dict = {
                "action = 'step_start_event'" : "step_started",
                "action = 'sensor_run_created'" : "sensor_run_created",
                "action = 'scheduled_run_created'" : "scheduled_run_created",
                "action = 'backfill_run_created'": "backfill_run_created",
                "action = 'daemon_alive'" : "daemon_alive",
                "action = 'start_dagit_webserver'" : "webserver_started",
                "action = 'graphql_query_completed'" : "gql_query_completed",
                """
                action = 'graphql_query_completed' and 
                metadata:operationName = 'PipelineRunsRootQuery' or 
                action = 'LAUNCH_RUN'
                """: "run_launched_from_webserver",
            } -%}
        
            with
        
            instance_metrics as (
                select
                    reporting_date,
                    instance_id,
                    min(instance_priority) as instance_priority,
                    max(dagster_version_raw) as dagster_version_raw,
                    max(dagster_version_parsed) as dagster_version_parsed,
                    {% for action_condition, action_name in actions_dict.items() %}
                        sum(case when {{ action_condition }} then 1 else 0 end)
                            as {{ action_name }}_count,
                    {% endfor %}
                    (
                        step_started_count >= 10
                        or sensor_run_created_count >= 1
                        or scheduled_run_created_count >= 1
                        or backfill_run_created_count >= 1
                    ) as is_active
                from {{ ref('telemetry_events') }}
                group by all
            )
        
            select
                reporting_date,
                instance_id,
                instance_priority,
                instance_type,
                dagster_version_raw,
                dagster_version_parsed,
                {% for action_condition, action_name in actions_dict.items() %}
                    {{ action_name }}_count,
                {% endfor %}
                is_active
            from instance_metrics
            inner join {{ ref('instance_type_priority') }} using (instance_priority)
        ```
      ''',
      'group_name': 'metrics_telemetry',
      'key': 'sandbox//oss_instance_events_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.oss_instance_events_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.oss_instance_events_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OSS_INSTANCE_EVENTS_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'instance_type_priority',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'oss_instance_events_daily',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Weekly metric table describing OSS telemetry events for a given instance
        
        #### Raw SQL:
        ```sql
            {% set metrics_list = [
                "step_started",
                "sensor_run_created",
                "scheduled_run_created",
                "backfill_run_created",
                "daemon_alive",
                "webserver_started",
                "gql_query_completed",
                "run_launched_from_webserver",
            ] -%}
        
            with
        
            instance_metrics as (
                select
                    date_trunc(week, reporting_date) as reporting_week,
                    instance_id,
                    min(instance_priority) as instance_priority,
                    max(dagster_version_raw) as dagster_version_raw,
                    max(dagster_version_parsed) as dagster_version_parsed,
                    {% for metric in metrics_list %}
                        sum({{ metric }}_count) as {{ metric }}_count,
                    {% endfor %}
                    count_if(is_active) as active_days_count
                from {{ ref('oss_instance_events_daily') }}
                group by all
            )
        
            select
                reporting_week,
                instance_id,
                instance_priority,
                instance_type,
                dagster_version_raw,
                dagster_version_parsed,
                {% for metric in metrics_list %}
                    {{ metric }}_count,
                {% endfor %}
                active_days_count >= 5 and instance_type = 'SERVER' as is_production
            from instance_metrics
            inner join {{ ref('instance_type_priority') }} using (instance_priority)
        ```
      ''',
      'group_name': 'metrics_telemetry',
      'key': 'sandbox//oss_instance_events_weekly',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.oss_instance_events_weekly',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.oss_instance_events_weekly',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OSS_INSTANCE_EVENTS_WEEKLY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'telemetry_events',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily table that contains the number of unique instances and storage ids by Platform.
        
        #### Raw SQL:
        ```sql
            select
        
                reporting_date,
                os_platform,
                count(distinct instance_id) as count_instances,
                count(distinct run_storage_id) as count_storage_ids
        
            from {{ ref('telemetry_events') }}
            where not is_known_ci_env
            group by all
        ```
      ''',
      'group_name': 'metrics_telemetry',
      'key': 'sandbox//oss_instances_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.oss_instances_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.oss_instances_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OSS_INSTANCES_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__account',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__data_connection',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per Account in Outreach
        
        #### Raw SQL:
        ```sql
            with accounts as (
        
                select * from {{ ref('stg_outreach__account') }}
            ),
        
            external_ids as (
        
                select * from {{ ref('stg_outreach__data_connection') }}
            ),
        
            --- Note: initially, there were only salesforce ids in this table, but this is just to be safe
            salesforce_ids as (
        
                select * from external_ids
                where external_system_name = 'salesforce'
                and external_data_type = 'Account'
            ),
        
            --- Note: we usually do not do joins at this layer. However, the external ids will be reusable when done at this level
            joined as (
                select 
                    accounts.account_id,
                    accounts.account_name,
                    accounts.type,
                    salesforce_ids.external_id as salesforce_account_id,
                    accounts.buyer_intent_score,
                    accounts.company_type,
                    accounts.created_at,
                    accounts.custom_id,
                    accounts.description,
                    accounts.domain,
                    accounts.followers,
                    accounts.founded_at,
                    accounts.industry,
                    accounts.linked_in_employees,
                    accounts.linked_in_url,
                    accounts.locality,
                    accounts.named,
                    accounts.natural_name,
                    accounts.number_of_employees,
                    accounts.sharing_team_id,
                    accounts.touched_at,
                    accounts.updated_at,
                    accounts.website_url,
                    accounts.relationship_creator_id,
                    accounts.relationship_owner_id,
                    accounts.relationship_updater_id 
                from accounts
                left join salesforce_ids on accounts.account_id = salesforce_ids.outreach_parent_id
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'model_outreach',
      'key': 'sandbox//outreach_accounts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.outreach_accounts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.outreach_accounts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OUTREACH_ACCOUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__event',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per event logged in Outreach
        
        #### Raw SQL:
        ```sql
            with events as (
        
                select * from {{ ref('stg_outreach__event') }}
            )
        
            select * from events
        ```
      ''',
      'group_name': 'model_outreach',
      'key': 'sandbox//outreach_events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.outreach_events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.outreach_events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OUTREACH_EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__mailing',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per outbound email. Please note that there are multiple states in this table including delivered, bounced, failed, replied, etc
        
        #### Raw SQL:
        ```sql
            with mailings as (
        
                select * from {{ ref('stg_outreach__mailing') }}
            )
        
            select * from mailings
        ```
      ''',
      'group_name': 'model_outreach',
      'key': 'sandbox//outreach_mailings',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.outreach_mailings',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.outreach_mailings',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OUTREACH_MAILINGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__data_connection',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__email_address',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__prospect',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per contact emailed in Outreach
        
        #### Raw SQL:
        ```sql
            with prospect as (
        
                select * from {{ ref('stg_outreach__prospect') }}
            ),
        
            email_addresses as (
        
                select * from {{ ref('stg_outreach__email_address') }}
            ),
        
            external_ids as (
        
                select * from {{ ref('stg_outreach__data_connection') }}
            ),
        
            most_recent_email_address as (
        
                select * from email_addresses
                qualify row_number() over (partition by relationship_prospect_id order by created_at desc) =1
            ),
        
            --- Note: initially, there were only salesforce ids in this table, but this is just to be safe
            salesforce_ids as (
        
                select * from external_ids
                where external_system_name = 'salesforce'
                and external_data_type = 'Contact'
            ),
        
            --- Note: we usually do not do joins at this layer. However, the email addresses and external ids will be reusable when done at this level
            joined as (
        
                select 
                    prospect.prospect_id, 
                    prospect.created_at, 
                    prospect.first_name, 
                    prospect.last_name,  
                    prospect.name, 
                    most_recent_email_address.email,
                    most_recent_email_address.email_address_id,
                    salesforce_ids.external_id as salesforce_contact_id,
                    salesforce_ids.external_data_type as salesforce_data_type,
                    prospect.company, 
                    prospect.type, 
                    prospect.added_at, 
                    prospect.available_at, 
                    prospect.calls_opted_at, 
                    prospect.date_of_birth, 
                    prospect.emails_opted_at, 
                    prospect.engaged_at, 
                    prospect.graduation_date, 
                    prospect.job_start_date, 
                    prospect.opted_out_at, 
                    prospect.touched_at, 
                    prospect.trashed_at, 
                    prospect.updated_at, 
                    prospect.address_city, 
                    prospect.address_country, 
                    prospect.address_state, 
                    prospect.address_street, 
                    prospect.address_street_2, 
                    prospect.address_zip, 
                    prospect.angel_list_url, 
                    prospect.calls_opt_status, 
                    prospect.campaign_name, 
                    prospect.degree, 
                    prospect.emails_opt_status, 
                    prospect.event_name, 
                    {# prospect.external_owner, --- Note: we are concerned that these may be confused for other external id fields, specifically Salesforce
                    prospect.external_source, 
                    prospect.external_id,  #}
                    prospect.facebook_url, 
                    prospect.gender, 
                    prospect.github_url, 
                    prospect.github_username, 
                    prospect.google_plus_url, 
                    prospect.linked_in_id, 
                    prospect.linked_in_slug, 
                    prospect.linked_in_url, 
                    prospect.middle_name, 
                    prospect.nickname, 
                    prospect.occupation, 
                    prospect.personal_note_1, 
                    prospect.personal_note_2, 
                    prospect.preferred_contact, 
                    prospect.quora_url, 
                    prospect.region, 
                    prospect.school, 
                    prospect.sharing_team_id, 
                    prospect.source, 
                    prospect.specialties, 
                    prospect.stack_overflow_id, 
                    prospect.stack_overflow_url, 
                    prospect.time_zone, 
                    prospect.time_zone_iana, 
                    prospect.time_zone_inferred, 
                    prospect.title, 
                    prospect.twitter_url, 
                    prospect.twitter_username, 
                    prospect.website_url_1, 
                    prospect.website_url_2, 
                    prospect.website_url_3, 
                    prospect.click_count, 
                    prospect.linked_in_employees, 
                    prospect.linked_in_connections, 
                    prospect.open_count, 
                    prospect.reply_count, 
                    prospect.call_opted_out, 
                    prospect.email_opted_out, 
                    prospect.opted_out, 
                    prospect.engaged_score, 
                    prospect.score, 
                    prospect.relationship_creator_id, 
                    prospect.relationship_owner_id, 
                    prospect.relationship_account_id, 
                    prospect.relationship_stage_id, 
                    prospect.relationship_persona_id, 
                    prospect.relationship_updater_id, 
                    prospect.email_contacts, 
                    prospect.updater_id, 
                    prospect.company_linked_in_employees, 
                    prospect.enrichable, 
                    prospect.updater_type, 
                from prospect
                left join most_recent_email_address on prospect.prospect_id = most_recent_email_address.relationship_prospect_id
                left join salesforce_ids on prospect.prospect_id = salesforce_ids.outreach_parent_id
        
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'model_outreach',
      'key': 'sandbox//outreach_prospects',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='prospect_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.outreach_prospects',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.outreach_prospects',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OUTREACH_PROSPECTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_outreach__sequence',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        One row per sequence in Outreach
        
        #### Raw SQL:
        ```sql
            with mailings as (
        
                select * from {{ ref('stg_outreach__sequence') }}
            )
        
            select * from mailings
        ```
      ''',
      'group_name': 'model_outreach',
      'key': 'sandbox//outreach_sequences',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.outreach_sequences',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.outreach_sequences',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/OUTREACH_SEQUENCES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contracts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Product Engagement model, which is used for the Customer Health metric. This contains
        metrics on whether or not an organization has run five successive runs in a row.
        
        
        #### Raw SQL:
        ```sql
            /* This is a SQL query that will return the organization_id of any organization
               that has had five successful runs in a row. It uses the match_recognize
               function to match patterns in the data.
        
               Incredibly, this runs in 15 seconds on 30 million rows, which justifies
               the complexity of the query vs self-joins.
               https://docs.snowflake.com/en/sql-reference/functions/match_recognize.html
        
               An active organization is defined as any organization that has had at least
               five successful runs in a row at least once. */
        
            /* First, we create a table of all successful runs for each organization,
               and truncate dates. Distinct reduces the number of rows to one per
               organization per day. */
        
            with contracts as ( 
                select * from {{ ref('salesforce_contracts') }}
            ),
        
            accounts as (
                select * from {{ ref('salesforce_accounts') }}
            ),
        
            opportunities as (
                select * from {{ ref('salesforce_opportunities') }}
            ),
        
            runs as (
                select * from {{ ref('fct_runs') }}
            ),
        
            organizations as (
                select * from {{ ref('dim_organizations') }}
            ),
        
            account_organizations as (
                select * from {{ ref('salesforce_organizations') }}
            ),
        
            -- The primary org relationship doesn't always exist in the organizations table in SFDC
            account_org_mapping as (
                select
                    account_id,
                    organization_id
                from account_organizations
        
                union
        
                select
                    account_id,
                    organization_id
                from accounts
                where organization_id is not null
            ),
        
            successive_runs as (
                select distinct
                    organization_id,
                    ended_at::date as end_dt,
                    lead(end_dt) over (partition by organization_id order by end_dt) as lead_dt
                from runs
                where run_status = 'SUCCESS'
                -- We only want runs that end on a different day than the previous run
                qualify end_dt != lead_dt 
            ),
        
            run_dates as (
                select distinct
                    organization_id,
                    start_date as successive_run_start_date,
                    end_date as successive_run_end_date
                from successive_runs
                match_recognize (
                    partition by organization_id
                    order by end_dt
                    measures
                    match_number() as match_number,
                    first(end_dt) as start_date,
                    last(end_dt) as end_date,
                    count(*) as rows_in_sequence
                    all rows per match
                    pattern (success { 4 })
                    define success as datediff('day', (end_dt), lead(end_dt)) = 1
                )
            ),
        
        
            /* We only want to look at engagement metrics for the first contract for a customer. 
            We assume renewed customers are already engaged. We find the first contract using the subscription_index column.
            We also remove contracts that have not yet started.
            */
            new_subscriptions as (
                select 
        
                    org.organization_id,
                    org.organization_name,
                    a.account_name,
                    a.account_status,
                    c.arr,
                    cloud_credits_contracted,
                    contract_term,
                    contract_start_date,
                    contract_end_date,
                    datediff('days', contract_start_date, contract_end_date) as contract_length,
                    launcher_seats,
                    pricing_model,
                    contract_status,
                    row_number() over(
                        partition by org.organization_id order by contract_start_date
                    ) as subscription_index
        
                from contracts c
                join accounts a on c.account_id = a.account_id
                join opportunities opp on opp.opportunity_id = c.opportunity_id
                join account_org_mapping ao on ao.account_id = a.account_id
                join organizations org on 
                    ao.organization_id = org.organization_id
                    and contract_start_date < current_date()
                where opp.opportunity_type = 'New Business'
                qualify subscription_index = 1
                order by org.organization_id, subscription_index
            ),
        
            /* An engaged customer is defined as a customer who had five successive runs within 90 days of the contract start date */
            engaged as (
        
                select distinct
        
                    new_subscriptions.organization_id,
                    organization_name,
                    arr,
                    cloud_credits_contracted,
                    contract_start_date,
                    contract_end_date,
                    contract_term,
                    pricing_model,
                    contract_status,
                    /* This is the date 90 days after the contract start date. Five runs must have been completed by this date. */
                    dateadd('days', 90, contract_start_date) as engagement_marker_date,
                    min(successive_run_end_date) over(partition by new_subscriptions.organization_id) as first_successive_run_end_date
        
                from new_subscriptions
                left join run_dates on
                    run_dates.successive_run_start_date between contract_start_date and contract_end_date
                    and new_subscriptions.organization_id = run_dates.organization_id
                order by 1 
            ),
        
            final as (
        
                select
        
                organization_id,
                organization_name,
                arr,
                cloud_credits_contracted,
                contract_start_date,
                contract_end_date,
                contract_term,
                pricing_model,
                first_successive_run_end_date,
                engagement_marker_date,
                iff(first_successive_run_end_date <= engagement_marker_date, true, false) as is_90day_activated
        
                from engaged
            )
        
        
            select * from final
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//product_engagement',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.product_engagement',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.product_engagement',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/PRODUCT_ENGAGEMENT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_pylon__pylon_issues',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Support issues from Pylon
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_pylon__pylon_issues') }}
        ```
      ''',
      'group_name': 'model_pylon',
      'key': 'sandbox//pylon_issues',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.pylon_issues',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.pylon_issues',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/PYLON_ISSUES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_pypi__weekly_downloads',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Weekly download counts for Dagster packages from PyPI
        
        #### Raw SQL:
        ```sql
            select
        
                week,
                package,
                num_downloads
        
            from {{ ref('stg_pypi__weekly_downloads') }}
        ```
      ''',
      'group_name': 'metrics_pypi',
      'key': 'sandbox//pypi_downloads_weekly',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.pypi_downloads_weekly',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.pypi_downloads_weekly',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/PYPI_DOWNLOADS_WEEKLY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'reddit_ads_ad_groups',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'reddit_ads_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_reddit_ads__ad_group_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Reddit ad group performance metrics
        
        #### Raw SQL:
        ```sql
            with ad_group_report as (
        
                select * from {{ ref('stg_reddit_ads__ad_group_report') }}
            ),
        
            ad_groups as (
        
                select * from {{ ref('reddit_ads_ad_groups') }}
            ),
        
            campaigns as (
        
                select * from {{ ref('reddit_ads_campaigns') }}
            ),
        
            final as (
        
                select
                    ad_groups.campaign_id,
                    campaigns.campaign_name,   
                    ad_group_report.ad_group_id,
                    ad_groups.ad_group_name,
                    ad_group_report.date,
                    sum(ad_group_report.impressions) as impressions,
                    sum(ad_group_report.clicks) as clicks,
                    sum(ad_group_report.spend) as spend
                from ad_group_report
                left join ad_groups on ad_group_report.ad_group_id = ad_groups.ad_group_id
                left join campaigns on ad_groups.campaign_id = campaigns.campaign_id
                group by all
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_reddit_ads',
      'key': 'sandbox//reddit_ads_ad_group_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.reddit_ads_ad_group_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.reddit_ads_ad_group_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/REDDIT_ADS_AD_GROUP_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_reddit_ads__ad_group',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Reddit ad group details
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('stg_reddit_ads__ad_group') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'model_reddit_ads',
      'key': 'sandbox//reddit_ads_ad_groups',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.reddit_ads_ad_groups',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.reddit_ads_ad_groups',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/REDDIT_ADS_AD_GROUPS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'reddit_ads_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_reddit_ads__campaign_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Reddit campaign performance metrics
        
        #### Raw SQL:
        ```sql
            with campaign_report as (
        
                select * from {{ ref('stg_reddit_ads__campaign_report') }}
            ),
        
            campaigns as (
        
                select * from {{ ref('reddit_ads_campaigns') }}
            ),
        
            final as (
        
                select
                    campaign_report.campaign_id,
                    campaigns.campaign_name,
                    campaign_report.date,
                    sum(campaign_report.impressions) as impressions,
                    sum(campaign_report.clicks) as clicks,
                    sum(campaign_report.spend) as spend
                from campaign_report
                left join campaigns on campaign_report.campaign_id = campaigns.campaign_id
                group by all
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_reddit_ads',
      'key': 'sandbox//reddit_ads_campaign_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.reddit_ads_campaign_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.reddit_ads_campaign_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/REDDIT_ADS_CAMPAIGN_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_reddit_ads__campaign',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Reddit campaign details
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ ref('stg_reddit_ads__campaign') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'model_reddit_ads',
      'key': 'sandbox//reddit_ads_campaigns',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.reddit_ads_campaigns',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.reddit_ads_campaigns',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/REDDIT_ADS_CAMPAIGNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Mapping of referrer host to source and medium
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//referrer_mapping',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='medium',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='host',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.referrer_mapping',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.referrer_mapping',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Enterprise contract information
        
        #### Raw SQL:
        ```sql
            select
                organization_id,
                contracted_seats,
                cloud_credits
            from {{ ref('salesforce_accounts') }}
            inner join {{ ref('stg_cloud_product__organizations') }} using (organization_id)
            where not is_deleted and plan_type = 'ENTERPRISE'
            order by organization_id
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//reporting_contract_info',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.reporting_contract_info',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.reporting_contract_info',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/REPORTING_CONTRACT_INFO',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_tasks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Combines all Salesforce events and tasks not associated with the Dev Tools user.
        
        #### Raw SQL:
        ```sql
            with meetings as (
                select
                    completed_date_time as completed_at,
                    account_id,
                    owner_id,
                    task_type as type
                from {{ ref('salesforce_tasks') }}
                where subject like '%[Gong]%'
                    and status = 'Completed'
                    and gong_meeting_prospect_canceled = false -- field has no null values
                    and canceled_cp is distinct from true -- allows false and null
                    and no_show_cp is distinct from true -- allows false and null
            )
            , emails as (
                select
                    completed_date_time as completed_at,
                    account_id,
                    owner_id,
                    task_type as type
                from {{ ref('salesforce_tasks') }}
                where task_type = 'Email'
                    and status = 'Completed' -- include only completed tasks
                    and (
                        CREATED_BY_ID <> '0055f000007uaxUAAQ' 
                        or subject like '%[Outreach] [Email] [Out]%'
                    )
            )
            , all_activities as (
                select * from meetings
                union
                select * from emails
            )
        
            select * from all_activities
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//sales_activities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.sales_activities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sales_activities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALES_ACTIVITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'non_opportunity_stages',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sales_activities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sales_cycle_stages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Aggregated activities associated with each sales cycle at the opportunity stage level.
        
        #### Raw SQL:
        ```sql
            with sales_cycle_stages as (
                select * from {{ ref('sales_cycle_stages') }}
            )
            , non_opportunity_stages as (
                select * from {{ ref('non_opportunity_stages') }}
            )
            , sales_activities as (
                select * from {{ ref('sales_activities') }}
            )
            , unioned as (
                select * from non_opportunity_stages
                union all
                select * from sales_cycle_stages
            )
            , all_stages as (
                select 
                    * exclude (stage_end),
                    iff(stage = 'Cycle Started', 
                        coalesce(lead(stage_start) over (partition by account_id, account_sales_cycle_id order by stage_order), cycle_end), 
                        coalesce(stage_end, cycle_end)
                    ) as stage_end
                from unioned
            )
        
            select
                all_stages.*,
                count_if(sales_activities.type = 'Meeting') as count_meetings,
                count_if(sales_activities.type = 'Email') as count_emails,
                max(completed_at) as last_activity_date
            from all_stages
            left join sales_activities
                on all_stages.account_id = sales_activities.account_id
                    and (
                        (sales_activities.completed_at >= all_stages.stage_start and sales_activities.completed_at < all_stages.stage_end)
                        or 
                        (sales_activities.completed_at >= all_stages.stage_start and all_stages.stage_end is null)
                    )
            group by all
            order by all_stages.account_id, account_sales_cycle_id, stage_order
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//sales_cycle_stage_activities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.sales_cycle_stage_activities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sales_cycle_stage_activities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALES_CYCLE_STAGE_ACTIVITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'base_sales_cycles',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'opportunity_stages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Opportunity stages associated with each sales cycle.
        
        #### Raw SQL:
        ```sql
            with sales_cycles as (
                select * from {{ ref('base_sales_cycles') }}
                where opportunity_id is not null
            )
            , opportunity_stages as (
                select * from {{ ref('opportunity_stages') }}
            )
        
            select
                sales_cycles.account_id,
                sales_cycles.account_sales_cycle_id,
                sales_cycles.owner as owner_id,
                sales_cycles.start_date as cycle_start,
                iff(is_active, null, sales_cycles.end_date) as cycle_end,
                is_active as cycle_is_active,
                sales_cycles.opportunity_id,
                sales_cycles.is_won,
                opportunity_stages.opportunity_stage as stage,
                opportunity_stages.stage_order as stage_order,
                opportunity_stages.stage_start,
                opportunity_stages.stage_end,
            from sales_cycles
            left join opportunity_stages using (opportunity_id)
            order by account_id, account_sales_cycle_id, stage_order
        ```
      ''',
      'group_name': 'mart_sales',
      'key': 'sandbox//sales_cycle_stages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.sales_cycle_stages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sales_cycle_stages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALES_CYCLE_STAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_account_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_events',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_tasks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce sales cycle information, a sales cycle is created every time a salesperson 
        is assigned to an account that has been assigned to the devtools user. This data is sent to Salesforce.
        
        
        #### Raw SQL:
        ```sql
            with
        
            accounts as (
                select *
                from {{ ref('salesforce_accounts') }}
            ),
        
            opps as (
                select *
                from {{ ref('salesforce_opportunities') }}
            ),
        
            -- Only care about when the owner field changed, and only care about changes after 2023
            account_owner_history as (
                select
                    account_id,
                    created_date,
                    old_value as old_owner,
                    new_value as new_owner
                from {{ ref('salesforce_account_history') }}
                    inner join accounts using (account_id)
                where field = 'Owner' and data_type = 'EntityId' and created_date >= '2023-01-01'
            ),
        
            -- Create an owner change record for the first owner assigned at the creation of the account
            original_account_owner_record as (
                select
                    account_id,
                    accounts.created_at as created_date,
                    null as old_owner,
                    coalesce(old_owner, accounts.owner_id) as new_owner
                from account_owner_history
                    full outer join accounts using (account_id)
                where coalesce(old_owner, accounts.owner_id) <> '0055f000007uaxUAAQ'
                qualify row_number() over (partition by account_id order by created_date) = 1
            ),
        
            -- Combine these new records with the existing owner history,
            -- use a qualify to ensure we're not duplicating a timestamp
            all_account_owner_history as (
                with combined as (
                    select *, 1 as priority from account_owner_history
                    union 
                    select *, 2 as priority from original_account_owner_record
                )
                select * exclude priority
                from combined
                qualify row_number() over (partition by account_id, created_date order by priority) = 1
            ),
        
            -- Ensure that the new owner is the old owner in the next record, if not then the record is invalid
            all_account_owner_history_dedup as (
                select
                    account_id,
                    created_date,
                    old_owner,
                    iff(new_owner = '0055f000007uaxUAAQ', new_owner, coalesce(lead(old_owner) over (partition by account_id order by created_date), new_owner)) as actual_new_owner
                from all_account_owner_history
                qualify
                    actual_new_owner <> old_owner
                    or new_owner is null
                    or old_owner is null
            ),
        
            -- Create a field that tracks when accounts are reassigned back to dev tools as it marks the end of a sales cycle
            sales_cycle_activity as (
                select
                    account_id,
                    CONDITIONAL_TRUE_EVENT(old_owner = '0055f000007uaxUAAQ') OVER (PARTITION BY account_id ORDER BY created_date) as account_sales_cycle_id,
                    created_date as assignment_date,
                    actual_new_owner as owner
                from all_account_owner_history_dedup
                order by account_id, created_date
            ),
        
            -- Get the last owner assigned to the sales cycle, we'll need to know if it is dev tools to determine if the sales cycle was either
            -- closed for another reason (won, lost) or remains open
            sales_cycle_last_assignment as (
                select
                    *,
                    iff(owner = '0055f000007uaxUAAQ', 1, 0) as devtools_last,
                    last_value(owner) over (partition by account_id, account_sales_cycle_id order by assignment_date, devtools_last) as last_owner_assigned,
                    max(assignment_date) over (partition by account_id, account_sales_cycle_id) as last_assignment_date,
                    iff(last_owner_assigned = '0055f000007uaxUAAQ', last_assignment_date, null) as dev_tools_assigned_date,
                    min(assignment_date) over (partition by account_id, account_sales_cycle_id) as start_date
                from sales_cycle_activity
            ),
        
            -- Filter out the dev tool ownership records as we now have everything we need from those
            -- Grab the last assignment that was not a dev tools assignment, this will be considered the last owner of the sales cycle
            sales_cycles_no_dev_tools as (
                select
                    account_id,
                    account_sales_cycle_id,
                    start_date,
                    owner,
                    dev_tools_assigned_date
                from sales_cycle_last_assignment
                where owner <> '0055f000007uaxUAAQ'
                qualify row_number() over (partition by account_id, account_sales_cycle_id order by assignment_date desc) = 1
            ),
        
            -- Add in new business opportunities, if there is a reopened opp for the same sales cycle then get the most recent one
            sales_cycles as (
                select
                    sc.account_id,
                    sc.account_sales_cycle_id,
                    sc.owner,
                    sc.start_date,
                    coalesce(o.close_date, sc.dev_tools_assigned_date) as end_date,
                    o.opportunity_id,
                    o.sal_date,
                    o.close_date,
                    o.is_won,
                    o.stage_name,
                    coalesce(end_date::date > current_date or end_date is null or not o.is_closed, false) as active,
                    a.recent_source as current_recent_source
                from sales_cycles_no_dev_tools sc
                    left join accounts a on sc.account_id = a.account_id
                    left join opps o 
                        on sc.account_id = o.account_id 
                            and (
                                (o.created_at > sc.start_date and o.created_at <= sc.dev_tools_assigned_date) 
                                or (o.created_at >= sc.start_date and sc.dev_tools_assigned_date is null)
                            )
                            and opportunity_type = 'New Business'
                            and not (a.is_named_account and o.stage_name = 'Closed Lost')
                qualify row_number() over (partition by sc.account_id, sc.account_sales_cycle_id order by o.created_at desc) = 1
                order by sc.account_id, account_sales_cycle_id
            ),
        
            -- Get the first meeting date for each sales cycle
            meetings as (
                select
                    activity_date_time as meeting_date,
                    account_id,
                    owner_id
                from {{ ref('salesforce_events') }}
                where event_type = 'Meeting'
            ),
        
            sales_cycles_with_first_meeting as (
                select
                    sc.*,
                    count_if(m.meeting_date < sc.sal_date or sc.sal_date is null) as pre_sal_meeting_count,
                    min(m.meeting_date) as first_meeting_date
                from sales_cycles sc
                    left join meetings m
                        on sc.account_id = m.account_id
                            and sc.owner = m.owner_id
                            and (
                                m.meeting_date between sc.start_date and sc.end_date
                                or m.meeting_date >= sc.start_date and sc.end_date is null
                            )
                group by all
            ),
        
            -- Get the last activity date for each sales cycle
            all_activities as (
                select
                    activity_date,
                    account_id,
                    owner_id,
                    event_type as type
                from {{ ref('salesforce_events') }}
                where not created_by_id = '0055f000007uaxUAAQ'
                union
                select
                    activity_date,
                    account_id,
                    owner_id,
                    task_type as type
                from {{ ref('salesforce_tasks') }}
                where not created_by_id = '0055f000007uaxUAAQ'
            ),
        
            sales_cycles_with_last_activity as (
                select
                    sc.*,
                    count_if(a.activity_date < sc.sal_date or sc.sal_date is null) as pre_sal_activity_count,
                    count_if((a.activity_date < sc.sal_date or sc.sal_date is null) and a.type = 'Email') as pre_sal_email_count,
                    max(a.activity_date) as last_activity_date
                from sales_cycles_with_first_meeting sc
                    left join all_activities a
                        on sc.account_id = a.account_id
                            and sc.owner = a.owner_id
                            and (
                                (a.activity_date between sc.start_date and sc.end_date)
                                or (a.activity_date >= sc.start_date and sc.end_date is null)
                            )
                group by all
            ),
        
            account_recent_source_history as (
                select
                    account_id,
                    created_date,
                    old_value as old_source,
                    new_value as new_source
                from {{ ref('salesforce_account_history') }}
                where field = 'Recent_Source__c'
            ),
        
            original_recent_source_record as (
                select
                    account_id,
                    accounts.created_at as created_date,
                    null as old_source,
                    old_source as new_source
                from account_recent_source_history
                    left join accounts using (account_id)
                qualify row_number() over (partition by account_id order by created_date) = 1
            ),
        
            all_recent_source_records as (
                select * from account_recent_source_history
                union 
                select * from original_recent_source_record
            ),
        
            sales_cycle_with_recent_source as (
                select
                    sc.*,
                    coalesce(new_source, current_recent_source) as recent_source
                from sales_cycles_with_last_activity sc
                    left join all_recent_source_records sh
                        on sc.account_id = sh.account_id
                        and created_date < sc.start_date
                qualify row_number() over (partition by sc.account_id, sc.account_sales_cycle_id order by created_date desc) = 1
            ),
        
            final as (
                select
                    sc.first_meeting_date,
                    sc.account_id || '-' || sc.account_sales_cycle_id as id,
                    sc.account_id,
                    sc.account_sales_cycle_id,
                    sc.active,
                    sc.close_date,
                    sc.is_won,
                    sc.last_activity_date,
                    sc.opportunity_id,
                    sc.sal_date,
                    sc.end_date as sales_cycle_close_date,
                    sc.owner as sales_cycle_owner,
                    sc.recent_source,
                    sc.stage_name,
                    sc.start_date,
                    sc.pre_sal_activity_count,
                    sc.pre_sal_meeting_count,
                    sc.pre_sal_email_count
                from sales_cycle_with_recent_source sc
                    left join accounts a using (account_id)
                where not (sc.active and a.account_type = 'Customer')
            )
        
            select * from final
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//sales_cycles',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.sales_cycles',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sales_cycles',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALES_CYCLES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__account_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce account history information
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ ref('stg_salesforce__account_history') }}
            ),
        
            users as (
        
                select * from {{ ref('stg_salesforce__users') }}
            ),
        
            final as (
        
                select
                    source.*,
                    users.name as created_by_name,
                    users.email as created_by_email
                from source
                left join users on source.created_by_id = users.user_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_account_history',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_account_history',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_account_history',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_ACCOUNT_HISTORY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaign_members',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__accounts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce account information
        
        #### Raw SQL:
        ```sql
            with accounts as (
            
                select * from {{ ref("stg_salesforce__accounts") }}
            ),
        
            campaign_members as (
        
                select * from {{ ref("salesforce_campaign_members") }}
            ),
        
            first_abm as (
        
                select
                    campaign_members.company_or_account as account_name,
                    campaign_members.account_id,
                    campaign_members.campaign_name
                from campaign_members
                where is_abm_campaign = true
                and salesforce_object_assocation = 'Account'
                qualify row_number() over (partition by account_id order by campaign_members.created_date asc) = 1
            ),
        
            final as (
        
                select 
                    accounts.*,
                    --- Note: this is a formula field in Salesforce that is being filled here because Fivetran does not support syncing formula fields
                    case 
                        when annual_revenue >= 250000000 or total_funding >= 250000000 then 'Enterprise Sales'
                        else 'Corporate Sales'
                        end as revenue_segment,
                    (bdr_engaged_contact_count + seller_engaged_contact_count) as total_sales_engaged_contact_count, 
                    (seller_activity_count_l90d + bdr_activity_count_l90d) as total_sales_activity_count,
                    case
                        when (bdr_engaged_contact_count + seller_engaged_contact_count) >= 3
                            and (seller_activity_count_l90d + bdr_activity_count_l90d) >= 6
                        then true
                        else false
                        end as is_sales_working_account,
                    coalesce(greatest(last_seller_activity_at, last_bdr_activity_at), last_seller_activity_at, last_bdr_activity_at)  as last_sales_activity_at,
                    first_abm.campaign_name as first_abm_campaign
                from accounts
                left join first_abm on accounts.account_id = first_abm.account_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_accounts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_accounts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_accounts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_ACCOUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__campaign_members',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Members of a given campaign logged in Salesforce
        
        #### Raw SQL:
        ```sql
            with salesforce_campaigns as (
        
                select * from {{ ref("salesforce_campaigns") }}
        
            ),
        
            salesforce_campaign_members as (
        
                select * from {{ ref("stg_salesforce__campaign_members") }}
        
            ),
        
            contacts as ( 
        
                select * from {{ ref("salesforce_contacts") }}
            ),
        
            joined as (
        
                select
                    salesforce_campaign_members.campaign_member_id,
                    salesforce_campaign_members.contact_id,
                    salesforce_campaign_members.first_name,
                    salesforce_campaign_members.last_name,
                    salesforce_campaign_members.email,
                    salesforce_campaigns.campaign_id,
                    salesforce_campaigns.campaign_name,
                    salesforce_campaigns.parent_id,
                    salesforce_campaigns.parent_campaign_name,
                    salesforce_campaigns.campaign_type,
                    salesforce_campaigns.campaign_source,
                    salesforce_campaigns.campaign_status,
                    salesforce_campaigns.start_date,
                    salesforce_campaigns.end_date,
                    salesforce_campaigns.is_active,
                    salesforce_campaigns.is_abm_campaign,
                    coalesce(salesforce_campaign_members.account_id, contacts.account_id) as account_id,
                    salesforce_campaign_members.company_or_account,
                    salesforce_campaign_members.title,
                    salesforce_campaign_members.member_status,
                    salesforce_campaign_members.has_responded,
                    salesforce_campaign_members.first_responded_date,
                    salesforce_campaign_members.created_date,
                    salesforce_campaign_members.salesforce_object_assocation
                from salesforce_campaigns
                inner join salesforce_campaign_members on salesforce_campaigns.campaign_id = salesforce_campaign_members.campaign_id
                left join contacts on salesforce_campaign_members.contact_id = contacts.contact_id
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_campaign_members',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_campaign_members',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_campaign_members',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_CAMPAIGN_MEMBERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__campaigns',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Marketing campaigns, can include ads and marketing events
        
        #### Raw SQL:
        ```sql
            with campaigns as (
            
                select * from {{ ref("stg_salesforce__campaigns") }}
            ),
        
            find_parent_campaigns as (
            
                select 
                    distinct parent_id
                from campaigns
            ),
        
            final as (
        
                select 
                    campaigns.campaign_id,
                    campaigns.campaign_name,
                    case when find_parent_campaigns.parent_id is not null then true else false end as is_parent_campaign,   
                    campaigns.parent_id,
                    parent_campaign.campaign_name as parent_campaign_name,
                    campaigns.campaign_type,
                    campaigns.campaign_source,
                    campaigns.campaign_status,
                    campaigns.start_date,
                    campaigns.end_date,
                    case 
                        when campaigns.parent_id = '701Qo00000ndB7kIAE' or campaigns.campaign_id = '701Qo00000ndB7kIAE' then true
                        else false
                        end as is_abm_campaign,
                    campaigns.is_active,
                    campaigns.number_of_contacts,
                    campaigns.number_of_responses,
                    campaigns.number_of_opportunities,
                    campaigns.amount_all_opportunities
                from campaigns
                left join find_parent_campaigns on campaigns.campaign_id = find_parent_campaigns.parent_id
                left join campaigns as parent_campaign on campaigns.parent_id = parent_campaign.campaign_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_campaigns',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_campaigns',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_campaigns',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_CAMPAIGNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce contact information
        
        #### Raw SQL:
        ```sql
            with source as (
        
            select * from {{ ref("stg_salesforce__contacts") }}
        
            )
        
            select 
                *,
                concat(first_name, ' ', last_name) as name
            from source
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_contacts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_contacts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_contacts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_CONTACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__contracts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce contract information
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref("stg_salesforce__contracts") }}
            ),
        
            opportunities as (
        
                select * from {{ ref("salesforce_opportunities") }}
            ),
        
            accounts as (
        
                select * from {{ ref("salesforce_accounts") }}
            ),
        
            flags as (
        
                select
                    source.contract_id,
                    source.account_id,
                    accounts.account_name,
                    source.opportunity_id,
                    opps.opportunity_name,
                    opps.opportunity_type,
                    source.arr,
                    source.cloud_credits_contracted,
                    source.contract_number,
                    source.contract_term,
                    source.created_date,
                    source.contract_start_date,
                    source.contract_end_date,
                    source.launcher_seats,
                    source.pricing_model,
                    source.is_serverless,
                    source.contract_status,
                    source.owner_expiration_notice,
                    source.special_terms,
                    source.activated_date,
                    source.billed_thru,
                    source.roll_over_credits,
                    case 
                        when 
                            current_date >= source.contract_start_date 
                            and current_date <= source.contract_end_date 
                            and lower(source.contract_status) = 'activated' 
                            then true
                        else false
                        end as is_active_contract 
                from source
                left join opportunities opps on source.opportunity_id = opps.opportunity_id
                left join accounts on source.account_id = accounts.account_id
            )
        
            select * from flags
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_contracts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_contracts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_contracts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_CONTRACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__events',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce event information
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_salesforce__events') }}
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__leadfeederapp_website_visit_c',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Leadfeeder data that is exported into Salesforce summarized as sessions
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ref ('stg_salesforce__leadfeederapp_website_visit_c') }} 
            ),
        
            companies as (
        
                select * from {{ref ('hubspot_companies') }} 
            ),
        
            final as (
        
                select
                    source.leadfeeder_visit_id,
                    source.visit_name,
                    source.visit_at,
                    source.visit_duration_seconds,
                    source.landing_page,
                    source.total_pageviews,
                    case when lower(source.landing_page) like ('%dagster.io/telemetry.html%') then true
                        else false
                        end as is_oss_usage,
                    case 
                        when lower(source.landing_page) like ('%dagster.io/telemetry.html%') then 'oss_telemetry'
                        when lower(source.landing_page) like ('%docs.dagster.io%') then 'docs'
                        when lower(source.landing_page) like ('%dagster.io/%') then 'marketing'
                        end as landing_page_type,
                    source.account_id,
                    companies.name as account_name,
                    companies.id as hubspot_company_id,
                    source.campaign_id,
                    source.contact_id,
                    {{ email_cleaner('source.email') }} as email,
                    source.external_id,
                    source.keyword,
                    source.lead_id,
                    source.medium,
                    source.pages,
                    source.referrer,
                    source.source
                from source
                left join companies on source.account_id = companies.salesforce_account_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_leaderfeeder_sessions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_leaderfeeder_sessions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_leaderfeeder_sessions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_LEADERFEEDER_SESSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        dbt seed salesforce_opp_stage_mapping
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//salesforce_opp_stage_mapping',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/table_name': 'sandbox.salesforce_opp_stage_mapping',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.salesforce_opp_stage_mapping',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opp_stage_mapping',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce opportunity information
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ ref("stg_salesforce__opportunities") }}
            ),
        
            mapping as (
        
                select * from {{ ref("salesforce_opp_stage_mapping") }}
            ),
        
            first_opp as (
        
                select
                    account_id,
                    opportunity_id
                from source 
                qualify row_number() over (partition by account_id order by created_at) = 1
            ),
        
            flags as (
        
                select
                    source.*,
                    case 
                        when first_opp.opportunity_id is not null then true
                        else false
                        end as is_account_first_opp,
                    mapping.stage_number as stage_order_number
                from source
                left join first_opp on source.opportunity_id = first_opp.opportunity_id
                left join mapping on lower(source.stage_name) = mapping.stage_name
            ),
        
            final as (
        
                select
                    * exclude (stage_name),
                    concat(stage_order_number, '. ', stage_name) as stage_name
                from flags
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_opportunities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_opportunities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_opportunities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_OPPORTUNITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_opp_stage_mapping',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__opportunity_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce opportunity history information
        
        #### Raw SQL:
        ```sql
            with source as (
                select * from {{ ref('stg_salesforce__opportunity_history') }}
            ),
        
            opps_stage_mapping as (
                select * from {{ ref('salesforce_opp_stage_mapping') }}
            ),
        
            -- Get final stage and last non-closed lost stage in one pass
            stage_info as (
            
                select 
                    opportunity_id,
                    -- Get the final stage name for each opportunity (most recent stage)
                    max(case when rn = 1 then stage_name end) as final_stage_name,
                    -- Get the last non-closed lost stage name before the final Closed Lost
                    max(case when stage_name != 'Closed Lost' and next_stage = 'Closed Lost' then stage_name end) as last_non_closed_lost_stage,
                    -- Get the date of the last non-closed lost stage
                    max(case when stage_name != 'Closed Lost' and next_stage = 'Closed Lost' then created_date end) as last_non_closed_lost_date
                from (
                    select 
                        *,
                        row_number() over (partition by opportunity_id order by created_date desc) as rn,
                        lead(stage_name) over (partition by opportunity_id order by created_date) as next_stage
                    from source
                )
                group by opportunity_id
            ),
        
            final as (
                select 
                    source.* exclude (stage_name),
                    concat(opps_stage_mapping.stage_number, '. ', source.stage_name) as stage_name,
                    opps_stage_mapping.stage_number,
                    case 
                        when source.stage_name = 'Closed Lost' then false
                        when stage_info.final_stage_name != 'Closed Lost' then false
                        when stage_info.final_stage_name = 'Closed Lost' 
                             and source.stage_name = stage_info.last_non_closed_lost_stage
                             and source.created_date = stage_info.last_non_closed_lost_date then true
                        else false
                    end as is_stage_before_closed_lost
                from source
                left join opps_stage_mapping on lower(source.stage_name) = opps_stage_mapping.stage_name
                left join stage_info on source.opportunity_id = stage_info.opportunity_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_opportunity_history',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_opportunity_history',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_opportunity_history',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_OPPORTUNITY_HISTORY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__opportunity_line_item',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__product2',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce opportunity line item information with product information appended
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref("stg_salesforce__opportunity_line_item") }}
            ),
        
            product as (
        
                select * from {{ ref("stg_salesforce__product2") }}
            ),
        
            final as (
        
                select
                    source.opportunity_line_item_id,
                    source.opportunity_id,
                    source.product_id,
                    product.product_name,
                    source.sort_order, 
                    source.pricebook_entry_id, 
                    source.product_code, 
                    source.name, 
                    source.quantity, 
                    source.discount, 
                    source.subtotal, 
                    source.total_price, 
                    source.unit_price, 
                    source.list_price, 
                    source.service_date, 
                    source.description, 
                    source.created_at, 
                    source.created_by_id, 
                    source.updated_at, 
                    source.last_modified_by_id,         
                    source.last_viewed_date, 
                    source.last_referenced_date
                from source
                left join product on source.product_id = product.product_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_opportunity_line_item',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_opportunity_line_item',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_opportunity_line_item',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_OPPORTUNITY_LINE_ITEM',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce organization custom object synced from Hubspot organizations
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_salesforce__organizations')}}
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__partners',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce partner information
        
        #### Raw SQL:
        ```sql
            with partners as (
            
                select * from {{ ref("stg_salesforce__partners") }}
            ),
        
            accounts as (
            
                select * from {{ ref("stg_salesforce__accounts") }}
            )
        
            select
                partners.*,
                accounts_to.account_name as account_to_name,
                accounts_from.account_name as account_from_name
            from partners
                left join accounts accounts_to on partners.account_to_id = accounts_to.account_id
                left join accounts accounts_from on partners.account_from_id = accounts_from.account_id
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_partners',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_partners',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_partners',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_PARTNERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__tasks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce task information
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ ref('stg_salesforce__tasks') }}
            ),
        
            users as (
        
                select * from {{ ref('salesforce_users') }}
            ),
        
            contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
            ),
        
            final as (
        
                select 
                    source.task_id,
                    source.who_id,
                    contacts.name as contact_name,
                    contacts.account_id as contact_account_id,
                    source.what_id,
                    source.subject,
                    source.activity_date,
                    source.task_type,
                    source.task_subtype,
                    source.status,
                    source.owner_id,
                    users.name as owner_name,
                    source.priority,
                    source.description,
                    source.account_id,
                    source.is_closed,
                    source.created_date,
                    source.created_by_id,
                    source.completed_date_time,
                    source.call_notes,
                    source.contact_lifecycle,
                    source.account_recent_source,
                    source.gong_meeting_prospect_canceled,
                    source.canceled_cp,
                    source.no_show_cp,
                    --- note: these are both calculated fields in Salesforce, they are recreated in the warehouse for the sake of specific reporting
                    users.role_custom_field as assigned_to_role,
                    case 
                        when role_custom_field in ('CSR','EAE', 'BDR')  
                            and subject like ('%[Outreach]%') 
                            and subject not like  ('%[In]%') then TRUE
                        else FALSE
                        end as created_by_sales
                from source
                left join users on source.owner_id = users.user_id
                left join contacts on source.who_id = contacts.contact_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_tasks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_tasks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_tasks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_TASKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__user_roles',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Salesforce user information
        
        #### Raw SQL:
        ```sql
            with users as (
        
                select * from {{ ref('stg_salesforce__users') }}
            ),
        
            user_role as (
        
                select * from {{ ref('stg_salesforce__user_roles') }}
            ),
        
            joined as (
        
                select 
                    users.*,
                    user_role.role_name
                from users    
                left join user_role on users.user_role_id = user_role.user_role_id
            )
        
            select * from joined
        ```
      ''',
      'group_name': 'model_salesforce',
      'key': 'sandbox//salesforce_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.salesforce_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.salesforce_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SALESFORCE_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_cloud__identifies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Identified users from dagster.io
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_cloud__identifies') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_cloud_identifies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_cloud_identifies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_cloud_identifies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_CLOUD_IDENTIFIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_cloud__pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Page hits on dagster.cloud from Segment
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_cloud__pages') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_cloud_pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_cloud_pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_cloud_pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_CLOUD_PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_cloud__tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Tracked events from dagster.cloud
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_cloud__tracks') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_cloud_tracks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_cloud_tracks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_cloud_tracks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_CLOUD_TRACKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_tracks',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Mapped dagster cloud users
        
        #### Raw SQL:
        ```sql
            with all_events as (
                select distinct
                    anonymous_id,
                    user_id,
                    timestamp
        
                from {{ ref('segment_web_pages') }}
        
                union distinct
        
                select distinct
                    anonymous_id,
                    user_id,
                    timestamp
        
                from {{ ref('segment_cloud_tracks') }}
            ),
        
            mapping as (
        
                select distinct
        
                    anonymous_id,
                    last_value(user_id ignore nulls) over (
                        partition by anonymous_id order by timestamp
                        rows between unbounded preceding and unbounded following
                    ) as user_id,
        
                    min(timestamp) over (partition by anonymous_id) as first_seen_at,
                    max(timestamp) over (partition by anonymous_id) as last_seen_at
        
                from all_events
                where anonymous_id is not null
        
            )
        
            select * from mapping
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_cloud_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_cloud_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_cloud_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_CLOUD_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_dagster_u__identifies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Identified users from Dagster U
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_dagster_u__identifies') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_dagster_u_identifies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_dagster_u_identifies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_dagster_u_identifies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_DAGSTER_U_IDENTIFIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'referrer_mapping',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_dagster_u__pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Page hits on courses.dagster.com from Segment
        
        #### Raw SQL:
        ```sql
            with pages as (
                select
                    *,
                    row_number() over (partition by anonymous_id order by timestamp) as page_view_number,
                    lag(timestamp) over (partition by anonymous_id order by timestamp) as previous_tstamp
                from {{ ref('stg_segment_dagster_u__pages') }}
            ),
        
            referrer as (
                select * from {{ ref('referrer_mapping') }}
            ),
        
            page_sessions as (
                select
                    pages.*,
                    datediff('second', previous_tstamp, timestamp) as period_of_inactivity,
                    iff(period_of_inactivity <= {{ var('session_threshold_seconds') }}, 0, 1) as new_session,
                    referrer.medium as referrer_medium,
        
                    case
                    -- Ads
                        when gclid is not null then 'cpc'
                        when reddit_cid is not null then 'cpc'
                        when campaign_medium = 'cpc' then 'cpc'
        
                        -- UTM Params
                        when campaign_medium is not null then campaign_medium
        
                        -- Search Breakdown
                        when referrer.medium = 'search' and path = '/' then 'search-brand'
                        when referrer.medium = 'search' and path = '/cloud' then 'search-brand'
                        when referrer.medium = 'search' and path like '/blog%' then 'search-blog'
                        when referrer.medium = 'search' and path like '/vs-%' then 'search-vs'
                        when
                            referrer.medium = 'search' and path like '/integrations%'
                            then 'search-integrations'
                        when referrer.medium = 'search' then 'search-other'
        
                        -- Referrers
                        when referrer.medium is not null then referrer.medium
        
                        -- Path Attribution
                        when referrer.host = 'docs.dagster.io' then 'docs'
                        when path like '/blog%' and referrer_host is null then 'blog'
                        when path = '/glossary' and referrer_host is null then 'glossary'
                        when path like '/events%' and referrer_medium is null then 'events'
        
                        -- Other, uncategorized
                        when
                            coalesce(
                                campaign_source,
                                campaign_medium,
                                campaign_name,
                                utm_term
                            ) is not null
                            then 'other-campaign'
                        when referrer_host in ('dagster.io', 'dagster.cloud') then 'dagster-referrer'
                        when referrer_host is not null then 'other-referrer'
                        else 'uncategorized'
                    end as attribution_category,
                    sum(new_session)
                        over (
                            partition by anonymous_id
                            order by page_view_number rows between unbounded preceding and current row
                        ) as session_number,
                    md5(anonymous_id || session_number) as session_id
                from pages
                left join referrer on pages.referrer_host = referrer.host
            )
        
            select * exclude (previous_tstamp, period_of_inactivity, new_session)
            from page_sessions
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_dagster_u_pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_dagster_u_pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_dagster_u_pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_DAGSTER_U_PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_dagster_u_pages',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Session data created based on inactivity time
        
        #### Raw SQL:
        ```sql
            {% set partition_by = "partition by session_id order by page_view_number
            rows between unbounded preceding and unbounded following" %}
        
            {% set attributes = ["referrer_host", "referrer_medium", "path", "campaign_source",
                "campaign_medium", "campaign_name", "campaign_content", "utm_term", "reddit_cid", "gclid", "attribution_category"] %}
        
            with pages as (
                select
                    segment_web_pages.event_id,
                    segment_web_pages.anonymous_id,
                    segment_web_pages.user_id as user_id,
                    segment_web_pages.referrer_host_unparsed,
                    segment_web_pages.referrer_host,
                    segment_web_pages.referrer,
                    segment_web_pages.path,
                    segment_web_pages.title,
                    segment_web_pages.search,
                    segment_web_pages.search_params,
                    segment_web_pages.campaign_source,
                    segment_web_pages.campaign_medium,
                    segment_web_pages.campaign_name,
                    segment_web_pages.campaign_content,
                    segment_web_pages.utm_term,
                    segment_web_pages.reddit_cid,
                    segment_web_pages.gclid,
                    segment_web_pages.timestamp,
                    segment_web_pages.referrer_medium,
                    segment_web_pages.attribution_category,
                    segment_web_pages.session_number,
                    segment_web_pages.session_id,
                    segment_web_pages.page_view_number,
                    'web' as source
                from {{ ref('segment_web_pages') }}
        
                union all
        
                select 
                    event_id,
                    anonymous_id,
                    user_id,
                    referrer_host_unparsed,
                    referrer_host,
                    referrer,
                    path,
                    title,
                    search,
                    search_params,
                    campaign_source,
                    campaign_medium,
                    campaign_name,
                    campaign_content,
                    utm_term,
                    reddit_cid,
                    gclid,
                    timestamp,
                    referrer_medium,
                    attribution_category,
                    session_number,
                    session_id,
                    page_view_number,
                    'dagster u' as source
                from {{ ref('segment_dagster_u_pages')}}
            )
        
            select distinct
        
                session_id,
                anonymous_id,
                user_id,
                source,
                min(timestamp) over (partition by session_id) as session_started_at,
                max(timestamp) over (partition by session_id) as session_ended_at,
                count(*) over (partition by session_id) as page_views,
        
                {% for key in attributes %}
                    nullif(
                        {{ target.database }}.utils.uri_percent_decode(
                            first_value({{ key }}) over ({{ partition_by -}})::varchar
                        ),
                        'undefined'
                    )
                        as first_{{ key }},
                {%- endfor %}
        
            {% for key in attributes %}
                last_value({{ key }}) over ({{ partition_by -}})
                    as last_{{ key }}{% if not loop.last %},
                {% endif %}
            {%- endfor %}
        
            from pages
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_dagster_u_sessions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_dagster_u_sessions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_dagster_u_sessions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_DAGSTER_U_SESSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_dagster_u__tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Tracked events from courses.dagster.com
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_dagster_u__tracks') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_dagster_u_tracks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_dagster_u_tracks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_dagster_u_tracks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_DAGSTER_U_TRACKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_dagster_u_pages',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_dagster_u_tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Mapped Dagster U education Users
        
        #### Raw SQL:
        ```sql
            with all_events as (
                select distinct
                    anonymous_id,
                    user_id,
                    timestamp
        
                from {{ ref('segment_dagster_u_pages') }}
        
                union distinct
        
                select distinct
                    anonymous_id,
                    user_id,
                    timestamp
        
                from {{ ref('segment_dagster_u_tracks') }}
            ),
        
            mapping as (
        
                select distinct
        
                    anonymous_id,
                    last_value(user_id ignore nulls) over (
                        partition by anonymous_id order by timestamp
                        rows between unbounded preceding and unbounded following
                    ) as user_id,
        
                    min(timestamp) over (partition by anonymous_id) as first_seen_at,
                    max(timestamp) over (partition by anonymous_id) as last_seen_at,
                    'dagster u' as source
        
                from all_events
                where anonymous_id is not null
        
                union distinct 
        
                select *, 'web' as source
                from {{ ref('segment_cloud_users') }}
        
            )
        
            select * from mapping
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_dagster_u_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_dagster_u_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_dagster_u_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_DAGSTER_U_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_docs__pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Pages hits on docs.dagster.io from Segment
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_docs__pages') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_docs_pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_docs_pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_docs_pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_DOCS_PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_web__hubspot_form_submit',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Hubspot form fills recorded via Segment
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_web__hubspot_form_submit') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_web_hubspot_form_submits',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_web_hubspot_form_submits',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_web_hubspot_form_submits',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_WEB_HUBSPOT_FORM_SUBMITS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_web__identifies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Identified users from dagster.io
        
        #### Raw SQL:
        ```sql
            select * from {{ ref('stg_segment_web__identifies') }}
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_web_identifies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_web_identifies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_web_identifies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_WEB_IDENTIFIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'referrer_mapping',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_web__pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Page hits on dagster.io from Segment
        
        #### Raw SQL:
        ```sql
            with pages as (
                select
                    *,
                    row_number() over (partition by anonymous_id order by timestamp) as page_view_number,
                    lag(timestamp) over (partition by anonymous_id order by timestamp) as previous_tstamp
                from {{ ref('stg_segment_web__pages') }}
            ),
        
            referrer as (
                select * from {{ ref('referrer_mapping') }}
            ),
        
            page_sessions as (
                select
                    pages.*,
                    datediff('second', previous_tstamp, timestamp) as period_of_inactivity,
                    iff(period_of_inactivity <= {{ var('session_threshold_seconds') }}, 0, 1) as new_session,
                    referrer.medium as referrer_medium,
        
                    case
                    -- Ads
                        when gclid is not null then 'cpc'
                        when reddit_cid is not null then 'cpc'
                        when campaign_medium = 'cpc' then 'cpc'
        
                        -- UTM Params
                        when campaign_medium is not null then campaign_medium
        
                        -- Search Breakdown
                        when referrer.medium = 'search' and path = '/' then 'search-brand'
                        when referrer.medium = 'search' and path = '/cloud' then 'search-brand'
                        when referrer.medium = 'search' and path like '/blog%' then 'search-blog'
                        when referrer.medium = 'search' and path like '/vs-%' then 'search-vs'
                        when
                            referrer.medium = 'search' and path like '/integrations%'
                            then 'search-integrations'
                        when referrer.medium = 'search' then 'search-other'
        
                        -- Referrers
                        when referrer.medium is not null then referrer.medium
        
                        -- Path Attribution
                        when referrer.host = 'docs.dagster.io' then 'docs'
                        when path like '/blog%' and referrer_host is null then 'blog'
                        when path = '/glossary' and referrer_host is null then 'glossary'
                        when path like '/events%' and referrer_medium is null then 'events'
        
                        -- Other, uncategorized
                        when
                            coalesce(
                                campaign_source,
                                campaign_medium,
                                campaign_name,
                                utm_term
                            ) is not null
                            then 'other-campaign'
                        when referrer_host in ('dagster.io', 'dagster.cloud') then 'dagster-referrer'
                        when referrer_host is not null then 'other-referrer'
                        else 'uncategorized'
                    end as attribution_category,
                    sum(new_session)
                        over (
                            partition by anonymous_id
                            order by page_view_number rows between unbounded preceding and current row
                        ) as session_number,
                    md5(anonymous_id || session_number) as session_id
                from pages
                left join referrer on pages.referrer_host = referrer.host
            )
        
            select * exclude (previous_tstamp, period_of_inactivity, new_session)
            from page_sessions
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_web_pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_web_pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_web_pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_WEB_PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Session data created based on inactivity time
        
        #### Raw SQL:
        ```sql
            {% set partition_by = "partition by session_id order by page_view_number
            rows between unbounded preceding and unbounded following" %}
        
            {% set attributes = ["referrer_host", "referrer_medium", "path", "campaign_source",
                "campaign_medium", "campaign_name", "campaign_content", "utm_term", "reddit_cid", "gclid", "attribution_category"] %}
        
            with pages as (
                select * from {{ ref('segment_web_pages') }}
            )
        
            select distinct
        
                session_id,
                anonymous_id,
                min(timestamp) over (partition by session_id) as session_started_at,
                max(timestamp) over (partition by session_id) as session_ended_at,
                count(*) over (partition by session_id) as page_views,
        
                {% for key in attributes %}
                    nullif(
                        {{ target.database }}.utils.uri_percent_decode(
                            first_value({{ key }}) over ({{ partition_by -}})::varchar
                        ),
                        'undefined'
                    )
                        as first_{{ key }},
                {%- endfor %}
        
            {% for key in attributes %}
                last_value({{ key }}) over ({{ partition_by -}})
                    as last_{{ key }}{% if not loop.last %},
                {% endif %}
            {%- endfor %}
        
            from pages
        ```
      ''',
      'group_name': 'model_segment',
      'key': 'sandbox//segment_web_sessions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.segment_web_sessions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.segment_web_sessions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SEGMENT_WEB_SESSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_customer_info',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Plan types for a given Dagster organization in a given month
        
        #### Raw SQL:
        ```sql
            select
                date(date_trunc(month, invoice_created_at)) as month_start_date,
                organization_id,
                i.base_plan_type
            from {{ ref('stripe_invoices') }} as i
            inner join {{ ref('cloud_product_customer_info') }} as ci on i.customer_id = ci.stripe_customer_id
            where invoice_total > 0 and i.base_plan_type <> 'ENTERPRISE'
            qualify
                row_number() over (partition by organization_id, month_start_date order by invoice_created_at)
                = 1
            order by organization_id, month_start_date
        ```
      ''',
      'group_name': 'mart_product',
      'key': 'sandbox//self_serve_plan_type_monthly',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.self_serve_plan_type_monthly',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.self_serve_plan_type_monthly',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SELF_SERVE_PLAN_TYPE_MONTHLY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Mapping from stripe product IDs to self serve plan types
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//self_serve_stripe_products',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='product_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='plan_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='stripe_api_mode',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='comment',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.self_serve_stripe_products',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.self_serve_stripe_products',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_snapshot__hubspot_company',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Snapshot of the Hubspot Company data on a daily basis with light modeling
        
        #### Raw SQL:
        ```sql
            with companies as (
        
                select * from {{ ref('stg_snapshot__hubspot_company') }}
            ),
        
            source as (
            
                select 
                    * exclude(website, is_target_account, intent_score),
                    coalesce(is_target_account, false) as is_target_account,
                    coalesce(intent_score, 0) as intent_score,
                    {{ is_intent_score_greater_than_zero('intent_score') }} as is_intent_score_greater_than_zero,
                    {{ is_engaged('intent_score') }} as is_engaged,
                    website as website_unparsed, -- the current terminology is to refer to a full URL (such as https://www.google.com) as the website_unparsed. There is no standardization on what these URLs look like that are provided by Hubspot
                    domain as website -- the current terminology refers to the company domain (such as google.com) as the website. Since Hubspot already provides the domain, we rename the column here rather than trying to retrieve it from website_unparsed
                from companies
            ),
        
            ---note: the below function was one inherited from previous code owners. we have made a ticket to try to simplify. as of now, it works though.
            add_domains_array as (
        
                select
                    *,
                    array_remove(
                        array_distinct(
                            array_compact(
                                array_append(
                                    array_cat(
                                        to_array(domain),
                                        coalesce(split(additional_domains, ';'), to_array(''))
                                    ),
                                    coalesce(domain, '')
                                )
                            )
                        )
                    , ''::variant) as domain_array
                from source
            )
        
            select * from add_domains_array
        ```
      ''',
      'group_name': 'model_snapshots',
      'key': 'sandbox//snapshot_hubspot_companies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.snapshot_hubspot_companies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.snapshot_hubspot_companies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SNAPSHOT_HUBSPOT_COMPANIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_snapshot__salesforce_account',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Snapshot of the Salesforce data on a daily basis with light modeling
        
        #### Raw SQL:
        ```sql
            with accounts as (
        
                select * from {{ ref('stg_snapshot__salesforce_account') }}
            ),
        
            source as (
            
                select * from accounts 
            )
        
            select * from source
        ```
      ''',
      'group_name': 'model_snapshots',
      'key': 'sandbox//snapshot_salesforce_accounts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.snapshot_salesforce_accounts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.snapshot_salesforce_accounts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SNAPSHOT_SALESFORCE_ACCOUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_snapshot__salesforce_opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Snapshot of the Salesforce data on a daily basis with light modeling
        
        #### Raw SQL:
        ```sql
            with opportunities as (
        
                select * from {{ ref('stg_snapshot__salesforce_opportunities') }}
            ),
        
            data as (
            
                select * from opportunities 
            )
        
            select * from data
        ```
      ''',
      'group_name': 'model_snapshots',
      'key': 'sandbox//snapshot_salesforce_opportunities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.snapshot_salesforce_opportunities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.snapshot_salesforce_opportunities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SNAPSHOT_SALESFORCE_OPPORTUNITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'asset_event_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Stores asset observations for Insights Snowflake cost tracking.
        
        #### Raw SQL:
        ```sql
            select
        
                organization_id,
                deployment_id,
                event_log_id,
                run_id,
                step_key,
                created_at,
                asset_key,
                label,
                -- 29 is the length of "dagster_snowflake_opaque_id:" plus one
                -- since Snowflake substring indices are 1-indexed
                substr(label, 29) as opaque_id
            from
                {{ ref('asset_event_metadata') }}
            where
                dagster_event_type = 'ASSET_OBSERVATION'
                and label like 'dagster_snowflake_opaque_id:%'
        ```
      ''',
      'group_name': 'intermediate',
      'key': 'sandbox//snowflake_cost_observation_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.snowflake_cost_observation_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.snowflake_cost_observation_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SNOWFLAKE_COST_OBSERVATION_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_tracks',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_pages',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_sessions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'time_spine',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Pre-aggregated metrics based on user activity in segment meant to power Statsig metrics.
        
        #### Raw SQL:
        ```sql
            {{ 
                config(
                    materialized='incremental',
                    unique_key=[
                        'ANONYMOUS_ID',
                        'DS',
                        'USER_ID',
                        'ORGANIZATION_ID'
                    ],
                    incremental_strategy='merge',
                    on_schema_change='append_new_columns',
                )
            }}
        
            {% set start_date = '2025-01-01' %}
        
            {% 
            set event_metrics = [
                "searchOpen", 
                "signIn", 
                "signOut",
                "viewAssetPlots", 
                "viewAssetInsights"
            ]
            %}
        
            {% 
            set page_metrics = {
                "overview": "/overview/activity",
                "asset_health": "/overview/asset-health",
                "runs": "/runs", 
                "catalog": "/catalog"
            }
            %}
        
            WITH segment_sessions AS (
                SELECT 
                    ANONYMOUS_ID,
                    DATE_TRUNC(day, SESSION_STARTED_AT) as DS,
                    SUM(PAGE_VIEWS) as page_views,
                    SUM(datediff(second, SESSION_STARTED_AT, SESSION_ENDED_AT)) AS time_spent
                FROM
                    {{ ref('segment_web_sessions') }}
                GROUP BY 1, 2
            ), 
        
            segment_events AS (
                SELECT
                    ANONYMOUS_ID,
                    DATE_TRUNC(day, TO_DATE(timestamp)) as DS,
                    {% for metric in event_metrics %}
                    COUNT_IF(EVENT_TEXT = '{{ metric }}') as {{ metric | lower }}_count{% if not loop.last %},{% endif %}
                    {% endfor %}
                FROM
                    {{ ref('segment_cloud_tracks') }}
                GROUP BY 1, 2
            ), 
        
            segment_pages AS (
                SELECT
                    ANONYMOUS_ID,
                    DATE_TRUNC(day, TO_DATE(TIMESTAMP)) as DS, 
                    {% for key, value in page_metrics.items() %}
                    COUNT_IF(PATH = '{{ value }}') as {{ key | lower }}_count{% if not loop.last %},{% endif %}
                    {% endfor %}
                FROM 
                    {{ ref('segment_web_pages') }}
                GROUP BY 1, 2 
            ), 
        
            segment_users AS (
                SELECT 
                    ANONYMOUS_ID,
                    MAX(USER_ID) AS USER_ID
                FROM 
                    {{ ref('segment_cloud_tracks') }}
                GROUP BY ANONYMOUS_ID
            ),
        
            user_orgs AS (
                SELECT * FROM {{ ref('cloud_product_user_organizations') }}
            ), 
        
            elementl_anonies AS (
                SELECT
                    DISTINCT ANONYMOUS_ID
                FROM 
                    {{ ref('segment_cloud_tracks') }}
                LEFT OUTER JOIN
                    {{ ref('cloud_product_users') }} USING (USER_ID)
                WHERE
                    IS_ELEMENTL_USER = TRUE AND ANONYMOUS_ID IS NOT NULL
            ),
        
            --- Generate the time spine
            date_spine as (
                SELECT 
                    date_day as DS
                FROM 
                    {{ ref('time_spine') }}
                WHERE 
                    date_day BETWEEN '{{ start_date }}' AND CURRENT_DATE
                    {% if is_incremental() %}
                    AND date_day = DATE_TRUNC('day', DATE('{{ var('min_date') }}'))
                    {% endif %}
            ),
        
            --- Generate the anonymous_id and time spine
            base_spine AS (
                SELECT DISTINCT d.DS, e.ANONYMOUS_ID
                FROM date_spine d
                JOIN segment_events e ON d.DS = e.DS
                WHERE e.ANONYMOUS_ID NOT IN (SELECT ANONYMOUS_ID FROM elementl_anonies)
            
                UNION
            
                SELECT DISTINCT d.DS, s.ANONYMOUS_ID
                FROM date_spine d
                JOIN segment_sessions s ON d.DS = s.DS
                WHERE s.ANONYMOUS_ID NOT IN (SELECT ANONYMOUS_ID FROM elementl_anonies)
            
                UNION
            
                SELECT DISTINCT d.DS, p.ANONYMOUS_ID
                FROM date_spine d
                JOIN segment_pages p ON d.DS = p.DS
                WHERE p.ANONYMOUS_ID NOT IN (SELECT ANONYMOUS_ID FROM elementl_anonies)
            )
        
            SELECT
                base_spine.DS,
                base_spine.ANONYMOUS_ID,
                segment_users.USER_ID,
                user_orgs.ORGANIZATION_ID,
                {% for metric in event_metrics %}
                COALESCE(segment_events.{{ metric | lower }}_count, 0) as {{ metric | lower }}_count,
                {% endfor %}
                {% for key, value in page_metrics.items() %}
                COALESCE(segment_pages.{{ key | lower }}_count, 0) as {{ key | lower }}_count,
                {% endfor %}
                COALESCE(segment_sessions.page_views, 0) as page_views,
                COALESCE(segment_sessions.time_spent, 0) as time_spent
            FROM 
                base_spine
                LEFT OUTER JOIN segment_sessions ON base_spine.ANONYMOUS_ID = segment_sessions.ANONYMOUS_ID AND base_spine.DS = segment_sessions.DS
                LEFT OUTER JOIN segment_events ON base_spine.ANONYMOUS_ID = segment_events.ANONYMOUS_ID AND base_spine.DS = segment_events.DS
                LEFT OUTER JOIN segment_pages ON base_spine.ANONYMOUS_ID = segment_pages.ANONYMOUS_ID AND base_spine.DS = segment_pages.DS
                LEFT OUTER JOIN segment_users ON base_spine.ANONYMOUS_ID = segment_users.ANONYMOUS_ID
                LEFT OUTER JOIN user_orgs ON segment_users.USER_ID = user_orgs.USER_ID
            ORDER BY base_spine.DS
        ```
      ''',
      'group_name': 'metrics_statsig',
      'key': 'sandbox//statsig_user_activity_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.statsig_user_activity_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.statsig_user_activity_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STATSIG_USER_ACTIVITY_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_asset_checks_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_asset_checks
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'asset_check_name',
                    'asset_key'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
        
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name::varchar as asset_check_name,
                value:asset_key:path as asset_key,
                value:description::varchar as description,
                value:additional_asset_keys as additional_asset_keys,
                value:atomic_execution_unit_id as atomic_execution_unit_id,
                value:blocking::boolean as is_blocking,
                value:job_names as job_names
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_asset_checks_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_asset_checks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_asset_checks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_asset_checks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_ASSET_CHECKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_assets_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_assets
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'group_name',
                    'asset_key'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
        
            select
        
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:asset_key:path as asset_key,
                value:backfill_policy as backfill_policy,
                value:code_version as code_version,
                value:compute_kind::varchar as compute_kind,
                value:tags:"dagster/storage_kind"::varchar as storage_kind,
                -- Assemble the list of kinds from dagster/kind prefixed tags and
                -- the compute_kind field
                array_cat(
                    transform(
                        filter(
                            object_keys(value:tags),
                            a -> a like 'dagster/kind/%'
                        ),
                        tg -> substr(tg, 14)
                    ),
                    (
                        case
                            when compute_kind is not null
                                then [compute_kind::varchar]
                            else []
                        end
                    )
                ) as kinds,
                value:depended_by as depended_by,
                value:dependencies as dependencies,
                value:execution_type as execution_type,
                value:freshness_policy as freshness_policy,
                value:graph_name::varchar as graph_name,
                value:group_name::varchar as group_name,
                value:is_observable::boolean as is_observable,
                value:is_source::boolean as is_source,
                value:job_names as job_names,
                value:metadata_entries as metadata_entries,
                value:node_definition_name::varchar as node_definition_name,
                value:op_description::varchar as op_description,
                value:op_name::varchar as op_name,
                value:op_names as op_names,
                value:output_description::varchar as output_description,
                value:output_name::varchar as output_name,
                value:owners as owners,
                value:partitions_def_data as partitions_def_data,
                value:required_top_level_resources as required_top_level_resources,
                value:tags as tags,
                value:automation_condition_snapshot as automation_condition_snapshot,
                value:auto_materialize_policy as auto_materialize_policy,
                metadata_entries like '%dagster/column_schema%' as has_column_schema,
                metadata_entries like '%dagster/relation_identifier%' as has_relation_identifier,
        
                -- Airlift specific fields
                metadata_entries like '%dagster-airlift/task-mapping%' as is_airlift_task_mapped_asset,
                metadata_entries like '%dagster-airlift/dag-mapping%' as is_airlift_dag_mapped_asset,
                is_airlift_task_mapped_asset and execution_type != 'UNEXECUTABLE' as is_airlift_proxied_task_asset,
                is_airlift_dag_mapped_asset and execution_type != 'UNEXECUTABLE' as is_airlift_proxied_dag_asset
                -- 
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_assets_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
            qualify row_number() over (partition by replication_date, organization_id, deployment_id, code_location, group_name, asset_key order by node_definition_name nulls last) = 1
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_assets',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_assets',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_assets',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_ASSETS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_external_repo_metadata_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_external_repo_metadata
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'repo_name'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
        
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name::varchar as repo_name,
                value:metadata as metadata,
                value:utilized_env_vars as utilized_env_vars
            from
                {{ source('cloud_prod_workspace_replication', 'workspace_staging_external_repo_metadata_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_external_repo_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_external_repo_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_external_repo_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_EXTERNAL_REPO_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_jobs_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_jobs
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'job_name',
                    'snapshot_id'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name as job_name,
                value:active_presets as active_presets,
                value:is_legacy_pipeline::boolean as is_legacy_pipeline,
                value:parent_snapshot_id as parent_snapshot_id,
                value:snapshot_id as snapshot_id
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_jobs_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
            qualify row_number() over (partition by replication_date, organization_id, deployment_id, code_location, job_name, snapshot_id order by replication_date desc) = 1 -- enforce uniqueness
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_jobs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_jobs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_jobs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_JOBS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_metadata_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_metadata
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:code_deployment_metadata as code_deployment_metadata,
                value:container_image as container_image,
                value:dagster_library_versions as dagster_library_versions,
                value:executable_path as executable_path
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_metadata_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_partitions_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_partitions
        
        #### Raw SQL:
        ```sql
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name::varchar as partition_name,
                value:backfill_policy as backfill_policy,
                value:external_partitions_data as external_partitions_data,
                value:mode as mode,
                value:pipeline_name::varchar as pipeline_name,
                value:solid_selection as solid_selection
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_partitions_ext') }}
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_partitions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_aws__code_location_partitions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_partitions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_PARTITIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_pipelines_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_pipelines
        
        #### Raw SQL:
        ```sql
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name as pipeline_name,
                value:active_presets as active_presets,
                value:is_job::boolean as is_job,
                value:parent_pipeline_snapshot as parent_pipeline_snapshot,
                value:pipeline_snapshot as pipeline_snapshot
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_pipelines_ext') }}
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_pipelines',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_aws__code_location_pipelines',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_pipelines',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_PIPELINES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_repo_metadata_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_repo_metadata
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'repo_name'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:code_pointer as code_pointer,
                value:repo_name::varchar as repo_name
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_repo_metadata_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_repo_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_repo_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_repo_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_REPO_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_resources_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_resources
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'name',
                    'asset_keys_using'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name::varchar as name,
                value:asset_keys_using as asset_keys_using,
                value:config_field_snaps as config_field_snaps,
                value:config_schema_snap as config_schema_snap,
                value:configured_values as configured_values,
                value:dagster_maintained::boolean as dagster_maintained,
                value:is_top_level::boolean as is_top_level,
                value:job_ops_using as job_ops_using,
                value:nested_resources as nested_resources,
                value:parent_resources as parent_resources,
                value:resource_snapshot as resource_snapshot,
                value:resource_type::varchar as resource_type,
                value:schedules_using as schedules_using,
                value:sensors_using as sensors_using
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_resources_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
            qualify row_number() over (partition by replication_date, organization_id, deployment_id, code_location, name, asset_keys_using order by replication_date) = 1
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_resources',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_resources',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_resources',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_RESOURCES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_schedules_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_schedules
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'name'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name::varchar as name,
                value:cron_schedule::varchar as cron_schedule,
                value:description::varchar as description,
                value:environment_vars as environment_vars,
                value:execution_timezone as execution_timezone,
                value:mode::varchar as mode,
                value:partition_set_name::varchar as partition_set_name,
                value:pipeline_name::varchar as pipeline_name,
                value:solid_selection as solid_selection
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_schedules_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
            qualify row_number() over (partition by replication_date, organization_id, deployment_id, code_location, name order by replication_date) = 1
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_schedules',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_schedules',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_schedules',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_SCHEDULES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'workspace_staging_sensors_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__code_location_sensors
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="L_WAREHOUSE",
                materialized='incremental',
                unique_key=[
                    'replication_date',
                    'organization_id',
                    'deployment_id',
                    'code_location',
                    'name',
                    'target_dict'
                ],
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
            select
                replication_date,
                organization_id,
                deployment_id,
                code_location,
                value:name::varchar as name,
                value:asset_selection as asset_selection,
                value:default_status as default_status,
                value:description::varchar as descriptio,
                value:metadata as metadata,
                value:min_interval as min_interval,
                value:mode::varchar as mode,
                value:run_tags as run_tags,
                value:sensor_type as sensor_type,
                value:solid_selection as solid_selection,
                value:target_dict as target_dict
            from {{ source('cloud_prod_workspace_replication', 'workspace_staging_sensors_ext') }}
            {% if is_incremental() %}
            where
                replication_date >= '{{ var('min_date') }}'::date - 2 
                and replication_date < '{{ var('max_date') }}'::date
            {% endif %}
            qualify row_number() over (partition by replication_date, organization_id, deployment_id, code_location, name, target_dict order by replication_date) = 1
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__code_location_sensors',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.stg_aws__code_location_sensors',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__code_location_sensors',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__CODE_LOCATION_SENSORS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'ext_common_room_activities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__common_room_activities
        
        #### Raw SQL:
        ```sql
            select
                value:activity_type::varchar as activity_type,
                value:service_name::varchar as service_name,
                value:activity_timestamp::timestamp as activity_timestamp,
                value:full_name::varchar as full_name,
                value:primary_email::varchar as primary_email,
                value:contact_token::varchar as contact_token,
                filter(split(value:emails, ','), x -> length(x::varchar) > 0) as emails,
                filter(split(value:profiles, ','), x -> length(x::varchar) > 0) as profiles,
                value:first_activity_date::varchar as first_activity_date,
                replication_date
            from {{ source('common_room', 'ext_common_room_activities') }}
            qualify count(*) over (partition by primary_email, activity_type, service_name, activity_timestamp) = 1 -- deduplicate activities
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__common_room_activities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_aws__common_room_activities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__common_room_activities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__COMMON_ROOM_ACTIVITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'ext_common_room_community_members',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__common_room_community_members
        
        #### Raw SQL:
        ```sql
            select
                value:primary_email::varchar as primary_email,
                value:full_name::varchar as full_name,
                value:organization_domain::varchar as organization_domain,
                value:organization_name::varchar as organization_name,
                value:job_title::varchar as job_title,
                value:location::varchar as location,
                filter(split(value:contact_tokens, ','), x -> length(x::varchar) > 0) as contact_tokens,
                filter(split(value:emails, ','), x -> length(x::varchar) > 0) as emails,
                filter(split(value:profiles, ','), x -> length(x::varchar) > 0) as profiles,
                filter(split(value:segment_names, ','), x -> length(x::varchar) > 0) as segment_names,
                filter(split(value:tags, ','), x -> length(x::varchar) > 0) as tags,
                value:first_activity_date::date as first_activity_date,
                value:first_activity_source::varchar as first_activity_source,
                value:last_activity_date::date as last_activity_date,
                value:last_activity_source::varchar as last_activity_source,
                replication_date
            from {{ source('common_room', 'ext_common_room_community_members') }}
            qualify rank() over (order by replication_date desc) = 1
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__common_room_community_members',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_aws__common_room_community_members',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__common_room_community_members',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__COMMON_ROOM_COMMUNITY_MEMBERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'ext_common_room_groups',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__common_room_groups
        
        #### Raw SQL:
        ```sql
            select
                value:organization_domain::varchar as organization_domain,
                value:organization_name::varchar as organization_name,
                value:location::varchar as location,
                value:employee_count::varchar as employee_count,
                value:contact_count::varchar as contact_count,
                value:approx_capital_raised::varchar as approx_capital_raised,
                value:approx_revenue_max::varchar as approx_revenue_max,
                value:approx_revenue_min::varchar as approx_revenue_min,
                filter(split(value:segment_names, ','), x -> length(x::varchar) > 0) as segment_names,
                filter(split(value:tags, ','), x -> length(x::varchar) > 0) as tags,
                value:first_activity_date::date as first_activity_date,
                value:first_activity_source::varchar as first_activity_source,
                value:last_activity_date::date as last_activity_date,
                value:last_activity_source::varchar as last_activity_source,
                replication_date
            from {{ source('common_room', 'ext_common_room_groups') }}
            qualify rank() over (order by replication_date desc) = 1
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__common_room_groups',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_aws__common_room_groups',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__common_room_groups',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__COMMON_ROOM_GROUPS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'dev',
              'user_roles_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_aws__user_licensed_roles
        
        #### Raw SQL:
        ```sql
            {{ config(materialized = 'table') }}
        
        
            select
                filename,
                replication_date,
                organization_id,
                value as user_role_list
            from {{ source('cloud_prod_workspace_replication', 'user_roles_ext') }}
        ```
      ''',
      'group_name': 'staging_aws',
      'key': 'sandbox//stg_aws__user_licensed_roles',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.stg_aws__user_licensed_roles',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_aws__user_licensed_roles',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_AWS__USER_LICENSED_ROLES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'bingads',
              'ad_group_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_bing__ad_group_history
        
        #### Raw SQL:
        ```sql
            with source as (
        
              select * from {{ source('bing', 'ad_group_history') }}
            ),
        
            renamed as (
          
              select
                id as ad_group_id,
                name ad_group_name,
                modified_time,
                status,
                campaign_id,
                start_date,
                end_date,
                ad_rotation,
                language,
                bid_adjustment,
                bid_boost_value,
                bid_option,
                bid_strategy_type,
                cpc_bid,
                inherited_bid_strategy_type,
                maximum_bid,
                network_distribution,
                privacy_status,
                target_setting,
                tracking_template,
                _fivetran_synced,
              from source
            )
            select * from renamed
        ```
      ''',
      'group_name': 'staging_bing',
      'key': 'sandbox//stg_bing__ad_group_history',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_bing__ad_group_history',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_bing__ad_group_history',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_BING__AD_GROUP_HISTORY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'bingads',
              'ad_group_performance_daily_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_bing__ad_group_performance_daily_report
        
        #### Raw SQL:
        ```sql
            with source as (
                    select * from {{ source('bing', 'ad_group_performance_daily_report') }}
              ),
              renamed as (
              
                  select
                    date,
                    account_id,
                    campaign_id,
                    ad_group_id,
                    impressions,
                    clicks,
                    ctr,
                    average_cpc,
                    spend,
                    ad_distribution,
                    bid_match_type,
                    currency_code,
                    delivered_match_type,
                    device_os,
                    device_type,
                    language,
                    network,
                    top_vs_other,
                    average_position,
                    conversions,
                    conversions_qualified,
                    conversion_rate,
                    quality_score,
                    expected_ctr,
                    ad_relevance,
                    landing_page_experience,
                    historical_quality_score,
                    historical_expected_ctr,
                    historical_ad_relevance,
                    historical_landing_page_experience,
                    phone_impressions,
                    phone_calls,
                    assists,
                    revenue,
                    return_on_ad_spend,
                    final_url_suffix,
                    all_conversions,
                    all_conversions_qualified,
                    all_revenue,
                    all_conversion_rate,
                    all_return_on_ad_spend,
                    view_through_conversions,
                    _fivetran_synced,
                  from source
              )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_bing',
      'key': 'sandbox//stg_bing__ad_group_performance_daily_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_bing__ad_group_performance_daily_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_bing__ad_group_performance_daily_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_BING__AD_GROUP_PERFORMANCE_DAILY_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'bingads',
              'campaign_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_bing__campaign_history
        
        #### Raw SQL:
        ```sql
            with source as (
        
              select * from {{ source('bing', 'campaign_history') }}
            ),
        
            renamed as (
        
              select
                id as campaign_id,
                name as campaign_name,
                status,
                modified_time,
                budget,
                account_id,
                priority,
                language,
                website,
                budget_id,
                budget_type,
                type,
                bid_adjustment,
                bid_strategy_id,
                bid_strategy_max_cpc,
                bid_strategy_name,
                bid_strategy_target_ad_position,
                bid_strategy_target_cpa,
                bid_strategy_target_impression_share,
                bid_strategy_target_roas,
                bid_strategy_type,
                country_code,
                domain_language,
                local_inventory_ads_enabled,
                store_id,
                sub_type,
                time_zone,
                tracking_template,
                ad_schedule_use_searcher_time_zone,
                target_setting,
                experiment_id,
                _fivetran_synced,
        
              from source
            )
            select * from renamed
        ```
      ''',
      'group_name': 'staging_bing',
      'key': 'sandbox//stg_bing__campaign_history',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_bing__campaign_history',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_bing__campaign_history',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_BING__CAMPAIGN_HISTORY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'dlt_pipelines_builds',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_buildkite__builds
        
        #### Raw SQL:
        ```sql
            select
        
                id,
                graphql_id,
                url,
                web_url,
                number,
                state,
                blocked,
                blocked_state,
                message,
                commit,
                branch,
                env__dagster_branch,
                env__dagster_commit_hash,
                env__combined_commit_hash,
                env__internal_commit_hash,
                source,
                author__username,
                author__name,
                {{ email_cleaner('author__email') }} as author__email,
                creator__id,
                creator__graphql_id,
                creator__name,
                {{ email_cleaner('creator__email') }} as creator__email,
                creator__avatar_url,
                creator__created_at,
                created_at,
                scheduled_at,
                started_at,
                finished_at,
                meta_data__buildkite_git_commit,
                pipeline__id,
                pipeline__graphql_id,
                pipeline__url,
                pipeline__web_url,
                pipeline__name,
                pipeline__description,
                pipeline__slug,
                pipeline__repository,
                pipeline__branch_configuration,
                pipeline__default_branch,
                pipeline__skip_queued_branch_builds,
                pipeline__skip_queued_branch_builds_filter,
                pipeline__cancel_running_branch_builds,
                pipeline__cancel_running_branch_builds_filter,
                pipeline__allow_rebuilds,
                pipeline__provider__id,
                pipeline__provider__settings__build_branches,
                pipeline__provider__settings__build_merge_group_checks_requested,
                pipeline__provider__settings__build_pull_request_base_branch_changed,
                pipeline__provider__settings__build_pull_request_forks,
                pipeline__provider__settings__build_pull_request_labels_changed,
                pipeline__provider__settings__build_pull_request_ready_for_review,
                pipeline__provider__settings__build_pull_requests,
                pipeline__provider__settings__build_tags,
                pipeline__provider__settings__cancel_deleted_branch_builds,
                pipeline__provider__settings__filter_enabled,
                pipeline__provider__settings__prefix_pull_request_fork_branch_names,
                pipeline__provider__settings__publish_blocked_as_pending,
                pipeline__provider__settings__publish_commit_status_per_step,
                pipeline__provider__settings__publish_commit_status,
                pipeline__provider__settings__pull_request_branch_filter_enabled,
                pipeline__provider__settings__separate_pull_request_statuses,
                pipeline__provider__settings__skip_builds_for_existing_commits,
                pipeline__provider__settings__skip_pull_request_builds_for_existing_commits,
                pipeline__provider__settings__trigger_mode,
                pipeline__provider__settings__use_step_key_as_commit_status,
                pipeline__provider__settings__repository,
                pipeline__provider__settings__pull_request_branch_filter_configuration,
                pipeline__provider__settings__filter_condition,
                pipeline__provider__webhook_url,
                pipeline__builds_url,
                pipeline__badge_url,
                pipeline__created_by__id,
                pipeline__created_by__graphql_id,
                pipeline__created_by__name,
                {{ email_cleaner('pipeline__created_by__email') }} as pipeline__created_by__email,
                pipeline__created_by__avatar_url,
                pipeline__created_by__created_at,
                pipeline__created_at,
                pipeline__scheduled_builds_count,
                pipeline__running_builds_count,
                pipeline__scheduled_jobs_count,
                pipeline__running_jobs_count,
                pipeline__waiting_jobs_count,
                pipeline__visibility,
                pipeline__configuration,
                env__oss_compat_slim,
                env__dagster_checkout_depth,
                env__dagster_ui_only_oss_change,
                meta_data__push_serverless_agent,
                meta_data__snapshot_db,
                meta_data__lock_timeout,
                meta_data__migration_type,
                meta_data__statement_timeout,
                _dlt_load_id,
                _dlt_id
        
            from {{ source('buildkite', 'builds') }}
        ```
      ''',
      'group_name': 'staging_buildkite',
      'key': 'sandbox//stg_buildkite__builds',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_buildkite__builds',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_buildkite__builds',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_BUILDKITE__BUILDS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'alert_policies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'alert_policies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__alert_policies
        
        #### Raw SQL:
        ```sql
            select
        
                id as alert_policy_id,
                uuid as alert_policy_uuid,
                name as alert_policy_name,
                organization_id,
                deployment_id,
                parse_json(serialized_alert_policy) as serialized_alert_policy,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", "alert_policies") }}
        
            union
        
            select
        
                id as alert_policy_id,
                uuid as alert_policy_uuid,
                name as alert_policy_name,
                organization_id,
                deployment_id,
                parse_json(serialized_alert_policy) as serialized_alert_policy,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product_shard1", "alert_policies") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__alert_policies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__alert_policies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__alert_policies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ALERT_POLICIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'alerts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'alerts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__alerts
        
        #### Raw SQL:
        ```sql
            select
                0 as shard_id,
                id as alert_id,
                organization_id,
                deployment_id,
                event_type,
                status,
                created_at,
                resolved_at,
                instigator_origin_id,
                parse_json(metadata) as metadata
            from {{ source('cloud_product', 'alerts') }}
        
            union
        
            select
                1 as shard_id,
                id as alert_id,
                organization_id,
                deployment_id,
                event_type,
                status,
                created_at,
                resolved_at,
                instigator_origin_id,
                parse_json(metadata) as metadata
            from {{ source('cloud_product_shard1', 'alerts') }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__alerts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__alerts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__alerts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ALERTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'alerts_alert_policies_new',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__alerts_alert_policies
        
        #### Raw SQL:
        ```sql
            select
        
                id as alert_alert_policy_id,
                alert_policy_id as alert_policy_uuid,
                alert_id,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", "alerts_alert_policies_new") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__alerts_alert_policies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__alerts_alert_policies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__alerts_alert_policies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ALERTS_ALERT_POLICIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'asset_keys',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'asset_keys',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Asset keys
        
        #### Raw SQL:
        ```sql
            select
        
                0 as shard_id,
                id as asset_key_id,
        
                deployment_id
                    as last_run_id,
                organization_id,
        
                to_array(parse_json(asset_key)) as asset_key,
                parse_json(asset_details) as asset_details,
                parse_json(last_materialization) as last_materialization,
        
                create_timestamp as created_at,
                last_materialization_timestamp as last_materialized_at,
                wipe_timestamp as wiped_at
        
        
            from {{ source("cloud_product", "asset_keys") }}
        
            union
        
            select
        
                1 as shard_id,
                id as asset_key_id,
        
                deployment_id
                    as last_run_id,
                organization_id,
        
                to_array(parse_json(asset_key)) as asset_key,
                parse_json(asset_details) as asset_details,
                parse_json(last_materialization) as last_materialization,
        
                create_timestamp as created_at,
                last_materialization_timestamp as last_materialized_at,
                wipe_timestamp as wiped_at
        
        
            from {{ source("cloud_product_shard1", "asset_keys") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__asset_keys',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='asset_key_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__asset_keys',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__asset_keys',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ASSET_KEYS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'asset_materializations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'asset_materializations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__asset_materializations
        
        #### Raw SQL:
        ```sql
            select
        
                0 as shard_id,
                event_id as event_log_id,
                run_id,
                organization_id,
                deployment_id,
                asset_key,
                parse_json(event):step_key::varchar as step_key,
                parse_json(event):pipeline_name::varchar as pipeline_name,
                partition,
                timestamp,
                code_version,
                data_version,
                parse_json(event) as event_data
        
            from {{ source("cloud_product", "asset_materializations") }}
        
            union
        
            select
        
                1 as shard_id,
                event_id as event_log_id,
                run_id,
                organization_id,
                deployment_id,
                asset_key,
                parse_json(event):step_key::varchar as step_key,
                parse_json(event):pipeline_name::varchar as pipeline_name,
                partition,
                timestamp,
                code_version,
                data_version,
                parse_json(event) as event_data
        
            from {{ source("cloud_product_shard1", "asset_materializations") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__asset_materializations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__asset_materializations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__asset_materializations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ASSET_MATERIALIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'asset_observations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'asset_observations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__asset_observations
        
        #### Raw SQL:
        ```sql
            select
        
                0 as shard_id,
                event_id as event_log_id,
                run_id,
                organization_id,
                deployment_id,
                asset_key,
                parse_json(event):step_key::varchar as step_key,
                parse_json(event):pipeline_name::varchar as pipeline_name,
                partition,
                timestamp,
                data_version,
                parse_json(event) as event_data
        
            from {{ source("cloud_product", "asset_observations") }}
        
            union
        
            select
        
                1 as shard_id,
                event_id as event_log_id,
                run_id,
                organization_id,
                deployment_id,
                asset_key,
                parse_json(event):step_key::varchar as step_key,
                parse_json(event):pipeline_name::varchar as pipeline_name,
                partition,
                timestamp,
                data_version,
                parse_json(event) as event_data
        
            from {{ source("cloud_product_shard1", "asset_observations") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__asset_observations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__asset_observations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__asset_observations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ASSET_OBSERVATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'catalog_views',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__catalog_views
        
        #### Raw SQL:
        ```sql
            select
        
                id as catalog_view_id,
                organization_id,
                deployment_id,
                creator_id as created_by,
                parse_json(serialized_catalog_view) as serialized_catalog_view,
                is_private,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", "catalog_views") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__catalog_views',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__catalog_views',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__catalog_views',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__CATALOG_VIEWS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'customer_info',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Stripe-related customer info for organizations
        
        #### Raw SQL:
        ```sql
            select
        
                id as customer_info_id,
                organization_id,
                stripe_customer_id,
                plan_type,
                status,
                parse_json(serialized) as customer_metadata,
                create_timestamp as created_at
        
            from {{ source("cloud_product", "customer_info") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__customer_info',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__customer_info',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__customer_info',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__CUSTOMER_INFO',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'deployments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster deployments
        
        #### Raw SQL:
        ```sql
            select
        
                id as deployment_id,
                organization_id,
        
                name as deployment_name,
                subdomain,
                coalesce(status, 'ACTIVE') as status,
        
                coalesce(status, 'ACTIVE') = 'ACTIVE' as is_active,
                dev_deployment_owner is not null as is_sandbox,
                coalesce(is_branch_deployment::boolean, false) as is_branch_deployment,
                coalesce(agent_type, 'HYBRID') as agent_type,
        
                coalesce(agent_type, 'HYBRID') = 'HYBRID' as is_hybrid,
                coalesce(agent_type, 'HYBRID') = 'SERVERLESS' as is_serverless,
        
                parse_json(deployment_metadata) as deployment_metadata,
                parse_json(deployment_metadata):branch_deployment_metadata:branch_name::string as branch_name,
                parse_json(deployment_metadata):branch_deployment_metadata:branch_url::string as branch_url,
                parse_json(deployment_metadata):branch_deployment_metadata:repo_name::string as repo_name,
        
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", "deployments") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__deployments',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='deployment_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                The type of agent running the deployment, e.g. serverless
                or hybrid
  
              ''',
              name='agent_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__deployments',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__deployments',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__DEPLOYMENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'event_logs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'event_logs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster event logs
        
        #### Raw SQL:
        ```sql
            {{
                config(
                    snowflake_warehouse="L_WAREHOUSE",
                    materialized='incremental',
                    unique_key='event_log_id',
                    cluster_by=["organization_id", "deployment_id", "dagster_event_type", "run_id", "step_key"],
                    incremental_strategy='merge',
                    incremental_predicates=["DBT_INTERNAL_DEST.created_at > dateadd(day, -7, current_date)"],
                    on_schema_change='append_new_columns'
                )
            }}
        
            with main as (
                select * from {{ source("cloud_product", "event_logs") }}
            ),
        
            shard1 as (
                select * from {{ source("cloud_product_shard1", "event_logs") }}
            )
        
            select
        
                0 as shard_id,
                id as event_log_id,
        
                organization_id,
                deployment_id,
                run_id,
        
                dagster_event_type,
                asset_key,
                step_key,
        
                event as event_data,
        
                timestamp as created_at
        
            from main
            where -- noqa: disable=LT02
                {{ limit_dates_for_dev(ref_date = 'timestamp') }}
                and dagster_event_type is not null
                {% if is_incremental() -%}
                    and event_log_id > (select max(event_log_id) from {{ this }} where shard_id = 0)
                {% endif %}
        
            union
        
            select
        
                1 as shard_id,
                id as event_log_id,
        
                organization_id,
                deployment_id,
                run_id,
        
                dagster_event_type,
                asset_key,
                step_key,
        
                event as event_data,
        
                timestamp as created_at
        
            from shard1
            where -- noqa: disable=LT02
                {{ limit_dates_for_dev(ref_date = 'timestamp') }}
                and dagster_event_type is not null
                {% if is_incremental() -%}
                    and event_log_id > (
                        case
                            when (
                                (select count(*) from {{ this }} where shard_id = 1) > 0
                            ) then (select max(event_log_id) from {{ this }} where shard_id = 1)
                            else 0
                        end
                    )
                {% endif %}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__event_logs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Event Log Id.
  
              ''',
              name='event_log_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__event_logs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__event_logs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__EVENT_LOGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'jobs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'jobs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__jobs
        
        #### Raw SQL:
        ```sql
            select
        
                0 as shard_id,
                id as job_id,
                organization_id,
                deployment_id,
                selector_id,
                job_origin_id,
                repository_origin_id,
                status as job_status,
                job_type,
                job_body,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", "jobs") }}
        
            union
        
            select
        
                1 as shard_id,
                id as job_id,
                organization_id,
                deployment_id,
                selector_id,
                job_origin_id,
                repository_origin_id,
                status as job_status,
                job_type,
                job_body,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product_shard1", "jobs") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__jobs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__jobs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__jobs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__JOBS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'notifications',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'notifications',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__notifications
        
        #### Raw SQL:
        ```sql
            select
                0 as shard_id,
                id as alert_id,
                organization_id,
                deployment_id,
                send_time as sent_at,
                status,
                parse_json(metadata) as metadata
            from {{ source('cloud_product', 'notifications') }}
        
            union
        
            select
                1 as shard_id,
                id as alert_id,
                organization_id,
                deployment_id,
                send_time as sent_at,
                status,
                parse_json(metadata) as metadata
            from {{ source('cloud_product_shard1', 'notifications') }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__notifications',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__notifications',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__notifications',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__NOTIFICATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'onboarding_checklist',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__onboarding_checklist
        
        #### Raw SQL:
        ```sql
            select
                {{ dbt_utils.generate_surrogate_key(['organization_id', 'entry_key']) }} as primary_id,
                organization_id,
                entry_key,
                status,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", 'onboarding_checklist') }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__onboarding_checklist',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__onboarding_checklist',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__onboarding_checklist',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ONBOARDING_CHECKLIST',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster Organizations
        
        #### Raw SQL:
        ```sql
            select
        
                id as organization_id,
        
                name as organization_name,
                public_id,
        
                internal as is_internal,
                status, -- can be null, what does that mean?
        
                plan_type,
        
                parse_json(organization_metadata) as organization_metadata,
                parse_json(organization_settings) as organization_settings,
                not is_null_value(parse_json(organization_metadata):saml_metadata) as has_saml_sso,
        
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", "organizations") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Organization status, note that a small number of orgs have a NULL
                status field
  
              ''',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Whether the organization has SAML SSO enabled
  
              ''',
              name='has_saml_sso',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                The type of plan the organization is on.
  
              ''',
              name='plan_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'permissions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster permissions
        
        #### Raw SQL:
        ```sql
            select
        
                id as permission_id,
                organization_id,
                deployment_id,
                "GRANT" as permission_grant,
                replace(
                    json_extract_path_text(
                        scope, 'deployment_scope.__enum__'
                    ), 'PermissionDeploymentScope.', ''
                ) as scope, -- Pull the scope of the grant out of the json "scope" field.
                create_timestamp as created_at
        
        
            from {{ source("cloud_product", "permissions") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__permissions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='permission_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                The type of permission granted, e.g. `VIEWER`, `ADMIN`
  
              ''',
              name='permission_grant',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__permissions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__permissions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__PERMISSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__repository_locations_data
        
        #### Raw SQL:
        ```sql
            select
                id as repository_location_id,
                organization_id,
                deployment_id,
                asset_keys,
                group_names,
                parse_json(dagster_library_versions) as dagster_library_versions,
                create_timestamp as created_at,
                update_timestamp as updated_at
            from {{ source("cloud_product", "repository_locations_data") }}
        
            union
        
            select
                id as repository_location_id,
                organization_id,
                deployment_id,
                asset_keys,
                group_names,
                parse_json(dagster_library_versions) as dagster_library_versions,
                create_timestamp as created_at,
                update_timestamp as updated_at
            from {{ source("cloud_product_shard1", "repository_locations_data") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__repository_locations_data',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__repository_locations_data',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__repository_locations_data',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__REPOSITORY_LOCATIONS_DATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'run_tags',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'run_tags',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__run_tags
        
        #### Raw SQL:
        ```sql
            select
        
                0 as shard_id,
                id as run_tag_id,
                run_id,
                organization_id,
                deployment_id,
        
                key,
                value
        
            from {{ source('cloud_product', 'run_tags') }}
        
            union
        
            select
        
                1 as shard_id,
                id as run_tag_id,
                run_id,
                organization_id,
                deployment_id,
        
                key,
                value
        
            from {{ source('cloud_product_shard1', 'run_tags') }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__run_tags',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__run_tags',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__run_tags',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__RUN_TAGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'runs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster runs
        
        #### Raw SQL:
        ```sql
            select
        
                0 as shard_id,
                run_id,
                id as row_id,
        
                organization_id,
                snapshot_id,
                deployment_id,
        
                pipeline_name as job_name,
                repository_label,
                split_part(repository_label, '@', 1) as repository_name,
                split_part(repository_label, '@', 2) as code_location_name,
                status,
                mode,
                start_time as started_at,
                end_time as ended_at,
        
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source('cloud_product', 'runs') }}
            where
                {{ limit_dates_for_dev(ref_date = 'create_timestamp') }}
            /* At least one duplicate run_id was identified, so we pick the latest
            entry using the primary_id column */
            qualify row_number() over (partition by run_id order by row_id desc) = 1
        
            union
        
            select
        
                1 as shard_id,
                run_id,
                id as row_id,
        
                organization_id,
                snapshot_id,
                deployment_id,
        
                pipeline_name as job_name,
                repository_label,
                split_part(repository_label, '@', 1) as repository_name,
                split_part(repository_label, '@', 2) as code_location_name,
                status,
                mode,
                start_time as started_at,
                end_time as ended_at,
        
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source('cloud_product_shard1', 'runs') }}
            where
                {{ limit_dates_for_dev(ref_date = 'create_timestamp') }}
            /* At least one duplicate run_id was identified, so we pick the latest
            entry using the primary_id column */
            qualify row_number() over (partition by run_id order by row_id desc) = 1
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__runs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='run_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                Run status, e.g. STARTED, FAILURE
  
              ''',
              name='status',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__runs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__runs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__RUNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'session_tokens',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster session tokens
        
        #### Raw SQL:
        ```sql
            select
        
                id as session_token_id,
                organization_id,
                user_id,
                oauth_provider,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", 'session_tokens') }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__session_tokens',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='session_token_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__session_tokens',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__session_tokens',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__SESSION_TOKENS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'teams',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__teams
        
        #### Raw SQL:
        ```sql
            select
                id as team_id,
                name,
                organization_id,
                creator_id,
                scim_external_id,
                metadata,
                create_timestamp,
                update_timestamp
            from {{ source("cloud_product", "teams") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__teams',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__teams',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__teams',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__TEAMS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'teams_permissions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__teams_permissions
        
        #### Raw SQL:
        ```sql
            select
                id as teams_permissions_id,
                permission_id,
                team_id,
                organization_id,
                create_timestamp
            from {{ source("cloud_product", "teams_permissions") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__teams_permissions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__teams_permissions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__teams_permissions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__TEAMS_PERMISSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'teams_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_cloud_product__teams_users
        
        #### Raw SQL:
        ```sql
            select
                id as teams_users_id,
                user_id,
                team_id,
                organization_id,
                create_timestamp
            from {{ source("cloud_product", "teams_users") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__teams_users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_cloud_product__teams_users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__teams_users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__TEAMS_USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'user_events_counts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product_shard1',
              'user_events_counts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily count of user events per organization
        
        #### Raw SQL:
        ```sql
            with main as (
                select * from {{ source("cloud_product", "user_events_counts") }}
            ),
        
            shard1 as (
                select * from {{ source("cloud_product_shard1", "user_events_counts") }}
            )
        
            select
                0 as shard_id,
                date,
                organization_id,
                user_events_count
            from main
        
            union
        
            select
                1 as shard_id,
                date,
                organization_id,
                user_events_count
            from shard1
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__user_events_counts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                ID indicating which shard the data comes from (0 for main, 1 for shard1)
  
              ''',
              name='shard_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date of the events',
              name='date',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Organization ID',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Count of user events for the organization on that date',
              name='user_events_count',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__user_events_counts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__user_events_counts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__USER_EVENTS_COUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'users_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'users_organizations_current_state_ids',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Mapping of users to organizations
        
        #### Raw SQL:
        ```sql
            select
        
                uo.id as user_organization_id,
                uo.organization_id,
                uo.user_id,
                uo.create_timestamp as created_at,
                uo.activated as is_activated
        
            from {{ source("cloud_product", 'users_organizations') }} uo
                inner join {{ source("cloud_product", 'users_organizations_current_state_ids') }} uo_current using (id)
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__user_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__user_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__user_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__USER_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Users
        
        #### Raw SQL:
        ```sql
            select
        
                id as user_id,
                {{ email_cleaner('email') }} as email,
                name as user_name,
                title as user_title,
                first_name,
                last_name,
                experience,
                email like '%@elementl.%' or email like '%@dagsterlabs.%' as is_elementl_user,
                create_timestamp as created_at,
                update_timestamp as updated_at
        
            from {{ source("cloud_product", 'users') }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sling',
              'cloud_product',
              'users_permissions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster users permissions, maps a permission id to a user id. Note that
        there can be a many to many relationship between users and permissions,
        and only the user_permission_id is unique in this table.
        
        
        #### Raw SQL:
        ```sql
            select
        
                id as user_permission_id,
                permission_id,
                organization_id,
                user_id,
                create_timestamp as created_at
        
            from {{ source("cloud_product", "users_permissions") }}
        ```
      ''',
      'group_name': 'staging_cloud_product',
      'key': 'sandbox//stg_cloud_product__users_permissions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_permission_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_cloud_product__users_permissions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_cloud_product__users_permissions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_CLOUD_PRODUCT__USERS_PERMISSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'conversation_contexts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_gong__conversation_contexts
        
        #### Raw SQL:
        ```sql
            with source as (
        
              select * from {{ source('gong', 'conversation_contexts') }}
            ),
        
            renamed as (
        
              select
                fields_snapshot, 
                mapped_fields_snapshot, 
                real_run_time, 
                conversation_key, 
                object_id, 
                object_type, 
                row_id, 
                etl_modified_datetime,
                is_deleted
              from source
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_gong',
      'key': 'sandbox//stg_gong__conversation_contexts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_gong__conversation_contexts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_gong__conversation_contexts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GONG__CONVERSATION_CONTEXTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'conversation_participants',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_gong__conversation_participants
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('gong', 'conversation_participants') }}
            ),
        
            renamed as (
        
                select
                    row_id, 
                    conversation_key, 
                    name, 
                    {{ email_cleaner('email_address') }} as email,
                    phone_number, 
                    associated_object_type, 
                    speaker_id, 
                    mapped_fields_snapshot, 
                    fields_snapshot, 
                    affiliation, 
                    type, 
                    invitee_status, 
                    user_id, 
                    associated_object_id, 
                    etl_modified_datetime,
                    is_deleted
        
                from source
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_gong',
      'key': 'sandbox//stg_gong__conversation_participants',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_gong__conversation_participants',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_gong__conversation_participants',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GONG__CONVERSATION_PARTICIPANTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'conversations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_gong__conversations
        
        #### Raw SQL:
        ```sql
            with source as (
              
                  select * from {{ source('gong', 'conversations') }}
            ),
        
            renamed as (
            
              select
                conversation_id, 
                conversation_key, 
                workspace_ids, 
                conversation_type, 
                conversation_datetime, 
                row_id, 
                etl_modified_datetime,
                is_deleted
              from source
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_gong',
      'key': 'sandbox//stg_gong__conversations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_gong__conversations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_gong__conversations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GONG__CONVERSATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'emails',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_gong__emails
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('gong', 'emails') }}
            ),
        
            renamed as (
            
                select
                    conversation_id, 
                    conversation_key, 
                    is_auto_submitted, 
                    auto_submitted_type, 
                    is_meeting_invite, 
                    direction, 
                    ooo_return_date, 
                    sent_datetime as sent_at, 
                    workspace_ids, 
                    row_id, 
                    is_deleted, 
                    etl_modified_datetime 
                from source
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_gong',
      'key': 'sandbox//stg_gong__emails',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_gong__emails',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_gong__emails',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GONG__EMAILS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'meetings',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_gong__meetings
        
        #### Raw SQL:
        ```sql
            with source as (
        
              select * from {{ source('gong', 'meetings') }}
            ),
        
            renamed as (
              select
                row_id, 
                conversation_key, 
                title as meeting_title, 
                type as meeting_event_type, 
                created_datetime as created_at, 
                modified_datetime as modified_at, 
                start_datetime as start_at, 
                end_datetime as end_at, 
                organizer_user_id, 
                is_canceled, 
                is_recurring, 
                is_internal, 
                is_all_day, 
                conversation_id, 
                call_id, 
                call_conversation_key, 
                workspace_ids, 
                etl_modified_datetime,
                is_deleted
              from source
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_gong',
      'key': 'sandbox//stg_gong__meetings',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_gong__meetings',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_gong__meetings',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GONG__MEETINGS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'gong',
              'gong_data_cloud',
              'users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_gong__users
        
        #### Raw SQL:
        ```sql
            with source as (
                
                select * from {{ source('gong', 'users') }}
            ),
        
            renamed as (
            
                select
                    user_id, 
                    {{ email_cleaner('email_address') }} as email,
                    first_name, 
                    last_name, 
                    concat(first_name, ' ', last_name) as name,
                    time_zone, 
                    locale, 
                    manager_id, 
                    title, 
                    active, 
                    licensed, 
                    should_record_web_conference_calls, 
                    should_sync_emails, 
                    should_import_telephony_calls, 
                    valid_to_datetime, 
                    valid_from_datetime, 
                    row_id, 
                    etl_modified_datetime, 
                    is_deleted
                from source
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_gong',
      'key': 'sandbox//stg_gong__users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_gong__users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_gong__users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GONG__USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_ads',
              'ad_group_stats',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_ads__ad_group_stats
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('google_ads_raw', 'ad_group_stats') }}
        
            ),
        
            final as (
        
                select
                    customer_id,
                    date,
                    id::varchar as ad_group_id,
                    campaign_id::varchar as campaign_id,
                    impressions,
                    clicks,
                    cost_micros,
                    round(cost_micros / 1000000.00, 2) as cost
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_ads',
      'key': 'sandbox//stg_google_ads__ad_group_stats',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_ads__ad_group_stats',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_ads__ad_group_stats',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_ADS__AD_GROUP_STATS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_ads',
              'ad_group_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_ads__ad_groups
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('google_ads_raw', 'ad_group_history') }} where _fivetran_active
        
            ),
        
            final as (
        
                select
                    id::varchar as ad_group_id,
                    updated_at,
                    campaign_id::varchar as campaign_id,
                    base_ad_group_id,
                    ad_rotation_mode,
                    campaign_name,
                    display_custom_bid_dimension,
                    explorer_auto_optimizer_setting_opt_in,
                    final_url_suffix,
                    name as ad_group_name,
                    status,
                    target_restrictions,
                    tracking_url_template,
                    type
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_ads',
      'key': 'sandbox//stg_google_ads__ad_groups',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_ads__ad_groups',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_ads__ad_groups',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_ADS__AD_GROUPS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_ads',
              'campaign_stats',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_ads__campaign_stats
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('google_ads_raw', 'campaign_stats') }}
        
            ),
        
            final as (
        
                select
                    customer_id,
                    date,
                    base_campaign,
                    conversions_value,
                    conversions,
                    interactions,
                    ad_network_type,
                    interaction_event_types,
                    id::varchar as campaign_id,
                    impressions,
                    active_view_viewability,
                    device,
                    view_through_conversions,
                    active_view_impressions,
                    clicks,
                    active_view_measurable_impressions,
                    active_view_measurable_cost_micros,
                    active_view_measurability,
                    cost_micros,
                    round(cost_micros / 1000000.00, 2) as cost
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_ads',
      'key': 'sandbox//stg_google_ads__campaign_stats',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_ads__campaign_stats',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_ads__campaign_stats',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_ADS__CAMPAIGN_STATS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_ads',
              'campaign_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_ads__campaigns
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('google_ads_raw', 'campaign_history') }} where _fivetran_active
        
            ),
        
            final as (
        
                select
                    id::varchar as campaign_id,
                    name as campaign_name,
                    updated_at,
                    customer_id,
                    base_campaign_id,
                    ad_serving_optimization_status,
                    advertising_channel_subtype,
                    advertising_channel_type,
                    experiment_type,
                    end_date,
                    final_url_suffix,
                    frequency_caps,
                    optimization_score,
                    payment_mode,
                    serving_status,
                    start_date,
                    status,
                    tracking_url_template,
                    vanity_pharma_display_url_mode,
                    vanity_pharma_text,
                    video_brand_safety_suitability
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_ads',
      'key': 'sandbox//stg_google_ads__campaigns',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_ads__campaigns',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_ads__campaigns',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_ADS__CAMPAIGNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_analytics_4',
              'pages_title_and_screen_class_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_analytics__page_report
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('google_analytics_raw', 'pages_title_and_screen_class_report') }}
            
            ),
        
            final as (
                select 
                    DATE,
                    UNIFIED_SCREEN_CLASS, 
                    EVENT_COUNT, 
                    TOTAL_USERS, 
                    KEY_EVENTS, 
                    USER_ENGAGEMENT_DURATION, 
                    NEW_USERS, 
                    SCREEN_PAGE_VIEWS
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_analytics',
      'key': 'sandbox//stg_google_analytics__page_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_analytics__page_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_analytics__page_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_ANALYTICS__PAGE_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_analytics_4',
              'traffic_acquisition_session_source_medium_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_analytics__session_source_medium
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('google_analytics_raw', 'traffic_acquisition_session_source_medium_report') }}
            
            ),
        
            final as (
                select
                    DATE,
                    SESSION_SOURCE,
                    SESSION_MEDIUM,
                    SESSIONS,
                    KEY_EVENTS,
                    TOTAL_USERS,
                    ENGAGED_SESSIONS,
                    EVENT_COUNT,
                    EVENTS_PER_SESSION,
                    USER_ENGAGEMENT_DURATION,
                    ENGAGEMENT_RATE
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_analytics',
      'key': 'sandbox//stg_google_analytics__session_source_medium',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_analytics__session_source_medium',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_analytics__session_source_medium',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_ANALYTICS__SESSION_SOURCE_MEDIUM',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_analytics_4',
              'traffic_acquisition_session_default_channel_grouping_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_analytics__traffic_default_group
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('google_analytics_raw', 'traffic_acquisition_session_default_channel_grouping_report') }}
            
            ),
        
            final as (
                Select 
                    DATE, 
                    PROPERTY,
                    SESSION_DEFAULT_CHANNEL_GROUPING,
                    SESSIONS,
                    KEY_EVENTS,
                    TOTAL_USERS,
                    ENGAGED_SESSIONS,
                    EVENT_COUNT,
                    EVENTS_PER_SESSION,
                    USER_ENGAGEMENT_DURATION,
                    ENGAGEMENT_RATE
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_analytics',
      'key': 'sandbox//stg_google_analytics__traffic_default_group',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_analytics__traffic_default_group',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_analytics__traffic_default_group',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_ANALYTICS__TRAFFIC_DEFAULT_GROUP',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_sheets',
              'nb_sales_rep_quotas',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'information_schema',
              'columns',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_sheets__nb_sales_rep_quotas
        
        #### Raw SQL:
        ```sql
            -- depends_on: {{ source('fivetran_information_schema', 'columns') }}
            {%- call statement('fiscal_quarters', fetch_result=True) -%}
        
                select 
                    column_name
                from {{ source('fivetran_information_schema', 'columns') }}
                where lower(table_schema) = 'google_sheets'
                    and lower(table_name) = 'nb_sales_rep_quotas'
                    and lower(column_name) like 'fy_2%'
                order by 1
        
            {%- endcall -%}
        
            {%- set fiscal_quarters = load_result('fiscal_quarters')['data'] %}
        
            with source as (
        
                select
                    owner_id, 
                    owner_name,
                    role,
                    team,
                    active,
                    start_date,
                    tenure_month,
                    _row,
                    {% for i in fiscal_quarters -%} {{ i[0] }}::float as {{ i[0] }}{%- if not loop.last %},{% endif -%} {% endfor %}
                from {{ source('google_sheets', 'nb_sales_rep_quotas') }}
            
            ), unpivot_month as (
        
                select *
                from source
                unpivot include nulls (
                    value for fiscal_quarters in (
                        {%- for i in fiscal_quarters -%} {{ i[0] }} {%- if not loop.last %},{% endif -%} {% endfor -%}
                    )
                )
        
            ), final as (
        
                select
                    owner_id,
                    owner_name,
                    role,
                    team,
                    active,
                    start_date,
                    tenure_month,
                    _row,
                    replace(replace(replace(fiscal_quarters, 'Q_', 'Q'), 'FY_', 'FY'), '_', ' ') as fiscal_quarter,
                    value
                from unpivot_month
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_sheets',
      'key': 'sandbox//stg_google_sheets__nb_sales_rep_quotas',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_sheets__nb_sales_rep_quotas',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_sheets__nb_sales_rep_quotas',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_SHEETS__NB_SALES_REP_QUOTAS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'google_sheets',
              'sales_rep_quotas',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'information_schema',
              'columns',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_google_sheets__sales_rep_quotas
        
        #### Raw SQL:
        ```sql
            -- depends_on: {{ source('fivetran_information_schema', 'columns') }}
            {%- call statement('fiscal_quarters', fetch_result=True) -%}
        
                select 
                    column_name
                from {{ source('fivetran_information_schema', 'columns') }}
                where lower(table_schema) = 'google_sheets'
                    and lower(table_name) = 'sales_rep_quotas'
                    and lower(column_name) like 'fy_2%'
                order by 1
        
            {%- endcall -%}
        
            {%- set fiscal_quarters = load_result('fiscal_quarters')['data'] %}
        
            with source as (
        
                select
                    owner_id, 
                    owner_name,
                    role,
                    team,
                    active,
                    start_date,
                    tenure_months,
                    _row,
                    {% for i in fiscal_quarters -%} {{ i[0] }}::float as {{ i[0] }}{%- if not loop.last %},{% endif -%} {% endfor %}
                from {{ source('google_sheets', 'sales_rep_quotas') }}
            
            ), unpivot_month as (
        
                select *
                from source
                unpivot include nulls (
                    value for fiscal_quarters in (
                        {%- for i in fiscal_quarters -%} {{ i[0] }} {%- if not loop.last %},{% endif -%} {% endfor -%}
                    )
                )
        
            ), final as (
        
                select
                    owner_id,
                    owner_name,
                    role,
                    team,
                    active,
                    start_date,
                    tenure_months,
                    _row,
                    replace(replace(replace(fiscal_quarters, 'Q_', 'Q'), 'FY_', 'FY'), '_', ' ') as fiscal_quarter,
                    value
                from unpivot_month
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_google_sheets',
      'key': 'sandbox//stg_google_sheets__sales_rep_quotas',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_google_sheets__sales_rep_quotas',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_google_sheets__sales_rep_quotas',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_GOOGLE_SHEETS__SALES_REP_QUOTAS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'dlt',
              'hubspot',
              'companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'hubspot',
              'company',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__company
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('hubspot_raw', 'company') }} where not is_deleted
        
            ), dlt_hubspot_company as (
        
                select id as company_id from {{ source('hubspot_dlt', 'companies') }}
        
            ),
        
            final as (
        
                select
                    id::varchar as id,
                    property_company_unique_id as company_unique_id,
                    property_description as description,
                    property_industry as industry,
                    property_name as name,
                    property_salesforceaccountid as salesforce_account_id,
                    property_organization_id_c as organization_id,
                    property_organization_name_c as organization_name,
                    property_annualrevenue as annualrevenue,
                    property_domain as domain,
                    property_hs_additional_domains as additional_domains,
                    property_website as website,
                    property_address as address,
                    property_createdate as create_time,
                    property_createdate::date as create_date,
                    property_numberofemployees as numberofemployees,
                    property_is_public as is_public,
                    property_type as type,
                    property_hubspot_owner_id as hubspot_owner_id,
                    property_hs_is_target_account as is_target_account,
                    property_lifecyclestage as lifecycle_stage,
                    property_intent_score as intent_score
                from source
                join dlt_hubspot_company on source.id = dlt_hubspot_company.company_id
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__company',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__company',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__company',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__COMPANY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_groups',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'web_attributed_conversions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__contact_first_touch
        
        #### Raw SQL:
        ```sql
            with hubspot_contact as (
        
                select * from {{ ref('stg_hubspot__contacts') }}
        
            ),
        
            web_attributed_conversions as (
        
                select * from {{ ref('web_attributed_conversions') }}
                qualify row_number() over (partition by email order by signup_first_session_started_at asc) = 1
                -- duplicate emails with different user_ids
        
            ),
        
            google_ads_ad_groups as (
        
                select * from {{ ref('google_ads_ad_groups') }}
        
            ),
        
            hubspot_contact_first_touch as (
        
                select
                    hubspot_contact.contact_id,
                    web_attributed_conversions.user_id,
                    {{ email_cleaner('web_attributed_conversions.email') }} as email,
                    web_attributed_conversions.user_created_at,
                    web_attributed_conversions.org_created_at,
                    web_attributed_conversions.session_started_at as first_touch_session_started_at,
                    web_attributed_conversions.attribution_category as first_touch_attribution_category,
                    web_attributed_conversions.campaign_source as first_touch_campaign_source,
                    coalesce(
                        google_ads_ad_groups.campaign_name,
                        google_ads_id.campaign_name,
                        web_attributed_conversions.campaign_name
                    ) as first_touch_campaign_name,
                    coalesce(google_ads_ad_groups.campaign_id, google_ads_id.campaign_id)
                        as first_touch_campaign_id,
                    coalesce(google_ads_ad_groups.ad_group_id, google_ads_id.ad_group_id)
                        as first_touch_adgroup_id,
                    coalesce(google_ads_ad_groups.ad_group_name, google_ads_id.ad_group_name)
                        as first_touch_adgroup_name,
                    web_attributed_conversions.campaign_content as first_touch_campaign_content,
                    web_attributed_conversions.referrer_host as first_touch_referrer_host,
                    web_attributed_conversions.referrer_medium as first_touch_referrer_medium,
                    web_attributed_conversions.path as first_touch_path,
                    web_attributed_conversions.campaign_medium as first_touch_campaign_medium,
                    web_attributed_conversions.utm_term as first_touch_utm_term,
                    web_attributed_conversions.reddit_cid as first_touch_reddit_cid,
                    web_attributed_conversions.gclid as first_touch_gclid
                from hubspot_contact
                left join web_attributed_conversions on hubspot_contact.email = web_attributed_conversions.email
                left join google_ads_ad_groups
                    on
                        web_attributed_conversions.campaign_name = google_ads_ad_groups.campaign_name
                        and coalesce(web_attributed_conversions.campaign_content, '')
                        = coalesce(google_ads_ad_groups.ad_group_id, '')
                left join google_ads_ad_groups as google_ads_id
                    on
                        web_attributed_conversions.campaign_name = google_ads_id.campaign_id
                        and coalesce(web_attributed_conversions.campaign_content, '')
                        = coalesce(google_ads_id.ad_group_id, '')
            )
        
            select * from hubspot_contact_first_touch
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__contact_first_touch',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__contact_first_touch',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__contact_first_touch',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__CONTACT_FIRST_TOUCH',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'hubspot',
              'contact_form_submission',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_segment_web__hubspot_form_submit',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__contact_form_submissions
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select *
                from {{ source('hubspot_raw', 'contact_form_submission') }}
        
            ),
        
            hubspot_contacts as (
        
                select * from {{ ref('stg_hubspot__contacts') }}
        
            ),
        
            contact_emails as (
        
                select contact_id, lower(value::varchar) as email
                from hubspot_contacts,
                lateral flatten(
                        input => hubspot_contacts.additional_emails
                    ) as flattened_emails
                where value::varchar != ''
        
                union all
        
                select contact_id, lower(email) as email
                from hubspot_contacts
        
            ),
        
            segment_hubspot_form_submit as (
        
                select * from {{ ref('stg_segment_web__hubspot_form_submit') }}
            ),
        
            final as (
        
                select distinct
                    {{ dbt_utils.generate_surrogate_key([
                        'source.contact_id',
                        'source.form_id',
                        'source.timestamp'
                    ]) }} as form_fill_id,
                    segment_hubspot_form_submit.event_id,
                    source.contact_id,
                    hubspot_contacts.email,
                    segment_hubspot_form_submit.anonymous_id,
                    source.form_id,
                    source.timestamp,
                    source.portal_id,
                    source.page_id,
                    coalesce(segment_hubspot_form_submit.request_type, 'Unknown') as request_type,
                    segment_hubspot_form_submit.company, 
                    segment_hubspot_form_submit.num_employees,
                    segment_hubspot_form_submit.website,
                    segment_hubspot_form_submit.message,
                    coalesce(segment_hubspot_form_submit.how_did_you_hear_about_us, segment_hubspot_form_submit.where_did_you_hear_about_dagster) as how_did_you_hear_about_us,
                    segment_hubspot_form_submit.who_are_marque_customers_your_company_works_with,
                    segment_hubspot_form_submit.how_many_consultants_engineers_are_working_with_dagster,
                    segment_hubspot_form_submit.which_customers_have_you_implemented_on_dagster,
                    segment_hubspot_form_submit.what_geographies_do_you_serve
                from source
                left join hubspot_contacts on source.contact_id = hubspot_contacts.contact_id
                left join contact_emails on hubspot_contacts.contact_id = contact_emails.contact_id
                left join segment_hubspot_form_submit 
                    on source.form_id = segment_hubspot_form_submit.form_id
                        and contact_emails.email = segment_hubspot_form_submit.email
                        and date_trunc('minute', source.timestamp) 
                            = date_trunc('minute', segment_hubspot_form_submit.timestamp)
                qualify row_number() over (partition by form_fill_id order by event_id nulls last) = 1
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__contact_form_submissions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__contact_form_submissions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__contact_form_submissions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__CONTACT_FORM_SUBMISSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              'snapshots',
              'hubspot_contact_daily_snapshot',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__contact_lifecycle_changes
        
        #### Raw SQL:
        ```sql
            with hubspot_contact_daily_snapshot as (
        
                select *
                from {{ ref('hubspot_contact_daily_snapshot') }}
        
            ),
        
            stg_hubspot__contact_lifecycle_changes as (
        
                select
                    contact_id, 
                    case 
                        when lifecycle_stage = 'lead' then 'Lead'
                        when lifecycle_stage = 'marketingqualifiedlead' then 'MQL'
                        when lifecycle_stage = 'customer' then 'Customer'
                        when lifecycle_stage = 'opportunity' then 'Opportunity'
                        else lifecycle_stage
                    end as lifecycle_stage,
                    lifecycle_stage_date::date as lifecycle_stage_date,
                    min(lifecycle_stage_date) as lifecycle_stage_datetime
                from hubspot_contact_daily_snapshot
                group by all
        
            )
        
            select * from stg_hubspot__contact_lifecycle_changes
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__contact_lifecycle_changes',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__contact_lifecycle_changes',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__contact_lifecycle_changes',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__CONTACT_LIFECYCLE_CHANGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'google_ads_ad_groups',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_sessions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__contact_web_touches
        
        #### Raw SQL:
        ```sql
            with hubspot_contact as (
        
                select * from {{ ref('stg_hubspot__contacts') }}
        
            ),
        
            user_organizations as (
                select * from {{ ref('user_organizations') }}
            ),
        
            organizations as (
                select * from {{ ref('dim_organizations') }}
            ),
        
            users as (
                select * from {{ ref('dim_users') }}
            ),
        
            sessions as (
                select * from {{ ref('segment_web_sessions') }}
            ),
        
            user_stitching as (
                select * from {{ ref('segment_cloud_users') }}
            ),
        
            user_sessions as (
                select
        
                    sessions.*,
                    coalesce(user_stitching.user_id, sessions.anonymous_id) as blended_user_id
                
                from sessions
                left join user_stitching using (anonymous_id)
            ),
        
            workspace_creating_user as (
                select
        
                    organization_id,
                    user_id::string as user_id,
                    organization_created_at,
                    user_organization_rank
        
                from user_organizations
                where organization_user_rank = 1 -- first user in the organization
            ),
        
            session_cats as (
                select
        
                    blended_user_id,
                    session_id,
                    session_started_at,
                    first_referrer_host as referrer_host,
                    first_referrer_medium as referrer_medium,
                    first_path as path,
                    first_campaign_source as campaign_source,
                    first_campaign_medium as campaign_medium,
                    first_campaign_name as campaign_name,
                    first_campaign_content as campaign_content,
                    first_utm_term as utm_term,
                    first_reddit_cid as reddit_cid,
                    first_gclid as gclid,
                    first_attribution_category as attribution_category
        
                from user_sessions
            ),
        
            google_ads_ad_groups as (
        
                select * from {{ ref('google_ads_ad_groups') }}
        
            ),
        
            contact_touches as (
                select
                    users.user_id,
                    users.user_name,
                    users.email,
                    users.created_at as user_created_at,
                    web_sessions.session_started_at,
                    coalesce(users.created_at >= web_sessions.session_started_at, false) as attributed_to_signup,
                    referrer_host,
                    referrer_medium,
                    path,
                    campaign_source,
                    campaign_medium,
                    campaign_name,
                    campaign_content,
                    utm_term,
                    attribution_category
                from workspace_creating_user
                inner join organizations using (organization_id)
                inner join users using (user_id)
                inner join session_cats as web_sessions
                    on
                        users.user_id = web_sessions.blended_user_id
                        and workspace_creating_user.user_organization_rank = 1 -- this is the first organization a user is part of
                where not organizations.is_internal
                group by all
            ),
        
            hubspot_contact_web_touches as (
        
                select
                    hubspot_contact.contact_id,
                    contact_touches.user_id,
                    contact_touches.email,
                    contact_touches.session_started_at,
                    contact_touches.attributed_to_signup,
                    contact_touches.attribution_category,
                    contact_touches.campaign_source,
                    coalesce(
                        google_ads_ad_groups.campaign_name,
                        google_ads_id.campaign_name,
                        contact_touches.campaign_name
                    ) as campaign_name,
                    coalesce(google_ads_ad_groups.campaign_id, google_ads_id.campaign_id)
                        as campaign_id,
                    coalesce(google_ads_ad_groups.ad_group_id, google_ads_id.ad_group_id) as ad_group_id,
                    coalesce(google_ads_ad_groups.ad_group_name, google_ads_id.ad_group_name) as ad_group_name,
                    contact_touches.campaign_content as campaign_content,
                    contact_touches.referrer_host as referrer_host,
                    contact_touches.referrer_medium as referrer_medium,
                    contact_touches.path as path,
                    contact_touches.campaign_medium as campaign_medium,
                    contact_touches.utm_term as utm_term
                from hubspot_contact
                join contact_touches on hubspot_contact.email = contact_touches.email
                left join google_ads_ad_groups
                    on
                        contact_touches.campaign_name = google_ads_ad_groups.campaign_name
                        and coalesce(contact_touches.campaign_content, '')
                        = coalesce(google_ads_ad_groups.ad_group_id, '')
                left join google_ads_ad_groups as google_ads_id
                    on
                        contact_touches.campaign_name = google_ads_id.campaign_id
                        and coalesce(contact_touches.campaign_content, '')
                        = coalesce(google_ads_id.ad_group_id, '')
            )
        
            select * from hubspot_contact_web_touches
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__contact_web_touches',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__contact_web_touches',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__contact_web_touches',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__CONTACT_WEB_TOUCHES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'hubspot',
              'contact',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_source_drill_level_2_labels',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaign_members',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_campaigns',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__contacts
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select *
                from {{ source('hubspot_raw', 'contact') }}
                where not is_deleted and not _fivetran_deleted
        
            ),
        
            hubspot_source_drill_level_2_labels as (
        
                select source_drill_level_2::varchar as source_drill_level_2, label, category
                from {{ ref('hubspot_source_drill_level_2_labels') }}
        
            ),
        
            salesforce_campaign_members as (
        
                select * from {{ ref('salesforce_campaign_members') }}
        
            ),
        
            salesforce_campaigns as (
        
                select * from {{ ref('salesforce_campaigns') }}
        
            ),
        
            salesforce_contact_first_campaign as (
        
                select
                    salesforce_campaign_members.contact_id,
                    salesforce_campaign_members.created_date,
                    salesforce_campaign_members.first_responded_date,
                    salesforce_campaigns.campaign_name,
                    salesforce_campaigns.campaign_type,
                    salesforce_campaigns.campaign_source,
                    salesforce_campaigns.campaign_status
                from salesforce_campaign_members
                left join
                    salesforce_campaigns
                    on salesforce_campaign_members.campaign_id = salesforce_campaigns.campaign_id
                qualify row_number() over (partition by contact_id order by salesforce_campaign_members.created_date asc) = 1
        
            ),
        
            final as (
        
                select
                    id as contact_id,
                    {{ email_cleaner('property_email') }} as email,
                    split({{ email_cleaner('property_hs_additional_emails') }},';') as additional_emails,
                    property_hs_email_domain as email_domain,
                    property_firstname as first_name,
                    property_lastname as last_name,
                    property_associatedcompanyid as associatedcompanyid,
                    property_organization_id as organization_id,
                    property_company as company,
                    property_leadsource as lead_source,
                    property_trial_source as trial_source,
                    property_marketing_lead_source as marketing_lead_source,
                    property_lead_source_action as lead_source_action,
                    property_hs_latest_source as latest_source,
                    property_hs_latest_source_data_1 as latest_source_drill_level_1,
                    coalesce(latest_source_drill_level_2_labels.label, property_hs_latest_source_data_2) as latest_source_drill_level_2,
                    property_hs_latest_source_timestamp as latest_source_date,
                    property_hs_analytics_source as original_source,
                    property_hs_analytics_source_data_1 as original_source_drill_level_1,
                    coalesce(
                        salesforce_contact_first_campaign.campaign_name, 
                        original_source_drill_level_2_labels.label,
                        case 
                            when property_hs_analytics_source_data_1 = 'SALESFORCE' then 'Salesforce'
                            else property_hs_analytics_source_data_2
                        end
                    ) as original_source_drill_level_2,
                    coalesce(
                        salesforce_contact_first_campaign.campaign_type,
                        original_source_drill_level_2_labels.category,
                        case 
                            when property_hs_analytics_source_data_1 = 'SALESFORCE' then 'Integration'
                            else null
                        end
                    ) as original_source_drill_level_2_category,
                    property_import_source as import_source,
                    property_lifecyclestage as lifecycle_stage,
                    case 
                        when property_lifecyclestage = 'lead' then property_hs_lifecyclestage_lead_date
                        when property_lifecyclestage = 'marketingqualifiedlead' then property_hs_lifecyclestage_marketingqualifiedlead_date
                        when property_lifecyclestage = 'opportunity' then property_hs_lifecyclestage_opportunity_date
                        when property_lifecyclestage = 'customer' then property_hs_lifecyclestage_customer_date
                    end as lifecycle_stage_date,
                    property_hubspotscore as hubspot_score,
                    property_hs_time_in_marketingqualifiedlead as time_in_mql,
                    property_hs_lifecyclestage_marketingqualifiedlead_date as lifecycle_stage_mql_date,
                    property_hs_predictivescoringtier_tmp as predictive_scoring_tier,
                    property_mql_date_time as mql_date,
                    property_mql as is_mql,
                    property_mql_status as mql_status,
                    property_hs_predictivecontactscore_tmp as predictive_contact_score,
                    property_select_request_type as request_type,
                    property_how_did_you_hear_about_us_ as how_did_you_hear_about_us,
                    property_message as message,
                    property_salesforcecontactid as salesforce_contact_id,
                    property_hs_merged_object_ids as merged_object_ids,
                    property_createdate as create_time,
                    property_createdate::date as create_date,
                    property_lastmodifieddate as last_modified_time
                from source
                left join hubspot_source_drill_level_2_labels as original_source_drill_level_2_labels
                    on source.property_hs_analytics_source_data_2 = original_source_drill_level_2_labels.source_drill_level_2
                left join hubspot_source_drill_level_2_labels as latest_source_drill_level_2_labels
                    on source.property_hs_latest_source_data_2 = latest_source_drill_level_2_labels.source_drill_level_2
                left join
                    salesforce_contact_first_campaign
                    on source.property_salesforcecontactid = salesforce_contact_first_campaign.contact_id
                    and source.property_hs_analytics_source = 'OFFLINE'
                            and source.property_hs_analytics_source_data_1 = 'IMPORT'
                            and timediff('hour', source.property_createdate, salesforce_contact_first_campaign.created_date) <= 24
                            and timediff('minutes', source.property_createdate, salesforce_contact_first_campaign.created_date) >= 0
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__contacts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__contacts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__contacts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__CONTACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'hubspot',
              'form',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__forms
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select *
                from {{ source('hubspot_raw', 'form') }}
                where not _fivetran_deleted
        
            ),
        
            final as (
        
                select
                    guid as form_id,
                    portal_id,
        
                    name as form_name,
                    action,
                    method,
                    css_class,
                    redirect,
                    submit_text,
                    follow_up_id,
                    notify_recipients,
                    lead_nurturing_campaign_id,
                    form_type,
                    created_at,
                    updated_at
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__forms',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__forms',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__forms',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__FORMS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'hubspot',
              'organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'hubspot',
              'organizations_to_company',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__company',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_hubspot__organization
        
        #### Raw SQL:
        ```sql
            with orgs_to_company as (
        
                select * from {{ source('hubspot_raw', 'organizations_to_company') }}
            ),
        
            hubspot_organizations as (
        
                select * from {{ source('hubspot_raw', 'organizations') }}
            ),  
        
            hubspot_companies as (
        
                select * from {{ ref('stg_hubspot__company') }}
            ),
        
            ---choose the most recent org to company mapping since there is no other way to tell
            organizations_to_company as (
        
                select 
                    from_id as organization_id, 
                    to_id as company_id
                from orgs_to_company
                join hubspot_companies on orgs_to_company.to_id = hubspot_companies.id 
                qualify row_number() over (partition by id order by _fivetran_synced desc) = 1
            ), 
        
            source as (
        
                select
                    id, 
                    property_organization_id as organization_id,
                    property_organization_id_unique_ as organization_id_unique,
                    property_organization_name as organization_name,
                    organizations_to_company.company_id as company_id,
                    property_salesforceobjectid as salesforce_organization_id
                from hubspot_organizations
                left join organizations_to_company on hubspot_organizations.id = organizations_to_company.organization_id
                where not archived and not _fivetran_deleted
            )
        
            select * from source
        ```
      ''',
      'group_name': 'staging_hubspot',
      'key': 'sandbox//stg_hubspot__organization',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_hubspot__organization',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_hubspot__organization',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_HUBSPOT__ORGANIZATION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'product_operations',
              'insights',
              'reporting_asset_materialization_metrics',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_insights__asset_materialization_metrics
        
        #### Raw SQL:
        ```sql
            select
        
                unique_key as asset_materialization_metric_id,
                organization_id,
                deployment_id,
                run_id,
                step_data_id,
                asset_key,
                asset_group,
                metric_name,
                partition as partition_name,
                metric_value,
                last_rebuilt,
                metric_multi_asset_divisor,
                run_ended_at
        
            from {{ source('insights', 'reporting_asset_materialization_metrics') }}
        ```
      ''',
      'group_name': 'staging_insights',
      'key': 'sandbox//stg_insights__asset_materialization_metrics',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_insights__asset_materialization_metrics',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_insights__asset_materialization_metrics',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_INSIGHTS__ASSET_MATERIALIZATION_METRICS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'linkedin_ads',
              'ad_analytics_by_campaign',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_linkedin__ad_analytics_by_campaign
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('linkedin_ads', 'ad_analytics_by_campaign') }}
        
            ),
        
            final as (
        
                select
                    campaign_id,
                    date(day) as date,
                    approximate_member_reach as estimated_reach,
                    cost_in_usd as cost_usd,
                    impressions,
                    clicks,
                    likes,
                    other_engagements,
                    total_engagements,
                    comments,
                    card_clicks,
                    card_impressions,
                    comment_likes,
                    company_page_clicks,
                    conversion_value_in_local_currency,
                    action_clicks,
                    ad_unit_clicks,
                    cost_in_local_currency,
                    external_website_conversions,
                    external_website_post_click_conversions,
                    external_website_post_view_conversions,
                    follows,
                    full_screen_plays,
                    landing_page_clicks,
                    lead_generation_mail_contact_info_shares,
                    lead_generation_mail_interested_clicks,
                    one_click_lead_form_opens,
                    one_click_leads,
                    opens,
                    sends,
                    shares,
                    text_url_clicks,
                    video_completions,
                    video_first_quartile_completions,
                    video_midpoint_completions,
                    video_third_quartile_completions,
                    video_starts,
                    video_views,
                    viral_card_clicks,
                    viral_card_impressions,
                    viral_clicks,
                    viral_comment_likes,
                    viral_comments,
                    viral_company_page_clicks,
                    viral_external_website_conversions,
                    viral_external_website_post_click_conversions,
                    viral_external_website_post_view_conversions,
                    viral_follows,
                    viral_full_screen_plays,
                    viral_impressions,
                    viral_landing_page_clicks,
                    viral_likes,
                    viral_one_click_lead_form_opens,
                    viral_one_click_leads,
                    viral_other_engagements,
                    viral_shares,
                    viral_total_engagements,
                    viral_video_completions,
                    viral_video_first_quartile_completions,
                    viral_video_midpoint_completions,
                    viral_video_starts,
                    viral_video_third_quartile_completions,
                    viral_video_views,
                    _fivetran_synced
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_linkedin_ads',
      'key': 'sandbox//stg_linkedin__ad_analytics_by_campaign',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_linkedin__ad_analytics_by_campaign',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_linkedin__ad_analytics_by_campaign',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_LINKEDIN__AD_ANALYTICS_BY_CAMPAIGN',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'linkedin_ads',
              'campaign_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_linkedin__campaign_history
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('linkedin_ads', 'campaign_history') }}
        
            ),
        
            final as (
        
                select
                    id as campaign_id,
                    name as campaign_name,
                    status,
                    last_modified_time,
                    created_time,
                    type as campaign_type,
                    objective_type,
                    associated_entity,
                    optimization_target_type,
                    cost_type,
                    creative_selection,
                    offsite_delivery_enabled,
                    audience_expansion_enabled,
                    format,
                    run_schedule_start,
                    run_schedule_end,
                    version_tag,
                    daily_budget_amount,
                    daily_budget_currency_code,
                    unit_cost_amount,
                    unit_cost_currency_code,
                    campaign_group_id,
                    account_id,
                    locale_country,
                    locale_language,
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_linkedin_ads',
      'key': 'sandbox//stg_linkedin__campaign_history',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_linkedin__campaign_history',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_linkedin__campaign_history',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_LINKEDIN__CAMPAIGN_HISTORY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'outreach',
              'account',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_outreach__account
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('outreach', 'account') }}
            ),
            renamed as (
        
                select
                    id as account_id,
                    name as account_name,
                    type,
                    buyer_intent_score,
                    company_type,
                    created_at,
                    custom_id,
                    description,
                    domain,
                    external_source,
                    followers,
                    founded_at,
                    industry,
                    linked_in_employees,
                    linked_in_url,
                    locality,
                    named,
                    natural_name,
                    number_of_employees,
                    sharing_team_id,
                    touched_at,
                    updated_at,
                    website_url,
                    relationship_creator_id,
                    relationship_owner_id,
                    relationship_updater_id,
                    _fivetran_deleted,
                    _fivetran_synced,
        
                from source
            )
        
            select * from renamed
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_outreach',
      'key': 'sandbox//stg_outreach__account',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_outreach__account',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_outreach__account',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_OUTREACH__ACCOUNT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'outreach',
              'data_connection',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_outreach__data_connection
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('outreach', 'data_connection') }}
            ),
        
            renamed as (
            
                select
                    parent_id as outreach_parent_id, 
                    parent_type as outreach_parent_type, 
                    id as external_id, 
                    type as external_data_type, 
                    connection as external_system_name,
                    url, 
                    _fivetran_synced
                from source
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_outreach',
      'key': 'sandbox//stg_outreach__data_connection',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_outreach__data_connection',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_outreach__data_connection',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_OUTREACH__DATA_CONNECTION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'outreach',
              'email_address',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_outreach__email_address
        
        #### Raw SQL:
        ```sql
            with source as (
                    select * from {{ source('outreach', 'email_address') }}
            ),
        
            renamed as (
            
                select
                    id as email_address_id, 
                    type, 
                    {{ email_cleaner('email') }} as email,
                    email_type,
                    status,
                    created_at,
                    status_changed_at,
                    unsubscribed_at,
                    updated_at,
                    relationship_prospect_id,
                    _fivetran_deleted,
                    _fivetran_synced
                from source
            )
        
            select * from renamed
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_outreach',
      'key': 'sandbox//stg_outreach__email_address',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_outreach__email_address',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_outreach__email_address',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_OUTREACH__EMAIL_ADDRESS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'outreach',
              'event',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_outreach__event
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('outreach', 'event') }}
            ),
        
            renamed as (
                select
                    id, 
                    type, 
                    body, 
                    created_at, 
                    event_at, 
                    external_url, 
                    name, 
                    payload, 
                    request_city, 
                    request_device, 
                    request_host, 
                    request_proxied, 
                    request_region, 
                    relationship_mailing_id, 
                    relationship_prospect_id, 
                    relationship_user_id, 
                    relationship_account_id, 
                    relationship_call_id, 
                    relationship_opportunity_id, 
                    relationship_task_id, 
                    updated_at, 
                    _fivetran_deleted,
                    _fivetran_synced
                from source
            )
        
            select * from renamed
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_outreach',
      'key': 'sandbox//stg_outreach__event',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_outreach__event',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_outreach__event',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_OUTREACH__EVENT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'outreach',
              'mailing',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_outreach__mailing
        
        #### Raw SQL:
        ```sql
            with source as (
                    select * from {{ source('outreach', 'mailing') }}
            ),
        
            renamed as (
                select
                  id as mailing_id, 
                  type, 
                  body_html, 
                  bounced_at, 
                  click_count, 
                  clicked_at, 
                  created_at, 
                  delivered_at, 
                  error_backtrace, 
                  error_reason, 
                  follow_up_task_scheduled_at, 
                  follow_up_task_type, 
                  mailbox_address, 
                  mailing_type, 
                  marked_as_spam_at, 
                  message_id, 
                  notify_thread_condition, 
                  notify_thread_scheduled_at, 
                  notify_thread_status, 
                  open_count, 
                  opened_at, 
                  override_safety_settings, 
                  replied_at, 
                  retry_at, 
                  retry_count, 
                  retry_interval, 
                  scheduled_at, 
                  state, 
                  state_changed_at, 
                  subject, 
                  track_links, 
                  track_opens, 
                  unsubscribed_at, 
                  updated_at, 
                  relationship_follow_up_sequence_id, 
                  relationship_mailbox_id, 
                  relationship_opportunity_id, 
                  relationship_prospect_id, 
                  relationship_sequence_id, 
                  relationship_sequence_state_id, 
                  relationship_sequence_step_id, 
                  relationship_task_id, 
                  relationship_template_id, 
                  relationship_user_id, 
                  _fivetran_deleted, 
                  _fivetran_synced
                from source
            )
        
            select * from renamed
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_outreach',
      'key': 'sandbox//stg_outreach__mailing',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_outreach__mailing',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_outreach__mailing',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_OUTREACH__MAILING',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'outreach',
              'prospect',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_outreach__prospect
        
        #### Raw SQL:
        ```sql
            with source as (
                    select * from {{ source('outreach', 'prospect') }}
            ),
        
            renamed as (
                select
                    id as prospect_id, 
                    created_at, 
                    first_name, 
                    last_name,  
                    name, 
                    company, 
                    type, 
                    added_at, 
                    available_at, 
                    calls_opted_at, 
                    date_of_birth, 
                    emails_opted_at, 
                    engaged_at, 
                    graduation_date, 
                    job_start_date, 
                    opted_out_at, 
                    touched_at, 
                    trashed_at, 
                    updated_at, 
                    address_city, 
                    address_country, 
                    address_state, 
                    address_street, 
                    address_street_2, 
                    address_zip, 
                    angel_list_url, 
                    calls_opt_status, 
                    campaign_name, 
                    degree, 
                    emails_opt_status, 
                    event_name, 
                    external_owner, 
                    external_source, 
                    external_id, 
                    facebook_url, 
                    gender, 
                    github_url, 
                    github_username, 
                    google_plus_url, 
                    linked_in_id, 
                    linked_in_slug, 
                    linked_in_url, 
                    middle_name, 
                    nickname, 
                    occupation, 
                    personal_note_1, 
                    personal_note_2, 
                    preferred_contact, 
                    quora_url, 
                    region, 
                    school, 
                    sharing_team_id, 
                    source, 
                    specialties, 
                    stack_overflow_id, 
                    stack_overflow_url, 
                    time_zone, 
                    time_zone_iana, 
                    time_zone_inferred, 
                    title, 
                    twitter_url, 
                    twitter_username, 
                    website_url_1, 
                    website_url_2, 
                    website_url_3, 
                    click_count, 
                    linked_in_employees, 
                    linked_in_connections, 
                    open_count, 
                    reply_count, 
                    call_opted_out, 
                    email_opted_out, 
                    opted_out, 
                    engaged_score, 
                    score, 
                    relationship_creator_id, 
                    relationship_owner_id, 
                    relationship_account_id, 
                    relationship_stage_id, 
                    relationship_persona_id, 
                    relationship_updater_id, 
                    email_contacts, 
                    updater_id, 
                    company_linked_in_employees, 
                    enrichable, 
                    updater_type, 
                    custom_10, 
                    custom_13, 
                    custom_12, 
                    sms_opted_out, 
                    custom_15, 
                    sms_opt_status, 
                    contact_histogram, 
                    company_followers, 
                    company_size, 
                    account_name, 
                    sms_opted_at, 
                    custom_9, 
                    stage_name, 
                    custom_3, 
                    company_natural, 
                    custom_4, 
                    custom_1, 
                    custom_2, 
                    custom_8, 
                    custom_5,
                    custom_6, 
                    company_type, 
                    company_industry,
                    _fivetran_deleted, 
                    _fivetran_synced 
                from source
            )
        
            select * from renamed
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_outreach',
      'key': 'sandbox//stg_outreach__prospect',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_outreach__prospect',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_outreach__prospect',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_OUTREACH__PROSPECT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'outreach',
              'sequence',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_outreach__sequence
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('outreach', 'sequence') }}
            ),
        
            renamed as (
                select
                    id as sequence_id,
                    name as sequence_name,
                    description as sequence_description,
                    type,
                    created_at,
                    updated_at,
                    enabled_at,
                    last_used_at,
                    throttle_paused_at,
                    locked_at,
                    primary_reply_action,
                    schedule_interval_type,
                    secondary_reply_action,
                    sequence_type,
                    share_type,
                    bounce_count,
                    click_count,
                    deliver_count,
                    duration_in_days,
                    failure_count,
                    max_activations,
                    negative_reply_count,
                    neutral_reply_count,
                    num_contacted_prospects,
                    num_replied_prospects,
                    open_count,
                    opt_out_count,
                    positive_reply_count,
                    primary_reply_pause_duration,
                    reply_count,
                    schedule_count,
                    secondary_reply_pause_duration,
                    sequence_step_count,
                    throttle_capacity,
                    throttle_max_adds_per_day,
                    enabled,
                    finish_on_reply,
                    locked,
                    throttle_paused,
                    transactional,
                    automation_percentage,
                    relationship_creator_id,
                    relationship_owner_id,
                    relationship_updater_id,
                    relationship_ruleset_id,
                    _fivetran_deleted,
                    _fivetran_synced,
            from source
            )
        
            select * from renamed    
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_outreach',
      'key': 'sandbox//stg_outreach__sequence',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_outreach__sequence',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_outreach__sequence',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_OUTREACH__SEQUENCE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'pylon',
              'pylon',
              'pylon_issues',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_pylon__pylon_issues
        
        #### Raw SQL:
        ```sql
            select
                id as issue_id,
                number as issue_number,
                title as issue_title,
                body as issue_body,
                account_id,
                account_name,
                account_crm_id,
                assignee_id,
                assignee_name,
                requester_id,
                requester_name,
                team_id,
                team_name,
                state as issue_state,
                first_response_time,
                resolution_time,
                link as issue_link,
                tags,
                parse_json(custom_fields) as custom_fields,
                parse_json(custom_fields):"Support Tier (Issue)" as support_tier,
                source as issue_source,
                latest_message_time,
                created_at,
                parse_json(external_issue):"link" as external_issue_link
            from {{ source('pylon', 'pylon_issues') }}
        ```
      ''',
      'group_name': 'staging_pylon',
      'key': 'sandbox//stg_pylon__pylon_issues',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_pylon__pylon_issues',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_pylon__pylon_issues',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_PYLON__PYLON_ISSUES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'purina',
              'oss_analytics',
              'dagster_pypi_downloads',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_pypi__weekly_downloads
        
        #### Raw SQL:
        ```sql
            select * from {{ source('pypi', 'dagster_pypi_downloads') }}
        ```
      ''',
      'group_name': 'staging_pypi',
      'key': 'sandbox//stg_pypi__weekly_downloads',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_pypi__weekly_downloads',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_pypi__weekly_downloads',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_PYPI__WEEKLY_DOWNLOADS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'reddit_ads',
              'ad_group',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_reddit_ads__ad_group
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('reddit_ads', 'ad_group') }}
            ),
        
            final as (
        
                select
                    id as ad_group_id,
                    name as ad_group_name,
                    account_id,
                    campaign_id,
                    bid_strategy,
                    bid_value,
                    start_time,
                    end_time,
                    configured_status,
                    effective_status,
                    goal_type,
                    goal_value,
                    is_processing,
                    optimization_strategy_type,
                    expand_targeting,
                    _fivetran_synced
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_reddit_ads',
      'key': 'sandbox//stg_reddit_ads__ad_group',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_reddit_ads__ad_group',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_reddit_ads__ad_group',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_REDDIT_ADS__AD_GROUP',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'reddit_ads',
              'ad_group_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_reddit_ads__ad_group_report
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('reddit_ads', 'ad_group_report') }}
            ),
        
            final as (
        
                select
                    account_id,
                    ad_group_id,
                    date,
                    impressions,
                    clicks,
                    --- note: the reddit API documentation says that you must divide spend by 1000000 to get the spend in dollars (https://ads-api.reddit.com/docs/v3/operations/Get%20A%20Report)
                    spend/1000000 as spend,
                    cpc/1000000 as cpc,
                    ctr,
                    ecpm/1000000 as ecpm,
                    app_install_metrics_level_achieved,
                    app_install_metrics_app_launch,
                    app_install_metrics_add_payment_info,
                    app_install_metrics_search,
                    app_install_metrics_purchase,
                    app_install_metrics_view_content,
                    app_install_metrics_spend_credits,
                    app_install_metrics_install,
                    app_install_metrics_completed_tutorial,
                    app_install_metrics_spend,
                    app_install_metrics_add_to_cart,
                    app_install_metrics_sign_up,
                    comment_downvotes,
                    comment_upvotes,
                    comments_page_views,
                    conversion_roas,
                    gallery_item_caption,
                    gallery_item_id,
                    legacy_click_conversions_attribution_window_day,
                    legacy_click_conversions_attribution_window_week,
                    legacy_click_conversions_attribution_window_month,
                    legacy_view_conversions_attribution_window_week,
                    legacy_view_conversions_attribution_window_month,
                    legacy_view_conversions_attribution_window_day,
                    priority,
                    region,
                    video_fully_viewable_impressions,
                    video_plays_expanded,
                    video_plays_with_sound,
                    video_started,
                    video_viewable_impressions,
                    video_watched_10_seconds,
                    video_watched_100_percent,
                    video_watched_25_percent,
                    video_watched_3_seconds,
                    video_watched_5_seconds,
                    video_watched_50_percent,
                    video_watched_75_percent,
                    video_watched_95_percent,
                    viewable_impressions,
                    viewer_comments,
                    _fivetran_synced
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_reddit_ads',
      'key': 'sandbox//stg_reddit_ads__ad_group_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_reddit_ads__ad_group_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_reddit_ads__ad_group_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_REDDIT_ADS__AD_GROUP_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'reddit_ads',
              'campaign',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_reddit_ads__campaign
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('reddit_ads', 'campaign') }}
            ),
        
            final as (
        
                select
                    id as campaign_id,
                    name as campaign_name,
                    account_id,
                    configured_status,
                    effective_status,
                    funding_instrument_id,
                    is_processing,
                    objective,
                    _fivetran_synced
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_reddit_ads',
      'key': 'sandbox//stg_reddit_ads__campaign',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_reddit_ads__campaign',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_reddit_ads__campaign',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_REDDIT_ADS__CAMPAIGN',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'reddit_ads',
              'campaign_report',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_reddit_ads__campaign_report
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('reddit_ads', 'campaign_report') }}
        
            ),
        
            final as (
        
                select
                    account_id,
                    campaign_id,
                    date,
                    impressions,
                    clicks,
                    --- note: the reddit API documentation says that you must divide spend by 1000000 to get the spend in dollars (https://ads-api.reddit.com/docs/v3/operations/Get%20A%20Report)
                    spend/1000000 as spend,
                    cpc/1000000 as cpc,
                    ctr,
                    ecpm/1000000 as ecpm,
                    app_install_metrics_level_achieved,
                    app_install_metrics_app_launch,
                    app_install_metrics_add_payment_info,
                    app_install_metrics_search,
                    app_install_metrics_purchase,
                    app_install_metrics_view_content,
                    app_install_metrics_spend_credits,
                    app_install_metrics_install,
                    app_install_metrics_completed_tutorial,
                    app_install_metrics_spend,
                    app_install_metrics_add_to_cart,
                    app_install_metrics_sign_up,
                    comment_downvotes,
                    comment_upvotes,
                    comments_page_views,
                    conversion_roas,
                    gallery_item_caption,
                    gallery_item_id,
                    legacy_click_conversions_attribution_window_day,
                    legacy_click_conversions_attribution_window_week,
                    legacy_click_conversions_attribution_window_month,
                    legacy_view_conversions_attribution_window_week,
                    legacy_view_conversions_attribution_window_month,
                    legacy_view_conversions_attribution_window_day,
                    priority,
                    region,
                    video_fully_viewable_impressions,
                    video_plays_expanded,
                    video_plays_with_sound,
                    video_started,
                    video_viewable_impressions,
                    video_watched_10_seconds,
                    video_watched_100_percent,
                    video_watched_25_percent,
                    video_watched_3_seconds,
                    video_watched_5_seconds,
                    video_watched_50_percent,
                    video_watched_75_percent,
                    video_watched_95_percent,
                    viewable_impressions,
                    viewer_comments,
                    _fivetran_synced
                from source
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_reddit_ads',
      'key': 'sandbox//stg_reddit_ads__campaign_report',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_reddit_ads__campaign_report',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_reddit_ads__campaign_report',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_REDDIT_ADS__CAMPAIGN_REPORT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'account_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__account_history
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('salesforce', 'account_history') }}
            ),
        
            final as (
        
                select
                    id as account_history_id,
                    account_id,
                    created_by_id,
                    created_date,
                    field,
                    data_type,
                    old_value,
                    new_value
                from source
                where not is_deleted
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__account_history',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__account_history',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__account_history',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__ACCOUNT_HISTORY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'account',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__accounts
        
        #### Raw SQL:
        ```sql
            {{ config(materialized='table') }}
        
            select
                id as account_id,
                organization_id_c as organization_id,
                stripe_customer_id_c as stripe_customer_id,
                owner_id,
                owned_since_c as owned_since,
                name as account_name,
                type as account_type,
                website as website_unparsed,
                --    Retrieves the domain.com portion of a website
                --       │Optionally capture http(s)://  and discard
                --       │
                --       │             Optionally capture www. and discard
                --       │             │
                --       │             │      Capture the domain.tld portion
                --       │             │      │Matching as many letters before a dot
                --       │             │      │And 2 or more letters after the dot (the tld)
                --       ▼             ▼      ▼
                --    (http[s]:\/\/)?(w*\.)?(\w*\.\w{2,})
                regexp_substr(website, $$(http[s]:\/\/)?(w*\.)?(\w*\.\w{2,})$$, 1, 1, 'e', 3) as website,
                industry,
                annual_revenue,
                number_of_employees,
                description,
                account_source,
                arr_c as arr,
                source_c as account_source_custom,
                recent_source_c as recent_source,
                status_c as account_status,
                cloud_credits_c as cloud_credits,
                contracted_seats_c as contracted_seats,
                created_date as created_at,
                target_account_type_c as target_account_type, 
                account_executive_c = owner_id as is_named_account,
                coalesce(bdr_engaged_contacts_c, 0) as bdr_engaged_contact_count, 
                coalesce(seller_engaged_contacts_c, 0) as seller_engaged_contact_count, 
                coalesce(l_90_d_seller_activities_c, 0) as seller_activity_count_l90d,
                coalesce(l_90_d_bdr_activities_c, 0) as bdr_activity_count_l90d,
                last_seller_activity_c as last_seller_activity_at,
                last_bdr_activity_c as last_bdr_activity_at,
                total_funding_c as total_funding,
                latest_funding_stage_c as latest_funding_stage,
                funding_rounds_c as funding_rounds,
                last_funding_round_date_c as last_funding_round_date,
                data_roles_headcount_c as data_roles_headcount,
                region_c as region,
                is_deleted
        
            from {{ source('salesforce', 'account') }}
            where not is_deleted and (organization_id regexp '\\d+' or organization_id is null)
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__accounts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_salesforce__accounts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__accounts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__ACCOUNTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'campaign_member',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__campaign_members
        
        #### Raw SQL:
        ```sql
            select
                id as campaign_member_id,
                campaign_id,
                contact_id,
                account_id,
                status as member_status,
                has_responded,
                first_responded_custom_c as first_responded_date,
                created_date,
                first_name,
                last_name,
                title,
                city,
                state,
                country,
                {{ email_cleaner('email') }} as email,
                lead_source,
                company_or_account,
                type as salesforce_object_assocation
            from {{ source('salesforce', 'campaign_member') }}
            where not is_deleted
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__campaign_members',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__campaign_members',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__campaign_members',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__CAMPAIGN_MEMBERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'campaign',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__campaigns
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('salesforce', 'campaign') }}
            ),
        
            renamed as (
        
                select
                    id as campaign_id,
                    parent_id,
                    name as campaign_name,
                    type as campaign_type,
                    source_c as campaign_source,
                    status as campaign_status,
                    created_date,
                    start_date,
                    end_date,
                    is_active,
                    number_of_contacts,
                    number_of_responses,
                    number_of_opportunities,
                    amount_all_opportunities,
                    number_of_leads,
                    number_of_converted_leads,
                    number_of_won_opportunities,
                    is_deleted,
                    expected_response,
                    number_sent,
                    description
                    owner_id,
                    created_by_id,
                    last_modified_date,
                    last_modified_by_id,
                    system_modstamp,
                    last_activity_date,
                    last_viewed_date,
                    last_referenced_date,
                    campaign_member_record_type_id,
                    source_c as source,
                    created_mql_accounts_c as created_mql_accounts,
                    notion_event_page_c as notion_event_page,
                    amount_won_opportunities,
                    expected_revenue,
                    actual_cost,
                    budgeted_cost
                    _fivetran_deleted,
                    _fivetran_synced,
                from source
                where is_deleted = false
        
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__campaigns',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__campaigns',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__campaigns',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__CAMPAIGNS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'contact',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__contacts
        
        #### Raw SQL:
        ```sql
            select
                id as contact_id,
                account_id,
                first_name,
                last_name,
                {{ email_cleaner('email') }} as email,
                phone,
                title,
                lead_source,
                contact_source,
                traffic_source_c as traffic_source,
                owner_id,
                status_c as status,
                linked_in_c as linkedin_url,
                created_date,
                x_1_st_meeting_completed_c as contact_first_meeting,
                last_meeting_completed_c as contact_last_meeting
        
        
            from {{ source('salesforce', 'contact') }}
            where not is_deleted
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__contacts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__contacts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__contacts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__CONTACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'contract',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__contracts
        
        #### Raw SQL:
        ```sql
            select
        
                id as contract_id,
                account_id,
                opportunity_c as opportunity_id,
        
                arr_c as arr,
                cloud_credits_c as cloud_credits_contracted,
                contract_number,
                contract_term,
                created_date,
                start_date as contract_start_date,
                end_date as contract_end_date,
                launcher_seats_c as launcher_seats,
                pricing_model_c as pricing_model,
                serverless_c as is_serverless,
                status as contract_status,
                owner_expiration_notice,
                special_terms,
                activated_date,
                billed_thru_c as billed_thru,
                roll_over_credits_c as roll_over_credits,
                is_deleted,
                _fivetran_synced,
                _fivetran_deleted,
        
            from {{ source('salesforce', 'contract') }}
            where is_deleted = false and _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__contracts',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='contract_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_salesforce__contracts',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__contracts',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__CONTRACTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'event',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__events
        
        #### Raw SQL:
        ```sql
            select 
                id as event_id,
                who_id,
                what_id,
                subject,
                location,
                activity_date,
                is_all_day_event,
                activity_date_time,
                duration_in_minutes,
                start_date_time,
                end_date_time,
                description,
                account_id,
                owner_id,
                type as event_type,
                event_subtype,
                is_private,
                show_as,
                created_date,
                created_by_id,
                call_notes_c as call_notes,
                contact_lifecycle_c as contact_lifecycle,
                account_recent_source_c as account_recent_source
            from {{ source('salesforce', 'event') }}
            where not is_deleted
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'leadfeederapp_website_visit_c',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__leadfeederapp_website_visit_c
        
        #### Raw SQL:
        ```sql
            with source as (
          
              select * from {{ source('salesforce', 'leadfeederapp_website_visit_c') }}
            ),
        
            renamed as (
        
              select
                id as leadfeeder_visit_id,
                name as visit_name,
                leadfeederapp_time_c as visit_at,
                leadfeederapp_account_c as account_id,
                leadfeederapp_campaign_c as campaign_id,
                leadfeederapp_contact_c as contact_id,
                leadfeederapp_duration_seconds_c as visit_duration_seconds,
                leadfeederapp_email_address_c as email,
                leadfeederapp_external_id_c as external_id,
                leadfeederapp_keyword_c as keyword,
                leadfeederapp_landing_page_c as landing_page,
                leadfeederapp_lead_c as lead_id,
                leadfeederapp_medium_c as medium,
                leadfeederapp_pages_c as pages,
                leadfeederapp_pageviews_c as total_pageviews,
                leadfeederapp_referrer_c as referrer,
                leadfeederapp_source_c as source,
                owner_id,
                created_date,
                last_modified_date,
                last_modified_by_id,
                system_modstamp,
                last_activity_date,
                last_viewed_date,
                last_referenced_date,
                created_by_id,
                _fivetran_deleted,
                _fivetran_synced,
                is_deleted,
              from source
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__leadfeederapp_website_visit_c',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__leadfeederapp_website_visit_c',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__leadfeederapp_website_visit_c',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__LEADFEEDERAPP_WEBSITE_VISIT_C',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'opportunity',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__opportunities
        
        #### Raw SQL:
        ```sql
            select
        
                id as opportunity_id,
                account_id,
                contact_id,
                owner_id,
        
                name as opportunity_name,
                description,
                stage_name,
                amount,
                year_1_c as amount_year1,
                year_2_c as amount_year2,
                year_3_c as amount_year3,
                year_4_c as amount_year4,
                year_5_c as amount_year5,
                probability,
                close_date,
                type as opportunity_type,
                next_step,
                lead_source,
        
                is_closed,
                is_won,
                is_deleted,
                created_date as created_at,
                created_by_id,
                last_modified_date as updated_at,
            
                loss_reason_c as loss_reason,
                loss_details_c as loss_details,
                competitor_c as competitor,
                win_loss_competitor_c as win_loss_competitor,
                manual_forecast_category_c as manual_forecast_category,
                forecast_category,
                forecast_category_name,
                arr_c as arr,
                arr_new_c as new_arr,
                prior_term_arr_c as prior_term_arr,
                term_months_c as term_months,
                recent_source_c as recent_source,
                sal_date_c as sal_date,
                sal_created_by_c as sal_created_by_id,
                account_source_c as account_source,
                current_orchestrator_c as current_orchestrator,
                risks_c as risks,
                budget_c as budget,
                within_budget_c as within_budget,
                missing_functionality_c as missing_functionality,
                feature_requirements_c as feature_requirements,
                current_data_stack_c as current_data_stack,
                coalesce(primary_evaluator_s_identified_c, false) as is_primary_evaluator_identified,
        
                intro_meeting_date_c as intro_meeting_date,
                cast(meeting_held_c as date) as meeting_held_date,
                pre_opportunity_date_c as pre_opportunity_date,
                discovery_date_c as discovery_date,
                evaluation_date_c as evaluation_date,
                proposal_date_c as proposal_date,
                negotiation_review_date_c as negotiation_review_date,
                sales_engineer_c as sales_engineer_id
        
            from {{ source('salesforce', 'opportunity') }}
            where not is_deleted
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__opportunities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='opportunity_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_salesforce__opportunities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__opportunities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__OPPORTUNITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'opportunity_history',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__opportunity_history
        
        #### Raw SQL:
        ```sql
            select
                id as opportunity_history_id,
                opportunity_id,
                created_by_id,
                created_date,
                stage_name,
                close_date,
                probability,
                forecast_category,
                system_modstamp,
                is_deleted,
                prev_close_date,
                amount,
                expected_revenue,
                prev_amount
            from {{ source('salesforce', 'opportunity_history') }}
            where not is_deleted
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__opportunity_history',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='opportunity_history_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_salesforce__opportunity_history',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__opportunity_history',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__OPPORTUNITY_HISTORY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'opportunity_line_item',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__opportunity_line_item
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('salesforce', 'opportunity_line_item') }}
            ),
        
            renamed as (
                select
                    id as opportunity_line_item_id, 
                    opportunity_id, 
                    sort_order, 
                    pricebook_entry_id, 
                    product_2_id as product_id, 
                    product_code, 
                    name, 
                    quantity, 
                    discount, 
                    subtotal, 
                    total_price, 
                    unit_price, 
                    list_price, 
                    service_date, 
                    description, 
                    created_date as created_at, 
                    created_by_id, 
                    last_modified_date as updated_at, 
                    last_modified_by_id, 
                    system_modstamp, 
                    is_deleted, 
                    last_viewed_date, 
                    last_referenced_date, 
                    _fivetran_deleted, 
                    _fivetran_synced
                from source
            )
            select * from renamed
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__opportunity_line_item',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__opportunity_line_item',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__opportunity_line_item',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__OPPORTUNITY_LINE_ITEM',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'organization_c',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__organizations
        
        #### Raw SQL:
        ```sql
            with source as (
        
            select * from {{ source('salesforce', 'organization_c') }}
        
            ),
        
            renamed as (
        
            	select
            		ID as id,
            		IS_DELETED as is_deleted,
            		NAME as name,
            		CREATED_DATE as created_date,
            		CREATED_BY_ID as created_by_id,
            		LAST_MODIFIED_DATE as last_modified_date,
            		LAST_MODIFIED_BY_ID as last_modified_by_id,
            		SYSTEM_MODSTAMP as system_modstamp,
            		ORGANIZATION_C as organization,
            		ORGANIZATION_ID_UNIQUE_C as organization_id,
            		CONTACT_C as contact_id,
            		ACCOUNT_C as account_id,
            		_FIVETRAN_SYNCED as _fivetran_synced
            	from source
            	where not _fivetran_deleted
            )
        
            select * from renamed
            where is_deleted = false
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_salesforce__organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'partner',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__partners
        
        #### Raw SQL:
        ```sql
            select
        
                id as partner_id,
                opportunity_id,
                account_from_id,
                account_to_id,
                role,
                is_primary,
                created_date,
                created_by_id,
                last_modified_date,
                last_modified_by_id,
                system_modstamp,
                reverse_partner_id
        
            from {{ source('salesforce', 'partner') }}
            where not is_deleted
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__partners',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__partners',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__partners',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__PARTNERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'product_2',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__product2
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('salesforce', 'product_2') }}
            ),
        
            renamed as (
        
                select
                    id as product_id, 
                    name as product_name, 
                    product_code, 
                    description, 
                    is_active, 
                    created_date as created_at, 
                    created_by_id,
                    last_modified_date as updated_at, 
                    last_modified_by_id
                    system_modstamp, 
                    external_data_source_id, 
                    external_id, 
                    display_url, 
                    quantity_unit_of_measure, 
                    is_deleted, 
                    is_archived, 
                    last_viewed_date, 
                    last_referenced_date, 
                    stock_keeping_unit, 
                    _fivetran_deleted, 
                    _fivetran_synced
                from source
            )
        
            select * from renamed
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__product2',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__product2',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__product2',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__PRODUCT2',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'task',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__tasks
        
        #### Raw SQL:
        ```sql
            select
                id as task_id,
                who_id,
                what_id,
                subject,
                activity_date,
                status,
                priority,
                owner_id,
                description,
                type as task_type,
                task_subtype,
                account_id,
                is_closed,
                created_date,
                created_by_id,
                completed_date_time,
                call_notes_c as call_notes,
                contact_lifecycle_c as contact_lifecycle,
                account_recent_source_c as account_recent_source,
                gong_meeting_prospect_canceled_c as gong_meeting_prospect_canceled,
                canceled_cp_c as canceled_cp,
                no_show_cp_c as no_show_cp
            from {{ source('salesforce', 'task') }}
            where not is_deleted
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__tasks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_salesforce__tasks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__tasks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__TASKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'user_role',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__user_roles
        
        #### Raw SQL:
        ```sql
            select
        
                id as user_role_id,
                developer_name as developer_role_name,
                name as role_name
        
            from {{ source('salesforce', 'user_role') }}
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__user_roles',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_role_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_salesforce__user_roles',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__user_roles',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__USER_ROLES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'salesforce',
              'user',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_salesforce__users
        
        #### Raw SQL:
        ```sql
            select
                id as user_id,
                {{ email_cleaner('email') }} as email,
                first_name,
                last_name,
                name,
                is_active,
                user_role_id,
                role_c as role_custom_field,
                username as user_name,
                region_c as region,
                in_rotation_c as in_rotation,
                sales_start_date_c as sales_start_date,
                sales_end_date_c as sales_end_date,
                assigned_bdr_c as assign_bdr_id,
                _fivetran_deleted
        
            from {{ source('salesforce', 'user') }}
            where _fivetran_deleted = false
        ```
      ''',
      'group_name': 'staging_salesforce',
      'key': 'sandbox//stg_salesforce__users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='email',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_salesforce__users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_salesforce__users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SALESFORCE__USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'scoutos_app_runs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_scout__queries
        
        #### Raw SQL:
        ```sql
            with base as (
        
                select 
                    timestamp_start,
                    timestamp_end,
                    elapsed_time_ms,
                    app_id,
                    app_run_id,
                    app_display_name,
                    session_id,
                    status,
                    cost,
                    parse_json(blocks) as blocks
            
                from {{ source('scout', 'scout_queries') }}
            )
        
            select 
        
                timestamp_start::timestamp as timestamp_start,
                timestamp_end::timestamp as timestamp_end,
                elapsed_time_ms,
                app_id,
                app_run_id,
                app_display_name,
                session_id,
                row_number() over (partition by session_id order by timestamp_start) as session_step,
                status,
                cost,
                blocks,
                array_size(blocks) as num_blocks,
                blocks[0]:value:input::text as input_block,
                blocks[num_blocks-1]:value::text as output_block
        
            from base
        ```
      ''',
      'group_name': 'staging_scout',
      'key': 'sandbox//stg_scout__queries',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_scout__queries',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_scout__queries',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SCOUT__QUERIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_cloud',
              'identifies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_cloud__identifies
        
        #### Raw SQL:
        ```sql
            with source as (
                
                    select * from {{ source('segment_app', 'identifies') }}
              ),
              renamed as (
              
                  select
                    id as event_id, 
                    original_timestamp, 
                    anonymous_id, 
                    coalesce(name, concat(first_name, ' ', last_name)) as name, 
                    first_name, 
                    last_name, 
                    {{ email_cleaner('email') }} as email,
                    user_id, 
                    received_at, 
                    context_page_referrer, 
                    experience, 
                    sent_at, 
                    context_library_version, 
                    context_page_path, 
                    context_page_search, 
                    context_user_agent, 
                    context_page_url, 
                    uuid_ts, 
                    context_actions_amplitude_session_id, 
                    context_library_name, 
                    context_page_title, 
                    title, 
                    context_ip, 
                    context_locale, 
                    timestamp, 
                    trial_start, 
                    org_creation_time, 
                    trial_end, 
                    group_id, 
                    account_name, 
                    heard, 
                    context_campaign_source, 
                    context_campaign_content, 
                    context_campaign_medium, 
                    context_campaign_name, 
                    company
               
                  from source
              )
              select * from renamed
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_cloud__identifies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_cloud__identifies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_cloud__identifies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_CLOUD__IDENTIFIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_cloud',
              'pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_cloud__pages
        
        #### Raw SQL:
        ```sql
            select
        
                id as event_id,
                anonymous_id,
                user_id,
        
                parse_url(referrer, 1):host::string as referrer_host_unparsed,
                regexp_substr(parse_url(referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
                    as referrer_host,
                referrer,
                path,
                title,
                search,
                url,
                specific_path,
        
                parse_url(context_page_url, 1):parameters as search_params,
        
                context_campaign_source as campaign_source,
                context_campaign_medium as campaign_medium,
                context_campaign_name as campaign_name,
                context_campaign_content as campaign_content,
                search_params:utm_term as utm_term,
        
                search_params:rdt_cid as reddit_cid,
                search_params:gclid as gclid,
            
                catalog_mode_enabled::boolean as catalog_mode_enabled,
                catalog_view_filters::variant as catalog_view_filters,
                catalog_view_is_private::boolean as catalog_view_is_private,
                catalog_view_is_favorites_view::boolean as catalog_view_is_favorites_view,
        
                timestamp
        
            from {{ source('segment_app', 'pages') }}
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_cloud__pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_cloud__pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_cloud__pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_CLOUD__PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_cloud',
              'tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_cloud__tracks
        
        #### Raw SQL:
        ```sql
            select
        
                id,
                timestamp,
                case when regexp_like(s.user_id, '\\d+') then user_id end as user_id,
                case when s.user_id ilike '%@%' then {{ email_cleaner('s.user_id') }} end as email, -- emails are now coming through as user IDs for some events
                anonymous_id,
                event,
                event_text,
                received_at,
                sent_at,
                uuid_ts,
                original_timestamp,
                context_page_title,
                context_locale,
                context_page_search,
                context_library_name,
                context_library_version,
                context_actions_amplitude_session_id,
                context_ip,
                context_page_url,
                context_page_referrer,
                context_user_agent,
                context_page_path,
                context_user_agent_data_brands,
                context_user_agent_data_mobile,
                context_user_agent_data_platform,
                context_campaign_medium,
                context_campaign_source,
                context_campaign_content,
                context_campaign_name,
                context_timezone
        
            from {{ source('segment_app', 'tracks') }} s
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_cloud__tracks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_cloud__tracks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_cloud__tracks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_CLOUD__TRACKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_cloud',
              'trial_start',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_cloud__trial_start
        
        #### Raw SQL:
        ```sql
            select *
        
            from {{ source('segment_app', 'trial_start') }}
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_cloud__trial_start',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_cloud__trial_start',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_cloud__trial_start',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_CLOUD__TRIAL_START',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_university',
              'certificate_record_downloaded',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_dagster_u__certificate_record_downloaded
        
        #### Raw SQL:
        ```sql
            with source as (
            	select
            		ID as event_id,
            		ANONYMOUS_ID as anonymous_id,
            		lower(USER_ID) as user_id,
            		{{ email_cleaner('USER_ID') }} as email,
            		STUDENT_NAME as student_name,
            		EVENT_TEXT as event_text,
            		EVENT as event,
            		context_page_title as page_title,
            		context_page_url as page_url,
            		parse_url(context_page_referrer, 1):host::string as referrer_host_unparsed,
            		regexp_substr(parse_url(context_page_referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
            			as referrer_host,
            		context_page_referrer as referrer,
        
            		parse_url(context_page_url, 1):parameters as search_params,
            		search_params:utm_term as utm_term,
        
            		search_params:rdt_cid as reddit_cid,
            		search_params:gclid as gclid,
        
                	timestamp
            	from {{ source('segment_dagster_u', 'certificate_record_downloaded') }} 
            )
        
            select *
            from source
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_dagster_u__certificate_record_downloaded',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_dagster_u__certificate_record_downloaded',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_dagster_u__certificate_record_downloaded',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DAGSTER_U__CERTIFICATE_RECORD_DOWNLOADED',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_university',
              'course_landing_page',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_dagster_u__course_landing_page
        
        #### Raw SQL:
        ```sql
            with source as (
            	select
            		ID as event_id,
            		ANONYMOUS_ID as anonymous_id,
            		lower(USER_ID) as user_id,
            		{{ email_cleaner('USER_ID') }} as email,
            		COURSE_NAME as course_name,
            		EVENT_TEXT as event_text,
            		event as event,
            		context_page_title as page_title,
            		context_page_url as page_url,
            		parse_url(context_page_referrer, 1):host::string as referrer_host_unparsed,
            		regexp_substr(parse_url(context_page_referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
            			as referrer_host,
            		context_page_referrer as referrer,
        
            		parse_url(context_page_url, 1):parameters as search_params,
        
            		context_campaign_source as campaign_source,
            		context_campaign_medium as campaign_medium,
            		context_campaign_name as campaign_name,
            		context_campaign_content as campaign_content,
            		search_params:utm_term as utm_term,
        
            		search_params:rdt_cid as reddit_cid,
            		search_params:gclid as gclid,
        
                	timestamp
            	from {{ source('segment_dagster_u', 'course_landing_page') }} 
            )
        
            select *
            from source
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_dagster_u__course_landing_page',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_dagster_u__course_landing_page',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_dagster_u__course_landing_page',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DAGSTER_U__COURSE_LANDING_PAGE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_university',
              'identifies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_dagster_u__identifies
        
        #### Raw SQL:
        ```sql
            with source as (
          
              select * from {{ source('segment_dagster_u', 'identifies') }}
            ),
        
            renamed as (
            
              select
                id as event_id, 
                original_timestamp, 
                anonymous_id, 
                coalesce(name, concat(first_name, ' ', last_name)) as name, 
                first_name, 
                last_name, 
                {{ email_cleaner('email') }} as email,
                user_id, 
                uuid_ts, 
                context_library_version, 
                context_timezone, 
                context_user_agent_data_mobile, 
                created_at, 
                context_user_agent_data_platform, 
                sent_at, 
                timestamp, 
                context_locale, 
                context_page_path, 
                context_page_title, 
                context_user_agent_data_brands, 
                received_at, 
                context_user_agent, 
                context_page_url, 
                context_ip, 
                context_library_name, 
                context_page_referrer, 
                context_campaign_source, 
                context_page_search, 
                context_campaign_medium, 
                context_campaign_name, 
                context_campaign_content
              from source
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_dagster_u__identifies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_dagster_u__identifies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_dagster_u__identifies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DAGSTER_U__IDENTIFIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_university',
              'pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_dagster_u__pages
        
        #### Raw SQL:
        ```sql
            select
        
                id as event_id,
                anonymous_id,
                lower(user_id) as user_id,
                {{ email_cleaner('USER_ID') }} as email,
                context_page_title as page_title,
                context_page_url as url,
                parse_url(referrer, 1):host::string as referrer_host_unparsed,
                regexp_substr(parse_url(referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
                    as referrer_host,
                referrer,
                path,
                title,
                search,
        
                parse_url(context_page_url, 1):parameters as search_params,
        
                context_campaign_source as campaign_source,
                context_campaign_medium as campaign_medium,
                context_campaign_name as campaign_name,
                context_campaign_content as campaign_content,
                search_params:utm_term as utm_term,
        
                search_params:rdt_cid as reddit_cid,
                search_params:gclid as gclid,
        
                timestamp
            from {{ source('segment_dagster_u', 'pages') }}
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_dagster_u__pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_dagster_u__pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_dagster_u__pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DAGSTER_U__PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_university',
              'quiz_start_page',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_dagster_u__quiz_start_page
        
        #### Raw SQL:
        ```sql
            with source as (
            	select
            		ID as event_id,
            		ANONYMOUS_ID as anonymous_id,
            		lower(USER_ID) as user_id,
            		{{ email_cleaner('USER_ID') }} as email,
            		COURSE_ID as course_id,
            		COURSE_NAME as course_name,
            		EVENT as event,
            		EVENT_TEXT as event_text,
            		CONTEXT_PAGE_TITLE as page_title,
            		context_page_url as page_url,
            		parse_url(context_page_referrer, 1):host::string as referrer_host_unparsed,
            		regexp_substr(parse_url(context_page_referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
            			as referrer_host,
            		context_page_referrer as referrer,
        
            		parse_url(context_page_url, 1):parameters as search_params,
            		search_params:utm_term as utm_term,
        
            		search_params:rdt_cid as reddit_cid,
            		search_params:gclid as gclid,
        
            		timestamp
            	from {{ source('segment_dagster_u', 'quiz_start_page') }} 
            )
        
            select *
            from source
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_dagster_u__quiz_start_page',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_dagster_u__quiz_start_page',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_dagster_u__quiz_start_page',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DAGSTER_U__QUIZ_START_PAGE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_university',
              'signup',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_dagster_u__signup
        
        #### Raw SQL:
        ```sql
            with source as (
            	select
            		ID as event_id,
            		ANONYMOUS_ID as anonymous_id,
            		lower(USER_ID) as user_id,
            		{{ email_cleaner('USER_ID') }} as email,
            		EVENT as event,
            		EVENT_TEXT as event_text,
        		
            		context_page_title as page_title,
            		context_page_url as page_url,
            		parse_url(context_page_referrer, 1):host::string as referrer_host_unparsed,
            		regexp_substr(parse_url(context_page_referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
            			as referrer_host,
            		context_page_referrer as referrer,
        
            		parse_url(context_page_url, 1):parameters as search_params,
            		search_params:utm_term as utm_term,
        
            		search_params:rdt_cid as reddit_cid,
            		search_params:gclid as gclid,
        
            		timestamp
            	from {{ source('segment_dagster_u', 'signup') }} 
            )
        
            select *
            from source
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_dagster_u__signup',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_dagster_u__signup',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_dagster_u__signup',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DAGSTER_U__SIGNUP',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_university',
              'tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_dagster_u__tracks
        
        #### Raw SQL:
        ```sql
            with source as (
            	select
            		CONTEXT_USER_AGENT_DATA_MOBILE as context_user_agent_data_mobile,
            		ORIGINAL_TIMESTAMP as original_timestamp,
            		CONTEXT_IP as context_ip,
            		CONTEXT_TIMEZONE as context_timezone,
            		CONTEXT_LOCALE as context_locale,
            		CONTEXT_PAGE_REFERRER as context_page_referrer,
            		CONTEXT_USER_AGENT_DATA_BRANDS as context_user_agent_data_brands,
            		RECEIVED_AT as received_at,
            		SENT_AT as sent_at,
            		TIMESTAMP as timestamp,
            		ANONYMOUS_ID as anonymous_id,
            		CONTEXT_LIBRARY_VERSION as context_library_version,
            		CONTEXT_USER_AGENT as context_user_agent,
            		CONTEXT_USER_AGENT_DATA_PLATFORM as context_user_agent_data_platform,
            		EVENT as event,
            		EVENT_TEXT as event_text,
            		CONTEXT_PAGE_PATH as context_page_path,
            		CONTEXT_PAGE_URL as context_page_url,
            		ID as id,
            		USER_ID as user_id,
            		UUID_TS as uuid_ts,
            		CONTEXT_LIBRARY_NAME as context_library_name,
            		CONTEXT_PAGE_TITLE as context_page_title,
            		CONTEXT_PAGE_SEARCH as context_page_search,
            		CONTEXT_CAMPAIGN_MEDIUM as context_campaign_medium,
            		CONTEXT_CAMPAIGN_NAME as context_campaign_name,
            		CONTEXT_CAMPAIGN_SOURCE as context_campaign_source,
            		CONTEXT_CAMPAIGN_CONTENT as context_campaign_content
            	from {{ source('segment_dagster_u', 'tracks') }} 
            )
        
            select *
            from source
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_dagster_u__tracks',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_dagster_u__tracks',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_dagster_u__tracks',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DAGSTER_U__TRACKS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_docs',
              'pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_docs__pages
        
        #### Raw SQL:
        ```sql
            select
        
                id as event_id,
                anonymous_id,
                user_id,
        
                parse_url(referrer, 1):host::string as referrer_host_unparsed,
                regexp_substr(parse_url(referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
                    as referrer_host,
                referrer,
                path,
                title,
                search,
                url,
        
                parse_url(context_page_url, 1):parameters as search_params,
        
                context_campaign_source as campaign_source,
                context_campaign_medium as campaign_medium,
                context_campaign_name as campaign_name,
                context_campaign_content as campaign_content,
                search_params:utm_term as utm_term,
        
                search_params:rdt_cid as reddit_cid,
                search_params:gclid as gclid,
        
                timestamp
        
            from {{ source('segment_docs', 'pages') }}
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_docs__pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_docs__pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_docs__pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_DOCS__PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_io',
              'hubspot_form_submit',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_web__hubspot_form_submit
        
        #### Raw SQL:
        ```sql
            with source as (
                select
                    event_text as event_text,
                    firstname as firstname,
                    received_at as received_at,
                    message as message,
                    context_page_path as context_page_path,
                    context_page_search as context_page_search,
                    context_user_agent_data_brands as context_user_agent_data_brands,
                    how_did_you_hear_about_us as how_did_you_hear_about_us,
                    context_library_name as context_library_name,
                    context_page_url as context_page_url,
                    context_timezone as context_timezone,
                    original_timestamp as original_timestamp,
                    context_ip as context_ip,
                    context_library_version as context_library_version,
                    context_user_agent_data_platform as context_user_agent_data_platform,
                    select_request_type as request_type,
                    {{ email_cleaner('email') }} as email,
                    id as event_id,
                    timestamp as timestamp,
                    context_locale as context_locale,
                    context_user_agent_data_mobile as context_user_agent_data_mobile,
                    event as event,
                    form_id as form_id,
                    lastname as lastname,
                    sent_at as sent_at,
                    uuid_ts as uuid_ts,
                    company as company,
                    context_page_title as context_page_title,
                    context_user_agent as context_user_agent,
                    hs_context as hs_context,
                    anonymous_id as anonymous_id,
                    user_id,
                    form_name as form_name,
                    context_page_referrer as context_page_referrer,
                    _0_2_city as city,
                    _0_2_what_geographies_do_you_serve as what_geographies_do_you_serve,
                    please_let_us_know_where_you_heard_about_dagster as where_did_you_hear_about_dagster,
                    website as website,
                    _0_2_who_are_some_representative_marque_customers_your_company_works_with as who_are_marque_customers_your_company_works_with,
                    _0_2_how_many_of_your_consultants_engineers_are_currently_working_with_dagster as how_many_consultants_engineers_are_working_with_dagster,
                    _0_2_numberofemployees as num_employees,
                    _0_2_how_did_you_hear_about_dagster as how_did_you_hear_about_dagster,
                    _0_2_which_customers_have_you_implemented_on_dagster as which_customers_have_you_implemented_on_dagster,
                    _0_2_why_are_you_interested_in_becoming_a_partner_with_dagster as why_are_you_interested_in_becoming_a_partner,
                    company_description as company_description,
                    company_logo as company_logo
                from {{ source('segment_web', 'hubspot_form_submit') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_web__hubspot_form_submit',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_web__hubspot_form_submit',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_web__hubspot_form_submit',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_WEB__HUBSPOT_FORM_SUBMIT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_io',
              'identifies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_web__identifies
        
        #### Raw SQL:
        ```sql
            select
        
                id as event_id,
                anonymous_id,
                timestamp,
                * ilike 'CLEARBIT%' -- noqa
        
            from {{ source('segment_web', 'identifies') }}
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_web__identifies',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_web__identifies',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_web__identifies',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_WEB__IDENTIFIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'segment',
              'dagster_io',
              'pages',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_segment_web__pages
        
        #### Raw SQL:
        ```sql
            select
        
                id as event_id,
                anonymous_id,
                user_id,
        
                parse_url(referrer, 1):host::string as referrer_host_unparsed,
                regexp_substr(parse_url(referrer, 1):host::string, '(www\.)?(.+)', 1, 1, 'e', 2)
                    as referrer_host,
                referrer,
                path,
                title,
                search,
        
                parse_url(context_page_url, 1):parameters as search_params,
                context_page_url as url,
                context_campaign_source as campaign_source,
                context_campaign_medium as campaign_medium,
                context_campaign_name as campaign_name,
                context_campaign_content as campaign_content,
                search_params:utm_term as utm_term,
        
                search_params:rdt_cid as reddit_cid,
                search_params:gclid as gclid,
        
                timestamp
        
            from {{ source('segment_web', 'pages') }}
        ```
      ''',
      'group_name': 'staging_segment',
      'key': 'sandbox//stg_segment_web__pages',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_segment_web__pages',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_segment_web__pages',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SEGMENT_WEB__PAGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'slack',
              'dagster',
              'member_metrics',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_slack__member_metrics
        
        #### Raw SQL:
        ```sql
            select
                to_timestamp(ds, 9) as ds,
                channels_count,
                full_members_count,
                claimed_full_members_count,
                readers_count_1d as daily_active_members,
                writers_count_1d as daily_active_posters,
                readers_count_7d as weekly_active_members,
                writers_count_7d as weekly_active_posters,
                messages_count
            from {{ source('slack', 'member_metrics') }}
            order by 1
        ```
      ''',
      'group_name': 'staging_slack',
      'key': 'sandbox//stg_slack__member_metrics',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_slack__member_metrics',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_slack__member_metrics',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SLACK__MEMBER_METRICS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              'snapshots',
              'hubspot_company_daily_snapshot',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_snapshot__hubspot_company
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('hubspot_company_daily_snapshot') }}
            ),
        
            final as (
        
                select
                    snapshot_date, 
                    id, 
                    description, 
                    industry, 
                    name, 
                    annualrevenue, 
                    domain, 
                    website, 
                    address, 
                    create_time, 
                    create_date, 
                    numberofemployees, 
                    type, 
                    hubspot_owner_id, 
                    salesforce_account_id, 
                    organization_id, 
                    organization_name, 
                    additional_domains, 
                    company_unique_id, 
                    is_target_account, 
                    lifecycle_stage, 
                    intent_score,
                    dbt_scd_id, 
                    dbt_updated_at, 
                    dbt_valid_from, 
                    dbt_valid_to
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_snapshot',
      'key': 'sandbox//stg_snapshot__hubspot_company',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_snapshot__hubspot_company',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_snapshot__hubspot_company',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SNAPSHOT__HUBSPOT_COMPANY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              'snapshots',
              'salesforce_accounts_daily_snapshot',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_snapshot__salesforce_account
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('salesforce_accounts_daily_snapshot') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'staging_snapshot',
      'key': 'sandbox//stg_snapshot__salesforce_account',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_snapshot__salesforce_account',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_snapshot__salesforce_account',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SNAPSHOT__SALESFORCE_ACCOUNT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              'snapshots',
              'salesforce_opportunities_daily_snapshot',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_snapshot__salesforce_opportunities
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('salesforce_opportunities_daily_snapshot') }}
            ),
        
            renamed as (
            
                select
                    snapshot_date, 
                    opportunity_id, 
                    account_id, 
                    contact_id, 
                    owner_id, 
                    opportunity_name, 
                    description, 
                    stage_name, 
                    amount, 
                    amount_year1, 
                    amount_year2, 
                    amount_year3, 
                    amount_year4, 
                    amount_year5, 
                    probability, 
                    close_date, 
                    opportunity_type, 
                    next_step, 
                    lead_source, 
                    is_closed, 
                    is_won, 
                    is_deleted, 
                    created_at, 
                    updated_at, 
                    loss_reason, 
                    loss_details, 
                    competitor, 
                    manual_forecast_category, 
                    arr, 
                    new_arr, 
                    prior_term_arr, 
                    sal_date, 
                    account_source, 
                    pre_opportunity_date, 
                    discovery_date, 
                    evaluation_date, 
                    proposal_date, 
                    negotiation_review_date, 
                    recent_source,
                    win_loss_competitor, 
                    current_orchestrator, 
                    budget, 
                    missing_functionality, 
                    feature_requirements, 
                    forecast_category, 
                    forecast_category_name, 
                    intro_meeting_date, 
                    meeting_held_date, 
                    created_by_id, 
                    sal_created_by_id, 
                    snapshot_at,
                    dbt_scd_id, 
                    dbt_updated_at, 
                    dbt_valid_from, 
                    dbt_valid_to, 
                from source
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_snapshot',
      'key': 'sandbox//stg_snapshot__salesforce_opportunities',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_snapshot__salesforce_opportunities',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_snapshot__salesforce_opportunities',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_SNAPSHOT__SALESFORCE_OPPORTUNITIES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'balance_transactions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__balance_transactions
        
        #### Raw SQL:
        ```sql
            select
        
                id as balance_transaction_id,
                amount,
                available_on,
                currency,
                description,
                fee / 100.0 as fee_amount_dollars,
                net,
                source_id as source,
                status,
                type,
                created as created_at
        
            from {{ source('stripe_pipeline', 'balance_transactions') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__balance_transactions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='balance_transaction_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_stripe__balance_transactions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__balance_transactions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__BALANCE_TRANSACTIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'charges',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__charges
        
        #### Raw SQL:
        ```sql
            select
        
                id as charge_id,
                balance_transaction_id,
                customer_id,
                invoice_id,
                payment_intent as payment_intent_id,
                payment_method_id,
        
                amount / 100.0 as amount_dollars,
                iff(captured, amount_dollars, 0) as amount_captured_dollars,
                amount_refunded / 100.0 as amount_refunded_dollars,
                captured as is_captured,
                currency,
                description,
                dispute_id is not null as is_disputed,
                failure_code,
                failure_message,
                paid as is_paid,
                {{ email_cleaner('receipt_email') }} as receipt_email,
                receipt_number,
                refunded as is_refunded,
                status,
                created as created_at
        
            from {{ source('stripe_pipeline', 'charges') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__charges',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='charge_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_stripe__charges',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__charges',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__CHARGES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'customers',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__customers
        
        #### Raw SQL:
        ```sql
            select
        
                id as customer_id,
                name as customer_name,
        
                account_balance / 100.0 as account_balance_dollars,
                currency,
                delinquent as is_delinquent,
                description,
                {{ email_cleaner('email') }} as email,
        
                created as created_at
        
            from {{ source('stripe_pipeline', 'customers') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__customers',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='customer_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_stripe__customers',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__customers',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__CUSTOMERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'invoice_line_items',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Line Items are pulled in to fetch tax amounts.
        
        #### Raw SQL:
        ```sql
            select
        
                id as line_item_id,
                invoice_id,
                subscription as subscription_id,
                subscription_item_id,
                invoice_item_id,
        
                -- metadata:dagster_cloud_organization_id::number as organization_id,
                -- metadata:dagster_cloud_organization_name::string as organization_name,
                -- metadata:managed_by::string as managed_by,
                -- metadata:plan as metadata_plan,
        
                source_type as line_item_type,
                amount / 100.0 as line_item_amount_dollars,
                currency,
                description as line_item_description,
                discountable as is_discountable,
                -- discounts,
                -- discount_amounts,
                quantity,
        
                period_start,
                period_end,
                plan_id as plan,
                price_id as price,
                proration
        
            from {{ source('stripe_pipeline', 'invoice_line_items') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__invoice_line_items',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='line_item_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_stripe__invoice_line_items',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__invoice_line_items',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__INVOICE_LINE_ITEMS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'invoices',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__invoices
        
        #### Raw SQL:
        ```sql
            select
        
                id as invoice_id,
        
                charge_id,
                customer_id,
                subscription_id,
        
                amount_due / 100.0 as amount_due_dollars,
                amount_paid / 100.0 as amount_paid_dollars,
                amount_remaining / 100.0 as amount_remaining_dollars,
                ending_balance / 100.0 as ending_balance_dollars,
                subtotal / 100.0 as invoice_subtotal_dollars,
                tax / 100.0 as invoice_tax_dollars,
                total / 100.0 as invoice_total_dollars,
        
                customer_name,
                {{ email_cleaner('customer_email') }} as customer_email,
                attempt_count,
                -- billing as billing_type,
                billing_reason,
                collection_method,
                currency,
                description as invoice_memo,
                -- discount,
                due_date as due_at,
                number,
                -- closed as is_closed,
                paid as is_paid,
                period_start,
                period_end,
                status,
        
                date as invoice_created_at
                -- coalesce(status_transitions:finalized_at::timestamp, finalized_at) as finalized_at
        
        
            from {{ source('stripe_pipeline', 'invoices') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__invoices',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_stripe__invoices',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__invoices',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__INVOICES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'plans',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__plans
        
        #### Raw SQL:
        ```sql
            select
        
                id as plan_id,
        
                amount / 100.0 as plan_amount_dollars,
                billing_scheme,
                currency,
                interval,
                interval_count,
                nickname,
                product_id,
                tiers_mode,
                usage_type,
                created as created_at
        
            from {{ source('stripe_pipeline', 'plans') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__plans',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_stripe__plans',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__plans',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__PLANS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'subscription_items',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__subscription_items
        
        #### Raw SQL:
        ```sql
            select
        
                id as subscription_item_id,
                batch_timestamp,
                billing_thresholds_usage_gte,
                created as created_at,
                merchant_id,
        
                plan_amount,
                plan_created,
                plan_currency,
                plan_id,
                plan_interval,
                plan_interval_count,
                plan_nickname,
                plan_product_id,
                plan_trial_period_days,
        
                price_created,
                price_currency,
                price_id,
                price_nickname,
                price_product_id,
                price_recurring_interval,
                price_recurring_interval_count,
                price_recurring_trial_period_days,
                price_unit_amount,
        
                quantity,
        
                subscription_id
        
            from {{ source('stripe_pipeline', 'subscription_items') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__subscription_items',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_stripe__subscription_items',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__subscription_items',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__SUBSCRIPTION_ITEMS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'subscription_schedule_phases',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__subscription_schedule_phases
        
        #### Raw SQL:
        ```sql
            select
        
                id as schedule_phase_id,
                schedule_id,
                start_date,
                end_date
        
            from {{ source('stripe_pipeline', 'subscription_schedule_phases') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__subscription_schedule_phases',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_stripe__subscription_schedule_phases',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__subscription_schedule_phases',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__SUBSCRIPTION_SCHEDULE_PHASES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'subscription_schedules',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__subscription_schedules
        
        #### Raw SQL:
        ```sql
            select
        
                id as schedule_id,
                subscription as subscription_id,
                customer as customer_id,
                canceled_at,
                completed_at,
                created as created_at,
                end_behavior,
                released_at,
                released_subscription
        
            from {{ source('stripe_pipeline', 'subscription_schedules') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__subscription_schedules',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_stripe__subscription_schedules',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__subscription_schedules',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__SUBSCRIPTION_SCHEDULES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__subscriptions
        
        #### Raw SQL:
        ```sql
            select
        
                id as subscription_id,
                customer_id,
        
                application_fee_percent,
                billing,
                billing_cycle_anchor,
                billing_thresholds_amount_gte,
                billing_thresholds_reset_billing_cycle_anchor,
                cancel_at,
                cancel_at_period_end,
                canceled_at,
                cancellation_reason,
                cancellation_reason_text,
                created as created_at,
                current_period_end,
                current_period_start,
                days_until_due,
                default_payment_method_id,
                default_source_id,
                discount_coupon_id,
                discount_customer_id,
                discount_end,
                discount_start,
                discount_subscription,
                ended_at,
                merchant_id,
                pause_collection_behavior,
                pause_collection_resumes_at,
                plan_id,
                price_id,
                quantity,
                start_date,
                status,
                tax_percent,
                trial_end,
                trial_start
        
            from {{ source('stripe_pipeline', 'subscriptions') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__subscriptions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_stripe__subscriptions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__subscriptions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__SUBSCRIPTIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'stripe_pipeline',
              'stripe',
              'subscriptions_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_stripe__subscriptions_metadata
        
        #### Raw SQL:
        ```sql
            select
                subscription_id,
                key,
                value
        
            from {{ source('stripe_pipeline', 'subscriptions_metadata') }}
        ```
      ''',
      'group_name': 'staging_stripe',
      'key': 'sandbox//stg_stripe__subscriptions_metadata',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_stripe__subscriptions_metadata',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_stripe__subscriptions_metadata',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_STRIPE__SUBSCRIPTIONS_METADATA',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'aws',
              'oss_telemetry',
              'oss_telemetry_prod_ext',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_telemetry__events
        
        #### Raw SQL:
        ```sql
            select
                replication_date,
                value:action::varchar as action,
                value:event_id::varchar as event_id,
                value:elapsed_time::varchar as elapsed_time,
                value:instance_id::varchar as instance_id,
                value:metadata as metadata,
                value:python_version::varchar as python_version,
                value:dagster_version::varchar as dagster_version,
                value:os_platform::varchar as os_platform,
                value:is_known_ci_env::boolean as is_known_ci_env,
                value:run_storage_id::varchar as run_storage_id,
                try_to_date(value:client_time::varchar) as reporting_date,
                value:metadata:client_id::varchar as client_id,
                value:metadata:location_name_hash::varchar as code_location_hash
            from {{ source('oss_telemetry', 'oss_telemetry_prod_ext') }}
            where
                reporting_date is not null
                and coalesce(reporting_date, date('1970-01-01')) > '2022-01-01'
                and DAGSTER_VERSION != ''
        ```
      ''',
      'group_name': 'staging_telemetry',
      'key': 'sandbox//stg_telemetry__events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_telemetry__events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_telemetry__events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_TELEMETRY__EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'dlt_thinkific_course_reviews',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_thinkific__course_reviews
        
        #### Raw SQL:
        ```sql
            select
                id as course_review_id,
                title,
                review_text,
                course_id,
                rating,
                user_id,
                approved,
                created_at
            from {{ source('thinkific', 'course_reviews') }}
        ```
      ''',
      'group_name': 'staging_thinkific',
      'key': 'sandbox//stg_thinkific__course_reviews',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='course_review_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='course_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_thinkific__course_reviews',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_thinkific__course_reviews',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_THINKIFIC__COURSE_REVIEWS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'dlt_thinkific_courses',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_thinkific__courses
        
        #### Raw SQL:
        ```sql
            select
                id as course_id,
                name,
                slug,
                product_id,
                description,
                keywords,
                banner_image_url,
                course_card_image_url,
                user_id,
                reviews_enabled,
                instructor_id
            from {{ source('thinkific', 'courses') }}
        ```
      ''',
      'group_name': 'staging_thinkific',
      'key': 'sandbox//stg_thinkific__courses',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='course_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='name',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_thinkific__courses',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_thinkific__courses',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_THINKIFIC__COURSES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'dlt_thinkific_enrollments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_thinkific__enrollments
        
        #### Raw SQL:
        ```sql
            select
                id as enrollment_id,
                created_at,
                {{ email_cleaner('user_email') }} as user_email,
                user_name,
                user_id,
                course_name,
                course_id,
                cast(percentage_completed as decimal(10, 4)) as percentage_completed,
                expired,
                is_free_trial,
                completed,
                started_at,
                activated_at,
                updated_at,
                completed_at
            from {{ source('thinkific', 'enrollments') }}
        ```
      ''',
      'group_name': 'staging_thinkific',
      'key': 'sandbox//stg_thinkific__enrollments',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='enrollment_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='course_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_thinkific__enrollments',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_thinkific__enrollments',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_THINKIFIC__ENROLLMENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'dlt_thinkific_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_thinkific__users
        
        #### Raw SQL:
        ```sql
            select
                id as user_id,
                created_at,
                first_name,
                last_name,
                full_name,
                company,
                {{ email_cleaner('email') }} as email,
                avatar_url,
                affiliate_commission_type,
                headline
            from {{ source('thinkific', 'users') }}
        ```
      ''',
      'group_name': 'staging_thinkific',
      'key': 'sandbox//stg_thinkific__users',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stg_thinkific__users',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_thinkific__users',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_THINKIFIC__USERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'youtube_analytics',
              'channel',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_youtube__channel
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('youtube_raw', 'channel') }}
        
            ),
        
            final as (
        
                select
                    id::varchar as id,
                    snippet_title as channel_name,
                    snippet_published_at::date as channel_created_at,
                    statistics_view_count as num_views,
                    statistics_subscriber_count as num_subscribers,
                    statistics_video_count as num_videos
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_youtube',
      'key': 'sandbox//stg_youtube__channel',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_youtube__channel',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_youtube__channel',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_YOUTUBE__CHANNEL',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'youtube_analytics',
              'channel_combined_a_2',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_youtube__channel_combined
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('youtube_raw', 'channel_combined_a_2') }}
        
            ),
        
            final as (
        
                select
                    date::date as date,
                    views as num_views,
                    country_code,
                    live_or_on_demand,
                    subscribed_status,
                    watch_time_minutes,
                    average_view_duration_seconds,
                    average_view_duration_percentage,
                    red_views as num_views_red,
                    red_watch_time_minutes,
                    channel_id,
                    video_id,
                    traffic_source_type,
                    device_type,
                    playback_location_type,
                    operating_system
        
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_youtube',
      'key': 'sandbox//stg_youtube__channel_combined',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_youtube__channel_combined',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_youtube__channel_combined',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_YOUTUBE__CHANNEL_COMBINED',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'youtube_analytics',
              'playlist',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_youtube__playlist
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('youtube_raw', 'playlist') }}
        
            ),
        
            final as (
        
                select
                    id::varchar as id,
                    snippet_title as playlist_title,
                    snippet_description as playlist_description,
                    snippet_published_at::date as playlist_created_at,
                    content_details_item_count as num_videos
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_youtube',
      'key': 'sandbox//stg_youtube__playlist',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_youtube__playlist',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_youtube__playlist',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_YOUTUBE__PLAYLIST',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'youtube_analytics',
              'playlist_combined_a_1',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_youtube__playlist_combined
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('youtube_raw', 'playlist_combined_a_1') }}
        
            ),
        
            final as (
        
                select
                    date::date as date,
                    views as num_views,
                    country_code,
                    live_or_on_demand,
                    subscribed_status,
                    watch_time_minutes,
                    average_view_duration_seconds,
                    playlist_starts,
                    playlist_saves_added,
                    playlist_saves_removed,
                    video_id,
                    playlist_id,
                    traffic_source_type,
                    device_type,
                    playback_location_type,
                    operating_system,
                    channel_id
        
                from source
                )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_youtube',
      'key': 'sandbox//stg_youtube__playlist_combined',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_youtube__playlist_combined',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_youtube__playlist_combined',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_YOUTUBE__PLAYLIST_COMBINED',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'youtube_analytics',
              'video',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_youtube__video
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ source('youtube_raw', 'video') }}
        
            ),
        
            final as (
        
                select
                    id::varchar as id,
                    snippet_title as video_title,
                    snippet_description as video_description,
                    snippet_category_id as category_id,
                    snippet_published_at::date as video_created_at,
                    statistics_view_count as num_views,
                    statistics_like_count as num_likes,
                    statistics_dislike_count as num_dislikes,
                    statistics_comment_count as num_comments,
                    content_details_duration as video_duration
                from source
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'staging_youtube',
      'key': 'sandbox//stg_youtube__video',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_youtube__video',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_youtube__video',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_YOUTUBE__VIDEO',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'zoom',
              'webinar',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_zoom__webinar
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('zoom', 'webinar') }}
            ),
        
            renamed as (
            
                select
                    id as webinar_id,
                    topic as webinar_name,
                    duration,
                    type,
                    start_time,
                    timezone,
                    uuid,
                    join_url,
                    created_at,
                    host_id,
                    _fivetran_deleted,
                    _fivetran_synced,
                from source
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_zoom',
      'key': 'sandbox//stg_zoom__webinar',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_zoom__webinar',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_zoom__webinar',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_ZOOM__WEBINAR',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'zoom',
              'webinar_absentee',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_zoom__webinar_absentee
        
        #### Raw SQL:
        ```sql
            with source as (
          
                select * from {{ source('zoom', 'webinar_absentee') }}
            ),
        
            renamed as (
        
                select
                    webinar_id,
                    registrant_id,
                    {{ email_cleaner('email') }} as email,
                    _fivetran_synced,
                    _fivetran_deleted,
                from source
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_zoom',
      'key': 'sandbox//stg_zoom__webinar_absentee',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_zoom__webinar_absentee',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_zoom__webinar_absentee',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_ZOOM__WEBINAR_ABSENTEE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'zoom',
              'webinar_participant',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_zoom__webinar_participant
        
        #### Raw SQL:
        ```sql
            with source as (
            
                select * from {{ source('zoom', 'webinar_participant') }}
            ),
        
            renamed as (
        
                select
                    webinar_id,
                    user_id,
                    customer_key,
                    leave_time,
                    failover,
                    {{ email_cleaner('user_email') }} as user_email,
                    registrant_id,
                    name,
                    status,
                    participant_user_id,
                    duration,
                    join_time,
                    _fivetran_deleted,
                    _fivetran_synced,
                from source
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_zoom',
      'key': 'sandbox//stg_zoom__webinar_participant',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_zoom__webinar_participant',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_zoom__webinar_participant',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_ZOOM__WEBINAR_PARTICIPANT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'fivetran',
              'zoom',
              'webinar_registrant',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt model stg_zoom__webinar_registrant
        
        #### Raw SQL:
        ```sql
            with source as (
        
              select * from {{ source('zoom', 'webinar_registrant') }}
            ),
        
            renamed as (
          
              select
                webinar_id,
                user_id,
                {{ email_cleaner('email') }} as email,
                org,
                create_time,
                country,
                role_in_purchase_process,
                city,
                purchasing_time_frame,
                industry,
                address,
                join_url,
                phone,
                comments,
                state,
                job_title,
                zip,
                no_of_employees,
                _fivetran_deleted,
                _fivetran_synced
              from source
            )
        
            select * from renamed
        ```
      ''',
      'group_name': 'staging_zoom',
      'key': 'sandbox//stg_zoom__webinar_registrant',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'view',
        'dagster/table_name': 'sandbox.stg_zoom__webinar_registrant',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stg_zoom__webinar_registrant',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STG_ZOOM__WEBINAR_REGISTRANT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__customers',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Stripe customers, ingested from the Stripe Pipeline
        
        #### Raw SQL:
        ```sql
            select *
            from {{ ref('stg_stripe__customers') }}
        ```
      ''',
      'group_name': 'model_stripe',
      'key': 'sandbox//stripe_customers',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.stripe_customers',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stripe_customers',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STRIPE_CUSTOMERS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'self_serve_stripe_products',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__invoice_line_items',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__invoices',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__plans',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All non-zero invoices from Stripe
        
        #### Raw SQL:
        ```sql
            with
        
            invoices as (
                select
        
                    invoice_created_at,
                    status as invoice_status,
                    period_start,
                    period_end,
                    invoice_id,
                    customer_id,
                    customer_name,
                    invoice_total_dollars as invoice_total
        
                from {{ ref('stg_stripe__invoices') }}
                group by all
            ),
        
            invoice_types as (
        
                select
                    invoice_id,
                    max(pt.plan_type) as plan_type
                from {{ ref('stg_stripe__invoice_line_items') }} as li
                left join {{ ref('stg_stripe__plans') }} as p on li.plan = p.plan_id
                left join {{ ref('self_serve_stripe_products') }} as pt on p.product_id = pt.product_id
                group by 1
            )
        
            select
                invoice_id,
                customer_id,
                invoice_created_at,
                period_start,
                period_end,
                invoice_status,
                customer_name,
                split_part(plan_type, '_', 1) as base_plan_type,
                invoice_total
            from invoices
            left join invoice_types using (invoice_id)
            where invoice_total > 0
        ```
      ''',
      'group_name': 'model_stripe',
      'key': 'sandbox//stripe_invoices',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='base_plan_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.stripe_invoices',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stripe_invoices',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STRIPE_INVOICES',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__subscription_schedule_phases',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__subscription_schedules',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__subscriptions_metadata',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Stripe subscriptions ingested from the Stripe Pipeline
        
        #### Raw SQL:
        ```sql
            {{ config( materialized='table') }}
            with subscriptions as (
                select * from {{ ref('stg_stripe__subscriptions') }}
            ),
        
            schedules as (
                select * from {{ ref('stg_stripe__subscription_schedules') }}
            ),
        
            phases as (
                select * from {{ ref('stg_stripe__subscription_schedule_phases') }}
            ),
        
            sub_metadata as (
                select
                    subscription_id,
                    max(iff(key = 'plan', value, null)) as plan,
                    max(iff(key = 'Cloud_Credits', value, null)) as cloud_credits
                from {{ ref('stg_stripe__subscriptions_metadata') }}
                where key in ('Cloud_Credits', 'plan')
                group by 1
            ),
        
            final as (
        
                select
        
                    subscriptions.customer_id,
                    subscriptions.subscription_id,
                    subscriptions.status as subscription_status,
                    subscriptions.created_at,
                    subscriptions.trial_start,
                    subscriptions.trial_end,
                    sub_metadata.plan as subscription_metadata_plan,
                    sub_metadata.cloud_credits as cloud_credits_contract,
                    phases.start_date as contract_start_date,
                    phases.end_date as contract_end_date,
                    datediff('days', phases.start_date, phases.end_date) as contract_length_days,
                    dense_rank()
                        over (partition by subscriptions.customer_id order by subscriptions.created_at desc)
                        as sub_idx
        
                from subscriptions
                left join schedules using (subscription_id)
                left join phases using (schedule_id)
                left join sub_metadata using (subscription_id)
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_stripe',
      'key': 'sandbox//stripe_subscriptions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.stripe_subscriptions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.stripe_subscriptions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/STRIPE_SUBSCRIPTIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'abm_company_intent_scores',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'sync_hubspot_organization',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Enriched HubSpot Company information for Hightouch to sync to HubSpot
        
        #### Raw SQL:
        ```sql
            with hubspot_companies as (
        
                select * from {{ ref('hubspot_companies') }}    
            ), 
        
            sync_hubspot_organization as (
        
                select * from {{ ref('sync_hubspot_organization') }} where organization_domain is not null
            ), 
        
            hubspot_company_intent_scores as (
        
                select * from {{ ref('abm_company_intent_scores') }}
            ), 
        
            sync_hubspot_company as (
        
                select distinct
                    hubspot_companies.id as hubspot_company_id,
                    max(coalesce(hubspot_companies.company_unique_id, sync_hubspot_organization.organization_id))::int::varchar as company_unique_key,
                    coalesce(hubspot_companies.name, sync_hubspot_organization.organization_domain, hubspot_companies.website) as name,
                    coalesce(hubspot_companies.domain, sync_hubspot_organization.organization_domain) as domain,
                    coalesce(hubspot_companies.website, sync_hubspot_organization.organization_domain) as website,
                    coalesce(hubspot_company_intent_scores.intent_score, 0)::int as intent_score
                from hubspot_companies
                full outer join sync_hubspot_organization on hubspot_companies.id = sync_hubspot_organization.hubspot_organization_company_id
                left join hubspot_company_intent_scores on hubspot_companies.id = hubspot_company_intent_scores.hubspot_company_id
                group by all
            )
        
            select * from sync_hubspot_company
            qualify row_number() over (partition by company_unique_key order by hubspot_company_id nulls last) = 1
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//sync_hubspot_company',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='company_unique_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.sync_hubspot_company',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sync_hubspot_company',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SYNC_HUBSPOT_COMPANY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'abm_contact_intent_scores',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'gtm_user_lead_source',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Enriched HubSpot Contact information for Hightouch to sync to HubSpot
        
        #### Raw SQL:
        ```sql
            with hubspot_contacts as (
        
                select * from {{ ref('hubspot_contacts') }}
        
            ), gtm_user_lead_source as (
        
                select * from {{ ref('gtm_user_lead_source') }}
                qualify row_number() over (partition by hubspot_contact_id order by lead_source is not null desc, lead_action_time asc) = 1
        
            ), contact_abm_score as (
            
                select * from {{ ref('abm_contact_intent_scores') }}
        
            ), sync_hubspot_contact as (
        
                select
                    hubspot_contacts.contact_id,
                    hubspot_contacts.company_id,
                    gtm_user_lead_source.lead_source,
                    gtm_user_lead_source.lead_source_action,
                    round(coalesce(abm_score, 0)) as abm_score
                from hubspot_contacts
                left join gtm_user_lead_source 
                    on hubspot_contacts.contact_id = gtm_user_lead_source.hubspot_contact_id
                left join contact_abm_score
                    on hubspot_contacts.contact_id = contact_abm_score.hubspot_contact_id
        
            )
        
            select * from sync_hubspot_contact
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//sync_hubspot_contact',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='contact_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.sync_hubspot_contact',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sync_hubspot_contact',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SYNC_HUBSPOT_CONTACT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'credit_utilization_forecast',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'current_credit_utilization',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'excludable_email_domains',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'hubspot_companies',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Enriched HubSpot Organization information for Hightouch to sync to HubSpot
        
        #### Raw SQL:
        ```sql
            with hubspot_companies as (
        
                select * from {{ ref('hubspot_companies') }}
            ), 
        
            user_orgs as (
        
                select * from {{ ref('user_organizations') }}
            ),
        
            contacts as (
        
                select * from {{ ref('dim_contacts') }}
            ),
        
            dim_organizations as (
        
                select * from {{ ref('dim_organizations') }}
            ),
        
            excludable_email_domains as (
        
                select * from {{ ref('excludable_email_domains') }}
            ),
        
            current_credit_utilization as (
        
                select * from {{ ref('current_credit_utilization') }}
            ),
        
            credit_utilization_forecast as (
        
                select * from {{ ref('credit_utilization_forecast') }}
            ),
        
        
        
            --- Our approach is to map orgs to Hubspot companies based on the companies associated with the org's users
            base_org_company_mapping as (
            
                select
                    u.organization_id, 
                    o.organization_name,
                    o.org_created_at,
                    o.org_updated_at,
                    o.status,
                    o.base_plan_type,
                    o.self_serve_or_enterprise,
                    o.stripe_customer_id,
                    o.trial_start,
                    o.trial_end,
                    o.last_invoice_amount,
                    o.last_invoice_date,
                    o.hybrid_deployment_count,
                    o.serverless_deployment_count,
                    o.admin_count,
                    o.editor_count,
                    o.viewer_count,
                    o.launcher_count,
                    o.custom_role_count,
                    o.total_seats_count,
                    ccu.cume_credits_used,
                    cuf.actual_predicted_utilization,
                    cuf.actual_predicted_credits_used,
                    min(u.user_created_at) as first_user,
                    case when lower(trim(account_name)) ILIKE '%' || lower(trim(o.organization_name)) || '%' then true else false end as org_name_in_account,
                    c.account_id,
                    c.hubspot_company_id,
                    c.account_name,
                    count(*) as num_account_contacts
                from user_orgs u
                left join contacts c on u.email = c.email
                left join dim_organizations o on u.organization_id = o.organization_id
                left join excludable_email_domains e on c.contact_email_domain = e.email_domain
                left join current_credit_utilization ccu on u.organization_id = ccu.organization_id
                left join credit_utilization_forecast cuf on u.organization_id = cuf.organization_id
                where
                --- population should not include internal orgs, orgs with no account id, or internal users
                    u.is_elementl_user = false
                    and o.is_internal = false
                --- exclude users with no associated account
                    and c.account_id is not null
                --- exclude users in the unnassigned users account that contains gmail/yahoo/etc. email
                    and c.account_id != '001Qo00000YonreIAB'
                --- see if we can avoid using excludable domain
                    and e.email_domain is null
                group by all
            ),
        
            --- If there is more than one associated Hubspot company, we then attempt to choose the company mapping based on the following criteria
            --- 1. See if the org name is in the account name
            --- 2. If not, then the org that has the most contacts
            --- 3. The org user that was created first    
            ranking as (
        
                select 
                    row_number() over (partition by organization_id order by 
                            org_name_in_account desc, 
                            num_account_contacts desc, 
                            first_user asc) 
                        as selection_rank, 
                    *
                from base_org_company_mapping
            ),
        
            sync_hubspot_organization as (
        
                select
                    r.organization_id,
                    r.organization_name,
                    coalesce(r.status, 'ACTIVE') = 'ACTIVE' as organization_is_active,
                    coalesce(r.status, 'ACTIVE') as organization_status,
                    r.org_created_at as organization_created_at,
                    r.org_updated_at as organization_updated_at,
                    r.base_plan_type,
                    r.self_serve_or_enterprise,
                    r.stripe_customer_id,
                    r.trial_start,
                    r.trial_end,
                    r.last_invoice_amount,
                    r.last_invoice_date,
                    r.hybrid_deployment_count,
                    r.serverless_deployment_count,
                    r.admin_count,
                    r.editor_count,
                    r.viewer_count,
                    r.launcher_count,
                    r.custom_role_count,
                    r.total_seats_count,
                    r.cume_credits_used,
                    r.actual_predicted_utilization,
                    r.actual_predicted_credits_used,
                    c.domain as organization_domain,
                    coalesce(c.company_unique_id, r.organization_id)::int::varchar as company_unique_key,
                    c.id as hubspot_organization_company_id
                from ranking r
                left join hubspot_companies c on r.hubspot_company_id = c.id
                where r.selection_rank = 1 
            ),
        
            --- we have already excluded contacts whose email address is from an excludable domain, now we exclude orgs that are associated to excludable domains
            remove_excludable_email_domains as (
        
                select 
                    s.* 
                from sync_hubspot_organization s
                left join excludable_email_domains e on s.organization_domain = e.email_domain
                where e.email_domain is null
            )
        
            select * from remove_excludable_email_domains
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//sync_hubspot_organization',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.sync_hubspot_organization',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sync_hubspot_organization',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SYNC_HUBSPOT_ORGANIZATION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'accounts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_customer_info',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'credit_utilization',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'credit_utilization_forecast',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dagster_user_roles',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'product_engagement',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_account_history',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'salesforce_tasks',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__deployments',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_invoices',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stripe_subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Summary of various Salesforce objects (Tasks, Contacts, etc) that is then sent to the Salesforce Account object.
        
        #### Raw SQL:
        ```sql
            with accounts as (
        
                select * from {{ ref('accounts') }}
            ),
        
            tasks as (
        
                select * from {{ ref('salesforce_tasks') }}
            ),
        
            contacts as (
        
                select * from {{ ref('salesforce_contacts') }}
            ),
        
            orgs as (
        
                select * from {{ ref('dim_organizations') }}
            ),
        
            user_orgs as (
        
                select * from {{ ref('user_organizations') }}
            ),
        
            stripe_invoices as (
        
                select * from {{ ref('stripe_invoices') }}
            ),
        
            cloud_customer_info as (
        
                select * from {{ ref('cloud_product_customer_info') }}
            ),
        
            stripe_subscriptions as (
        
                select * from {{ ref('stripe_subscriptions') }}
            ),
        
            credit_utilization as (
        
                select * from {{ ref('credit_utilization') }}
            ),
        
            credit_utilization_forecast as (
        
                select * from {{ ref('credit_utilization_forecast') }}
            ),
        
            product_engagement as (
        
                select * from {{ ref('product_engagement') }}
            ),
        
            product_deployment as (
        
                select * from {{ ref('stg_cloud_product__deployments') }}
            ),
        
            user_organizations as (
        
                select * from {{ ref('user_organizations') }}
            ),
        
            account_field_history as (
        
                select * from {{ ref('salesforce_account_history') }}
            ),
        
            salesforce_organizations as (
        
                select * from {{ ref('salesforce_organizations') }}
            ),
        
            user_roles as (
        
                select * from {{ ref('dagster_user_roles') }}
            ),
        
            --- look at the last time the organization id was updated for the account
            account_source_history as (
        
                select * from account_field_history
                where field = 'Organization_ID__c'
            --- we cannot speak to what occurred prior to 2025 and this is why we are using this filter
                and created_date >= '2025-01-01'
                qualify row_number() over (partition by account_id order by created_date desc) = 1
            ),
        
            --- identify salesforce accounts that only have one organization id. we have decided to not determine the organization id for accounts with multiple orgs
            org_sorting as (
        
                select 
                    organization_id,
                    account_id as salesforce_account_id
                from salesforce_organizations
                qualify count(organization_id) over (partition by account_id) = 1
            ),
        
            --- the only updates we will make to SF account mapping are those that have never been updated or was last updated by devtools
            allowable_updates as (
        
                select 
                    orgs.organization_id,
                    org_sorting.salesforce_account_id 
                from orgs
                left join org_sorting on orgs.organization_id = org_sorting.organization_id
                left join account_source_history on org_sorting.salesforce_account_id = account_source_history.account_id
                where account_source_history.created_by_email is null or account_source_history.created_by_email = 'devtools@elementl.com'
            ),
        
            organization_mapping as (
        
                select
                    orgs.organization_id,
                    coalesce(allowable_updates.salesforce_account_id, orgs.salesforce_account_id) as salesforce_account_id,
                from orgs
                left join allowable_updates using (organization_id)
                qualify row_number() over (partition by coalesce(allowable_updates.salesforce_account_id, orgs.salesforce_account_id) order by orgs.is_active desc, orgs.last_user_login desc) = 1
            ),
        
            l90d_bdr as (
        
                select 
                    account_id,
                    count(distinct who_id) as engaged_bdr_contacts,
                    count(*) as l90d_bdr_activities,
                    max(completed_date_time) as last_bdr_activity
                from tasks
                where 
                    status = 'Completed' 
                    and date(completed_date_time) >= current_date - 90
                    and assigned_to_role = 'BDR' 
                    and created_by_sales = TRUE
                group by all
            ),
        
            last_bdr_date as (
            
                select 
                    account_id,
                    max(completed_date_time) as last_bdr_activity
                from tasks
                where 
                    status = 'Completed' 
                    and assigned_to_role = 'BDR' 
                    and created_by_sales = TRUE
                group by all
            ),
        
            l90d_seller as (
        
                select 
                    account_id,
                    count(distinct who_id) as engaged_seller_contacts,
                    count(*) as l90d_seller_activities
                from tasks
                where 
                    status = 'Completed' 
                    and date(completed_date_time) >= current_date - 90
                    and (assigned_to_role = 'EAE' or assigned_to_role = 'CSR')
                    and created_by_sales = TRUE
                group by all
            ),
        
            last_seller_date as (
        
                select 
                    account_id,
                    max(completed_date_time) as last_seller_activity
                from tasks
                where 
                    status = 'Completed' 
                    and (assigned_to_role = 'EAE' or assigned_to_role = 'CSR')
                    and created_by_sales = TRUE
                group by all
            ),
        
            contact_meetings as (
        
                select
                    account_id,
                    min(contact_first_meeting) as account_first_meeting_completed,
                    max(contact_last_meeting) as account_last_meeting_completed
                from contacts
                group by all
            ),
        
            org_user_counts as (
            
                select
                    organization_id,
                    count(*) as total_user_count
                from user_orgs
                group by all
            ),
        
            last_invoice as (
                select
                    organization_id,
                    date(invoice_created_at) as last_invoice_date,
                    round(invoice_total, 2) as last_invoice_amount
                from stripe_invoices as i
                inner join cloud_customer_info as ci on i.customer_id = ci.stripe_customer_id
                qualify row_number() over (partition by organization_id order by invoice_created_at desc) = 1
            ),
        
            trials_dates as (
                select
                    customer_id as stripe_customer_id,
                    trial_start,
                    trial_end
                from stripe_subscriptions
                where trial_start is not null
            ),
        
            last_weekly_utilization as (
                select
                    organization_id,
                    week_utilization_pct,
                    date_trunc(week, credits_date) as week_start_date
                from credit_utilization
                where
                    credits_date < current_date
                    -- must be a complete week
                    and week_start_date < current_date - interval '7 days'
                qualify row_number() over (partition by organization_id order by credits_date desc) = 1
            ),
        
            running_credits_sum as (
                select
                    credits_date,
                    organization_id,
                    sum(total_credits_used)
                        over (partition by organization_id order by credits_date)
                        as running_credits_used
                from credit_utilization
            ),
        
            contract_credits_used as (
                select
                    organization_id,
                    running_credits_used
                from running_credits_sum
                where credits_date < current_date
                qualify row_number() over (partition by organization_id order by credits_date desc) = 1
            ),
        
            forecast_predictions as (
                select
                    organization_id,
                    predicted_utilization,
                    actual_predicted_utilization,
                    is_predicted_healthy_organization,
                    actual_predicted_credits_used
                from credit_utilization_forecast
            ),
        
            engagement as (
                select
                    organization_id,
                    is_90day_activated
                from product_engagement
            ),
        
            deployment_type_count as (
                select
                    organization_id,
                    count_if(is_hybrid) as hybrid_deployment_count,
                    count_if(is_serverless) as serverless_deployment_count
                from product_deployment
                where is_active
                group by all
            ),
        
            organization_role_counts as (
                select
                    organization_id,
                    count_if(role = 'ADMIN') as admin_seats,
                    count_if(role = 'EDITOR') as editor_seats,
                    count_if(role = 'LAUNCHER') as launcher_seats,
                    count_if(role = 'VIEWER' or role = 'CATALOG_VIEWER') as viewer_seats,
                    count_if(role = 'CUSTOM') as custom_seats,
                    count(*) as total_seats,
                    count_if(is_paid) as total_paid_seats
                from user_organizations
                    left join user_roles using (role)
                where not is_elementl_user and is_activated and role is not null
                group by organization_id
            ),
        
            organizations_summary as (
        
                select
                    orgs.organization_id,
                    orgs.organization_name,
                    orgs.plan_type,
                    case
                        when orgs.plan_type = 'ENTERPRISE' then 'ENTERPRISE'
                        else 'SELF_SERVE'
                    end as self_serve_or_enterprise,
                    organization_mapping.salesforce_account_id,
                    orgs.stripe_customer_id,
                    orgs.is_active as is_active_org,
                    contract_credits_used.running_credits_used as contract_credits_used,
                    org_user_counts.total_user_count,
                    deployment_type_count.hybrid_deployment_count,
                    deployment_type_count.serverless_deployment_count,
                    last_invoice.last_invoice_amount,
                    last_invoice.last_invoice_date,
                    trials_dates.trial_start as trial_start_date,
                    trials_dates.trial_end as trial_end_date,
                    forecast_predictions.predicted_utilization,
                    forecast_predictions.actual_predicted_utilization,
                    forecast_predictions.actual_predicted_credits_used,
                    forecast_predictions.is_predicted_healthy_organization,
                    engagement.is_90day_activated,
                    last_weekly_utilization.week_utilization_pct,
                    organization_role_counts.admin_seats,
                    organization_role_counts.editor_seats,
                    organization_role_counts.launcher_seats,
                    organization_role_counts.viewer_seats,
                    organization_role_counts.custom_seats,
                    organization_role_counts.total_seats,
                    organization_role_counts.total_paid_seats
                from orgs
                inner join org_user_counts using (organization_id)
                left join organization_mapping using (organization_id)
                left join last_invoice using (organization_id)
                left join contract_credits_used using (organization_id)
                left join trials_dates using (stripe_customer_id)
                left join forecast_predictions using (organization_id)
                left join engagement using (organization_id)
                left join deployment_type_count using (organization_id)
                left join last_weekly_utilization using (organization_id)
                left join organization_role_counts using (organization_id)
                qualify row_number() over (partition by organization_id order by trial_start_date desc nulls last) = 1
            ),
        
            final as (
        
                select
                    accounts.account_id as salesforce_account_id,
                    accounts.abm_status,
                    coalesce(l90d_bdr.engaged_bdr_contacts, 0) as engaged_bdr_contacts,
                    coalesce(l90d_bdr.l90d_bdr_activities, 0) as l90d_bdr_activities,
                    last_bdr_date.last_bdr_activity,
                    coalesce(l90d_seller.engaged_seller_contacts, 0) as engaged_seller_contacts,
                    coalesce(l90d_seller.l90d_seller_activities, 0) as l90d_seller_activities,
                    last_seller_date.last_seller_activity,
                    contact_meetings.* EXCLUDE account_id,
                    organizations_summary.* EXCLUDE salesforce_account_id 
                from accounts
                left join l90d_bdr on accounts.account_id = l90d_bdr.account_id
                left join last_bdr_date on accounts.account_id = last_bdr_date.account_id
                left join l90d_seller on accounts.account_id = l90d_seller.account_id
                left join last_seller_date on accounts.account_id = last_seller_date.account_id
                left join contact_meetings on accounts.account_id = contact_meetings.account_id
                left join organizations_summary on accounts.account_id = organizations_summary.salesforce_account_id
            )
        
            select * from final
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//sync_salesforce_account',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='salesforce_account_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.sync_salesforce_account',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.sync_salesforce_account',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/SYNC_SALESFORCE_ACCOUNT',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'instance_type_priority',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_telemetry__events',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Cleaned telemetry events
        
        #### Raw SQL:
        ```sql
            {{
              config(
                snowflake_warehouse="purina",
                materialized='incremental',
                unique_key='event_id',
                incremental_strategy='merge',
                on_schema_change='append_new_columns',
              )
            }}
        
            with
        
            events_model as (
                select
                    lower(action) as action,
                    event_id,
                    elapsed_time,
                    instance_id,
                    metadata,
                    python_version,
                    dagster_version as dagster_version_raw,
                    regexp_substr(dagster_version, $$\d+\.\d+$$) as dagster_version_parsed,
                    os_platform,
                    run_storage_id,
                    is_known_ci_env,
                    reporting_date,
                    metadata:client_id::string as client_id,
                    metadata:location_name_hash::string as code_location_hash,
                    case
                        when (
                            left(dagster_version_parsed, 1) >= 1
                            and os_platform in ('Linux', 'FreeBSD')
                            and not is_known_ci_env
                        ) then 'SERVER'
                        when (
                            left(dagster_version_parsed, 1) >= 1
                            and os_platform in ('Linux', 'FreeBSD')
                            and is_known_ci_env
                        ) then 'CI'
                        when (
                            left(dagster_version_parsed, 1) >= 1
                            and os_platform not in ('Linux', 'FreeBSD')
                            and not is_known_ci_env
                        ) then 'LOCAL'
                        else 'UNKNOWN'
                    end as instance_type
                from {{ ref('stg_telemetry__events') }}
                {% if is_incremental() %}
                where
                    replication_date >= '{{ var('min_date') }}'::date - 2 
                    and replication_date < '{{ var('max_date') }}'::date
                {% endif %}
                qualify row_number() over (
                    partition by event_id
                    order by reporting_date desc
                ) = 1
            )
        
            select
                action,
                event_id,
                elapsed_time,
                instance_id,
                metadata,
                python_version,
                dagster_version_raw,
                dagster_version_parsed,
                os_platform,
                run_storage_id,
                is_known_ci_env,
                reporting_date,
                client_id,
                code_location_hash,
                instance_priority,
                instance_type
            from events_model
            inner join {{ ref('instance_type_priority') }} using (instance_type)
        ```
      ''',
      'group_name': 'model_telemetry',
      'key': 'sandbox//telemetry_events',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'incremental',
        'dagster/table_name': 'sandbox.telemetry_events',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.telemetry_events',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/TELEMETRY_EVENTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Mapping of code_location_hash to code location example names
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//telemetry_example_map',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='code_location_hash',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='code_location_name',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.telemetry_example_map',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.telemetry_example_map',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        A daily date table starting at the beginning of 2020 and looking forward 15 years
        
        #### Raw SQL:
        ```sql
            {{ config( materialized='table') }}
        
            with date_spine as (
        
              {{ dbt_utils.date_spine(
                start_date="cast('2020-01-01' as date)",
                  datepart="day",
                  end_date="dateadd(year, 15, current_date)"
                 )
              }}
        
            ),
        
            calculated as (
        
                select
                    date_day,
                    date_day as ds,
                    date_day - interval '1 day' as prior_date_day,
                    date_day + interval '1 day' as next_date_day,
        
                    dayname(date_day) as day_name,
        
        
                    date_part('month', date_day) as month_actual,
                    date_part(quarter, date_day) as quarter_actual,
                    date_part('year', date_day) as year_actual,
        
                    date_part(dayofweek, date_day) + 1 as day_of_week,
                    case
                        when dayname(date_day) = 'Sun' then date_day
                        else dateadd('day', -1, date_trunc('week', date_day))
                    end as first_day_of_week,
        
                    date_part('day', date_day) as day_of_month,
        
                    row_number()
                        over (partition by year_actual, quarter_actual order by date_day)
                        as day_of_quarter,
                    row_number() over (partition by year_actual order by date_day) as day_of_year,
        
                    to_char(date_day, 'mmmm') as month_name,
        
                    trunc(date_day, 'month') as first_day_of_month,
                    last_value(date_day)
                        over (partition by year_actual, month_actual order by date_day)
                        as last_day_of_month,
        
                    first_value(date_day)
                        over (partition by year_actual order by date_day)
                        as first_day_of_year,
                    last_value(date_day) over (partition by year_actual order by date_day) as last_day_of_year,
        
                    first_value(date_day)
                        over (partition by year_actual, quarter_actual order by date_day)
                        as first_day_of_quarter,
                    last_value(date_day)
                        over (partition by year_actual, quarter_actual order by date_day)
                        as last_day_of_quarter,
        
        
                    last_value(date_day)
                        over (partition by first_day_of_week order by date_day)
                        as last_day_of_week,
        
                    (year_actual || '-q' || extract(quarter from date_day)) as quarter_name,
        
                    IFF(
                        date_day >= '2025-01-01' AND MONTH(date_day) = 1,
                        YEAR(date_day) - 1,
                        YEAR(date_day)
                    ) AS fiscal_year,
                    CASE
                        WHEN date_day >= '2025-01-01' THEN
                            CASE
                                WHEN MONTH(date_day) IN (2,3,4) THEN 1
                                WHEN MONTH(date_day) IN (5,6,7) THEN 2
                                WHEN MONTH(date_day) IN (8,9,10) THEN 3
                                ELSE 4
                            END
                        ELSE quarter_actual
                    END AS fiscal_quarter,
                    (fiscal_year || '-q' || fiscal_quarter) as fiscal_quarter_name,
                    row_number()
                        over (partition by fiscal_year, fiscal_quarter order by date_day)
                        as day_of_fiscal_quarter
        
                from date_spine
        
            ),
        
            final as (
        
                select
                    ds,
                    date_day,
                    prior_date_day,
                    next_date_day,
                    day_name,
                    month_actual,
                    year_actual,
                    quarter_actual,
                    fiscal_year,
                    fiscal_quarter,
                    day_of_week,
                    first_day_of_week,
                    case when date_day = first_day_of_week then true
                        else false
                        end as is_first_day_of_week,
                    case when day_of_week = 7 then true
                        else false
                        end as is_last_day_of_week,
                    day_of_month,
                    day_of_quarter,
                    day_of_year,
                    month_name,
                    first_day_of_month,
                    case 
                        when date_day = first_day_of_month then true 
                        else false
                        end as is_first_day_of_month,
                    last_day_of_month,
                    case 
                        when date_day = last_day_of_month then true 
                        else false
                        end as is_last_day_of_month,
                    first_day_of_year,
                    last_day_of_year,
                    first_day_of_quarter,
                    last_day_of_quarter,
                    last_day_of_week,
                    quarter_name,
                    fiscal_quarter_name,
                    day_of_fiscal_quarter
                from calculated
        
            )
        
            select * from final
        ```
      ''',
      'group_name': 'utils',
      'key': 'sandbox//time_spine',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.time_spine',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.time_spine',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/TIME_SPINE',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        dbt seed title_mappings
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//title_mappings',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/table_name': 'sandbox.title_mappings',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.title_mappings',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'base_step_metrics',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_runs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        This is the base daily model for usage metrics that is used for billing
        and consumption related reporting. For each day, each organization,
        and each agent_type metrics on materialized assets, run/step counts
        and durations are calculated
        
        
        #### Raw SQL:
        ```sql
            {{ config(snowflake_warehouse="L_WAREHOUSE") }}
            with runs as (
                select * from {{ ref('fct_runs') }}
            ),
        
            base as (
                select * from {{ ref('base_step_metrics') }}
            ),
        
            base_agg as (
                select
        
                    organization_id,
                    deployment_id,
                    run_id,
                    max(run_ended_at) as ended_at,
                    sum(materializations) as materializations,
                    sum(step_duration_mins) as step_duration_mins,
                    sum(steps) as steps,
                    sum(asset_check_only_steps) as asset_check_only_steps,
                    sum(asset_checks) as asset_checks,
                    sum(freshness_checks) as freshness_checks,
                    sum(anomaly_detection_checks) as anomaly_detection_checks,
                    sum(standard_credits) as standard_credits,
                    sum(high_velocity_credits) as high_velocity_credits
        
                from base
                group by all
            ),
        
            run_metrics as (
                select
        
                    organization_id,
                    run_id,
                    agent_type,
                    ended_at,
                    sum(duration_mins) as run_duration_mins,
                    count(*) as runs
        
                from runs
                group by all
            ),
        
            combined as (
        
                select
        
                    date_trunc(
                        'day',
                        coalesce(run_metrics.ended_at, base_agg.ended_at)
                    ) as ds,
                    base_agg.organization_id,
                    base_agg.run_id,
                    {{ dbt_utils.generate_surrogate_key(["ds", "organization_id", "run_id"]) }}
                        as surrogate_key,
                    run_metrics.agent_type,
                    coalesce(sum(base_agg.materializations), 0) as materializations,
                    coalesce(sum(base_agg.step_duration_mins), 0) as step_duration_mins,
                    coalesce(sum(base_agg.steps), 0) as steps,
                    coalesce(sum(base_agg.asset_checks), 0) as asset_checks,
                    coalesce(sum(base_agg.asset_check_only_steps), 0) as asset_check_only_steps,
                    coalesce(sum(base_agg.freshness_checks), 0) as freshness_checks,
                    coalesce(sum(base_agg.anomaly_detection_checks), 0) as anomaly_detection_checks,
                    coalesce(sum(run_metrics.run_duration_mins), 0) as run_duration_mins,
                    coalesce(sum(run_metrics.runs), 0) as runs,
        
                    /* Metric Definitions for usage/reporting */
                    steps - asset_check_only_steps as steps_credits,
        
                    coalesce(sum(base_agg.standard_credits), 0) as standard_credits,
                    coalesce(sum(base_agg.high_velocity_credits), 0) as high_velocity_credits
        
                from base_agg
                left join run_metrics using (organization_id, run_id)
                where ds is not null
                group by all
        
            )
        
            select * from combined
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//usage_metrics_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the record',
              name='surrogate_key',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The date of the usage metrics record',
              name='ds',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The unique identifier of the organization',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The type of agent, i.e. HYBRID or SERVERLESS',
              name='agent_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The number of ASSET_MATERIALIZATION events',
              name='materializations',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='''
                The total duration of steps in minutes, defined as the
                total step execution time (STEP_START -> STEP_SUCCESS/FAILURE)
                plus resource init time (RESOURCE INIT START -> SUCCESS/FAILURE)
                minus the RETRY_DURATION time
  
              ''',
              name='step_duration_mins',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The number of unique steps',
              name='steps',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The total duration of runs in minutes',
              name='run_duration_mins',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The number of runs',
              name='runs',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='steps_credits',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.usage_metrics_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.usage_metrics_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/USAGE_METRICS_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_runs',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'usage_metrics_daily',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        This is an aggregated version of `usage_metrics_daily` that aggregates values
        for each job and day. It is copied to postgres and used for the Usage page in
        the Dagster Cloud UI.
        
        
        #### Raw SQL:
        ```sql
            {{ config(snowflake_warehouse="L_WAREHOUSE") }}
        
            with runs as (
                select * from {{ ref('fct_runs') }}
            ),
        
            usage_metrics_daily as (
                select * from {{ ref('usage_metrics_daily') }}
            )
        
            select
                organization_id,
                runs.agent_type,
                runs.job_name,
                coalesce(runs.repository_name, '') as repository_name,
                date_trunc('day', runs.ended_at) as job_day,
                {{ dbt_utils.generate_surrogate_key([
                    "organization_id", 
                    "runs.agent_type", 
                    "job_name", 
                    "repository_name", 
                    "job_day"]) }} as surrogate_key,
                sum(usage_metrics_daily.materializations) as materializations,
                sum(usage_metrics_daily.step_duration_mins) as step_duration_mins,
                sum(usage_metrics_daily.steps) as steps,
                sum(usage_metrics_daily.run_duration_mins) as run_duration_mins,
                sum(usage_metrics_daily.runs) as runs,
                sum(usage_metrics_daily.steps_credits) as steps_credits,
                sum(usage_metrics_daily.standard_credits) as standard_credits,
                sum(usage_metrics_daily.high_velocity_credits) as high_velocity_credits
            from runs
            inner join usage_metrics_daily using (organization_id, run_id)
            group by all
        ```
      ''',
      'group_name': 'product',
      'key': 'sandbox//usage_metrics_daily_jobs_aggregated',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the record',
              name='surrogate_key',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The unique identifier of the organization',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The type of agent, i.e. HYBRID or SERVERLESS',
              name='agent_type',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The date of the usage metrics record',
              name='job_day',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The job name of the usage metrics record',
              name='job_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The repository that contains the job_name',
              name='repository_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The number of ASSET_MATERIALIZATION events for the job and day',
              name='materializations',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The total duration of steps in minutes for the job and day',
              name='step_duration_mins',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The number of unique steps for the job and day',
              name='steps',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The total duration of runs in minutes for the job and day',
              name='run_duration_mins',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The number of runs for the job and day',
              name='runs',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='The number of steps that are charged a credit, for the job and day',
              name='steps_credits',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.usage_metrics_daily_jobs_aggregated',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.usage_metrics_daily_jobs_aggregated',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/USAGE_METRICS_DAILY_JOBS_AGGREGATED',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Daily user activity metrics
        
        #### Raw SQL:
        ```sql
            select
                date(timestamp) as date,
                user_id,
                count_if(event_text = 'runLaunch') as runs_launched_count,
                count_if(event_text = 'searchOpen') as search_opens_count,
                count_if(event_text = 'signIn') as sign_ins_count,
                count_if(event_text = 'signOut') as sign_outs_count,
                count_if(event_text = 'viewAssetPlots') as asset_plot_views_count,
                count_if(event_text = 'viewAssetInsights') as asset_insights_views_count
            from {{ ref('segment_cloud_tracks') }}
            group by all
            order by date desc, runs_launched_count desc
        ```
      ''',
      'group_name': 'metrics_segment',
      'key': 'sandbox//user_activity_daily',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.user_activity_daily',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.user_activity_daily',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/USER_ACTIVITY_DAILY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_stripe__subscriptions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'web_attributed_conversions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        User web attribution data. This data is sent to Hubspot.
        
        
        #### Raw SQL:
        ```sql
            select
                email,
                organization_id,
                attribution_category as trial_source,
                s.trial_start as trial_started_at,
                s.trial_end as trial_ended_at
            from {{ ref('web_attributed_conversions') }}
            inner join {{ ref('dim_organizations') }} as o using (organization_id)
            left join {{ ref('stg_stripe__subscriptions') }} as s on o.stripe_customer_id = s.customer_id
            qualify row_number() over (partition by email order by org_created_at) = 1
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//user_attribution',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.user_attribution',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.user_attribution',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/USER_ATTRIBUTION',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'education_web_attributed_conversions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        User web attribution data for Dagster University signups
        
        #### Raw SQL:
        ```sql
            select
                education_users.user_id,
                education_users.first_name,
                education_users.last_name,
                education_users.email,
                education_users.created_at as signup_at,
                'Daggy U' as lead_source,
                signup_first_session_id,
                signup_first_session_started_at,
                signup_first_referrer_host,
                signup_first_referrer_medium,
                signup_first_path,
                signup_first_campaign_source,
                signup_first_campaign_medium,
                signup_first_campaign_name,
                signup_first_campaign_content,
                signup_first_utm_term,
                signup_first_reddit_cid,
                signup_first_gclid,
                signup_first_attribution_category,
                signup_last_session_id,
                signup_last_session_started_at,
                signup_last_referrer_host,
                signup_last_referrer_medium,
                signup_last_path,
                signup_last_campaign_source,
                signup_last_campaign_medium,
                signup_last_campaign_name,
                signup_last_campaign_content,
                signup_last_utm_term,
                signup_last_reddit_cid,
                signup_last_gclid,
                signup_last_attribution_category,
                referrer_host,
                session_started_at,
                referrer_medium,
                path,
                campaign_source,
                campaign_medium,
                campaign_name,
                campaign_content,
                utm_term,
                reddit_cid,
                gclid,
                attribution_category
            from {{ ref('education_users') }}
            left join {{ ref('education_web_attributed_conversions') }}
                on education_users.user_id = education_web_attributed_conversions.user_id
        ```
      ''',
      'group_name': 'hightouch',
      'key': 'sandbox//user_attribution_dagster_u',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.user_attribution_dagster_u',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.user_attribution_dagster_u',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/USER_ATTRIBUTION_DAGSTER_U',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_session_tokens',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'cloud_product_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_tracks',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Dagster User Organizations Core Table. This table contains one row for each user/organization pair, along with calculated values related to organizations such as their last login date.
        
        #### Raw SQL:
        ```sql
            with session_tokens as (
                select * from {{ ref('cloud_product_session_tokens') }}
            ),
        
            orgs as (
                select *
                from {{ ref('cloud_product_organizations') }}
            ),
        
            users as (
                select * from {{ ref('cloud_product_users') }}
            ),
        
            user_orgs as (
                select * from {{ ref('cloud_product_user_organizations') }}
            ),
        
            segment_tracks as (
                select
                    user_id,
                    email,
                    timestamp
                from {{ ref('segment_cloud_tracks') }} s
            ),
        
            user_sessions as (
        
                select
        
                    user_id,
                    organization_id,
                    max(created_at) as last_user_login
        
                from session_tokens
                group by all
            ),
        
            user_activity as (
                select
        
                    users.user_id,
                    max(timestamp) as last_user_activity
        
                from segment_tracks
                    left join users on segment_tracks.user_id = users.user_id or segment_tracks.email = users.email
                group by all
            ),
        
            final as (
        
                select
                    {{ dbt_utils.generate_surrogate_key([
                        'orgs.organization_id',
                        'user_orgs.user_id'
                    ]) }} as unique_key,
                    orgs.created_at as organization_created_at,
                    orgs.organization_id,
                    user_orgs.user_id,
                    min(user_orgs.created_at) as relationship_created_at,
                    user_orgs.role,
                    users.email,
                    users.is_elementl_user,
                    users.created_at as user_created_at,
                    user_sessions.last_user_login,
                    user_activity.last_user_activity,
                    max(is_activated) as is_activated
                from orgs
                left join user_orgs using (organization_id)
                left join users using (user_id)
                left join user_sessions using (user_id, organization_id)
                left join user_activity using (user_id)
                where user_orgs.created_at is not null
                group by all
        
            )
        
            select
                *,
                row_number() over (partition by organization_id order by relationship_created_at asc) as organization_user_rank,
                row_number() over (partition by user_id order by relationship_created_at asc) as user_organization_rank
            from final
        ```
      ''',
      'group_name': 'core',
      'key': 'sandbox//user_organizations',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='unique_key',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.user_organizations',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.user_organizations',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/USER_ORGANIZATIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_organizations',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_cloud_users',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'segment_web_sessions',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Final attributed conversion model on first touch sessions
        
        #### Raw SQL:
        ```sql
            with user_organizations as (
                select * from {{ ref('user_organizations') }}
            ),
        
            organizations as (
                select * from {{ ref('dim_organizations') }}
            ),
        
            users as (
                select * from {{ ref('dim_users') }}
            ),
        
            sessions as (
                select * from {{ ref('segment_web_sessions') }}
            ),
        
            user_stitching as (
                select * from {{ ref('segment_cloud_users') }}
            ),
        
            user_sessions as (
                select
        
                    sessions.*,
                    coalesce(user_stitching.user_id, sessions.anonymous_id) as blended_user_id
                
                from sessions
                left join user_stitching using (anonymous_id)
            ),
        
            workspace_creating_user as (
                select
        
                    organization_id,
                    user_id::string as user_id,
                    organization_created_at,
                    user_organization_rank
        
                from user_organizations
                where organization_user_rank = 1 -- first user in the organization
            ),
        
            session_cats as (
                select
        
                    blended_user_id,
                    session_id,
                    session_started_at,
                    first_referrer_host as referrer_host,
                    first_referrer_medium as referrer_medium,
                    first_path as path,
                    first_campaign_source as campaign_source,
                    first_campaign_medium as campaign_medium,
                    first_campaign_name as campaign_name,
                    first_campaign_content as campaign_content,
                    first_utm_term as utm_term,
                    first_reddit_cid as reddit_cid,
                    first_gclid as gclid,
                    first_attribution_category as attribution_category
        
                from user_sessions
            ),
        
            final as (
                select distinct
        
                    users.user_id,
                    users.user_name,
                    users.email,
                    users.user_title,
                    users.experience,
                    users.created_at as user_created_at,
                    organizations.organization_id,
                    organizations.organization_name,
                    organizations.org_created_at,
                    organizations.is_active,
                    organizations.plan_type,
                    organizations.status as organisation_status,
                    organizations.last_run_at,
        
                    first_value(signup_session_cats.session_id)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_session_id,
                    first_value(signup_session_cats.session_started_at)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_session_started_at,
                    first_value(referrer_host)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_referrer_host,
                    first_value(referrer_medium)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_referrer_medium,
                    first_value(path)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_path,
                    first_value(campaign_source)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_source,
                    first_value(campaign_medium)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_medium,
                    first_value(campaign_name)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_name,
                    first_value(campaign_content)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_campaign_content,
                    first_value(utm_term)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_utm_term,
                    first_value(reddit_cid)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_reddit_cid,
                    first_value(gclid)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_gclid,
                    first_value(signup_session_cats.attribution_category)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_first_attribution_category,
        
                    last_value(signup_session_cats.session_id)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_session_id,
                    last_value(signup_session_cats.session_started_at)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_session_started_at,
                    last_value(referrer_host)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_referrer_host,
                    last_value(referrer_medium)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_referrer_medium,
                    last_value(path)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_path,
                    last_value(campaign_source)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_source,
                    last_value(campaign_medium)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_medium,
                    last_value(campaign_name)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_name,
                    last_value(campaign_content)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_campaign_content,
                    last_value(utm_term)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_utm_term,
                    last_value(reddit_cid)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_reddit_cid,
                    last_value(gclid)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_gclid,
                    last_value(signup_session_cats.attribution_category)
                    ignore nulls over (
                        partition by users.user_id
                        order by signup_session_cats.session_started_at
                    ) as signup_last_attribution_category,
                    coalesce(signup_first_referrer_host, signup_last_referrer_host) as referrer_host,
        
                    coalesce(signup_first_session_started_at, signup_last_session_started_at)
                        as session_started_at,
                    coalesce(signup_first_referrer_medium, signup_last_referrer_medium) as referrer_medium,
                    coalesce(signup_first_path, signup_last_path) as path,
                    coalesce(signup_first_campaign_source, signup_last_campaign_source) as campaign_source,
                    coalesce(signup_first_campaign_medium, signup_last_campaign_medium) as campaign_medium,
                    coalesce(signup_first_campaign_name, signup_last_campaign_name) as campaign_name,
                    coalesce(signup_first_campaign_content, signup_last_campaign_content) as campaign_content,
                    coalesce(signup_first_utm_term, signup_last_utm_term) as utm_term,
                    coalesce(signup_first_reddit_cid, signup_last_reddit_cid) as reddit_cid,
                    coalesce(signup_first_gclid, signup_last_gclid) as gclid,
                    coalesce(signup_first_attribution_category, signup_last_attribution_category)
                        as attribution_category
                from workspace_creating_user
                inner join organizations using (organization_id)
                inner join users using (user_id)
                inner join session_cats as signup_session_cats
                    on
                        users.user_id = signup_session_cats.blended_user_id
                        and workspace_creating_user.user_organization_rank = 1 -- this is the first organization a user is part of
                        and users.created_at >= signup_session_cats.session_started_at
                        and datediff(
                            'days',
                            signup_session_cats.session_started_at,
                            users.created_at
                        )
                        <= {{ var('attribution_lookback_days') }}
                where not organizations.is_internal
            )
        
            select * from final
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//web_attributed_conversions',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='organization_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.web_attributed_conversions',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.web_attributed_conversions',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/WEB_ATTRIBUTED_CONVERSIONS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_segment_cloud_page_visits',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Segment web page visit data from the webapp overlaid with basic Salesforce Contact and Account Info where possible.
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('fct_segment_cloud_page_visits') }}
            ),
        
            contacts as (
        
                select * from {{ ref('dim_contacts') }}
            ),
        
            deduplicated_contacts as (
        
                select * from contacts
                qualify row_number() over (partition by email order by last_modified_time desc) = 1
            ),
        
            final as (
        
                select 
                    source.event_id, 
                    source.anonymous_id, 
                    source.timestamp, 
                    source.email, 
                    source.user_id,
                    source.path, 
                    source.title, 
                    source.url, 
                    source.referrer_host_unparsed, 
                    source.referrer_host, 
                    source.referrer, 
                    source.search, 
                    source.search_params, 
                    source.campaign_source, 
                    source.campaign_medium, 
                    source.campaign_name, 
                    source.campaign_content, 
                    source.utm_term, 
                    source.reddit_cid, 
                    source.gclid,
                    dc.name as contact_name,
                    dc.account_id,
                    dc.account_name,
                    dc.hubspot_company_id,
                from source
                left join deduplicated_contacts dc on source.email = dc.email
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business_activity_logs',
      'key': 'sandbox//website_visits_cloud',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the website visit event',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Anonymous identifier for the visitor',
              name='anonymous_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date and time when the visit occurred',
              name='timestamp',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Email of the visitor if available',
              name='email',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='User identifier if the visitor is logged in',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Path of the visited page',
              name='path',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Title of the visited page',
              name='title',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full URL of the visited page',
              name='url',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unparsed referrer host information',
              name='referrer_host_unparsed',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Host domain that referred the visit',
              name='referrer_host',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full referrer URL',
              name='referrer',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Search query used to find the page',
              name='search',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Parameters used in the search',
              name='search_params',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the marketing campaign',
              name='campaign_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Medium of the marketing campaign',
              name='campaign_medium',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the marketing campaign',
              name='campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Content identifier of the marketing campaign',
              name='campaign_content',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='UTM term parameter from the URL',
              name='utm_term',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Reddit campaign identifier',
              name='reddit_cid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Google click identifier',
              name='gclid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the contact if matched with Salesforce',
              name='contact_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce account identifier if matched',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the Salesforce account if matched',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Hubspot company identifier if matched',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.website_visits_cloud',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.website_visits_cloud',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/WEBSITE_VISITS_CLOUD',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_segment_dagster_u_page_visits',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Segment web page visit data from Dagster University overlaid with basic Salesforce Contact and Account Info where possible.
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('fct_segment_dagster_u_page_visits') }}
            ),
        
            contacts as (
        
                select * from {{ ref('dim_contacts') }}
            ),
        
            deduplicated_contacts as (
        
                select * from contacts
                qualify row_number() over (partition by email order by last_modified_time desc) = 1
            ),
        
            final as (
        
                select 
                    source.event_id, 
                    source.anonymous_id, 
                    source.timestamp, 
                    source.email, 
                    source.user_id,
                    source.path, 
                    source.title, 
                    source.url, 
                    source.referrer_host_unparsed, 
                    source.referrer_host, 
                    source.referrer, 
                    source.search, 
                    source.search_params, 
                    source.campaign_source, 
                    source.campaign_medium, 
                    source.campaign_name, 
                    source.campaign_content, 
                    source.utm_term, 
                    source.reddit_cid, 
                    source.gclid,
                    dc.name as contact_name,
                    dc.account_id,
                    dc.account_name,
                    dc.hubspot_company_id,
                from source
                left join deduplicated_contacts dc on source.email = dc.email
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business_activity_logs',
      'key': 'sandbox//website_visits_dagster_university',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the website visit event',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Anonymous identifier for the visitor',
              name='anonymous_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date and time when the visit occurred',
              name='timestamp',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Email of the visitor if available',
              name='email',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='User identifier if the visitor is logged in',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Path of the visited page',
              name='path',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Title of the visited page',
              name='title',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full URL of the visited page',
              name='url',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unparsed referrer host information',
              name='referrer_host_unparsed',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Host domain that referred the visit',
              name='referrer_host',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full referrer URL',
              name='referrer',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Search query used to find the page',
              name='search',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Parameters used in the search',
              name='search_params',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the marketing campaign',
              name='campaign_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Medium of the marketing campaign',
              name='campaign_medium',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the marketing campaign',
              name='campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Content identifier of the marketing campaign',
              name='campaign_content',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='UTM term parameter from the URL',
              name='utm_term',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Reddit campaign identifier',
              name='reddit_cid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Google click identifier',
              name='gclid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the contact if matched with Salesforce',
              name='contact_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce account identifier if matched',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the Salesforce account if matched',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Hubspot company identifier if matched',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.website_visits_dagster_university',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.website_visits_dagster_university',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/WEBSITE_VISITS_DAGSTER_UNIVERSITY',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_segment_docs_page_visits',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Segment web page visit data from the Docs website overlaid with basic Salesforce Contact and Account Info where possible.
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('fct_segment_docs_page_visits') }}
            ),
        
            contacts as (
        
                select * from {{ ref('dim_contacts') }}
            ),
        
            deduplicated_contacts as (
        
                select * from contacts
                qualify row_number() over (partition by email order by last_modified_time desc) = 1
            ),
        
            final as (
        
                select 
                    source.event_id, 
                    source.anonymous_id, 
                    source.timestamp, 
                    source.email, 
                    source.user_id,
                    source.path, 
                    source.title, 
                    source.url, 
                    source.referrer_host_unparsed, 
                    source.referrer_host, 
                    source.referrer, 
                    source.search, 
                    source.search_params, 
                    source.campaign_source, 
                    source.campaign_medium, 
                    source.campaign_name, 
                    source.campaign_content, 
                    source.utm_term, 
                    source.reddit_cid, 
                    source.gclid,
                    dc.name as contact_name,
                    dc.account_id,
                    dc.account_name,
                    dc.hubspot_company_id,
                from source
                left join deduplicated_contacts dc on source.email = dc.email
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business_activity_logs',
      'key': 'sandbox//website_visits_docs',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the website visit event',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Anonymous identifier for the visitor',
              name='anonymous_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date and time when the visit occurred',
              name='timestamp',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Email of the visitor if available',
              name='email',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='User identifier if the visitor is logged in',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Path of the visited page',
              name='path',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Title of the visited page',
              name='title',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full URL of the visited page',
              name='url',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unparsed referrer host information',
              name='referrer_host_unparsed',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Host domain that referred the visit',
              name='referrer_host',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full referrer URL',
              name='referrer',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Search query used to find the page',
              name='search',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Parameters used in the search',
              name='search_params',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the marketing campaign',
              name='campaign_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Medium of the marketing campaign',
              name='campaign_medium',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the marketing campaign',
              name='campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Content identifier of the marketing campaign',
              name='campaign_content',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='UTM term parameter from the URL',
              name='utm_term',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Reddit campaign identifier',
              name='reddit_cid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Google click identifier',
              name='gclid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the contact if matched with Salesforce',
              name='contact_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce account identifier if matched',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the Salesforce account if matched',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Hubspot company identifier if matched',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.website_visits_docs',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.website_visits_docs',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/WEBSITE_VISITS_DOCS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'dim_contacts',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'fct_segment_web_page_visits',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        Segment web page visit data from the marketing site overlaid with basic Salesforce Contact and Account Info where possible.
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('fct_segment_web_page_visits') }}
            ),
        
            contacts as (
        
                select * from {{ ref('dim_contacts') }}
            ),
        
            deduplicated_contacts as (
        
                select * from contacts
                qualify row_number() over (partition by email order by last_modified_time desc) = 1
            ),
        
            final as (
        
                select 
                    source.event_id, 
                    source.anonymous_id, 
                    source.timestamp, 
                    source.email, 
                    source.user_id,
                    source.path, 
                    source.title, 
                    source.url, 
                    source.referrer_host_unparsed, 
                    source.referrer_host, 
                    source.referrer, 
                    source.search, 
                    source.search_params, 
                    source.campaign_source, 
                    source.campaign_medium, 
                    source.campaign_name, 
                    source.campaign_content, 
                    source.utm_term, 
                    source.reddit_cid, 
                    source.gclid,
                    dc.name as contact_name,
                    dc.account_id,
                    dc.account_name,
                    dc.hubspot_company_id,
                from source
                left join deduplicated_contacts dc on source.email = dc.email
            )
        
            select * from final
        ```
      ''',
      'group_name': 'business_activity_logs',
      'key': 'sandbox//website_visits_marketing',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unique identifier for the website visit event',
              name='event_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Anonymous identifier for the visitor',
              name='anonymous_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Date and time when the visit occurred',
              name='timestamp',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Email of the visitor if available',
              name='email',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='User identifier if the visitor is logged in',
              name='user_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Path of the visited page',
              name='path',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Title of the visited page',
              name='title',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full URL of the visited page',
              name='url',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Unparsed referrer host information',
              name='referrer_host_unparsed',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Host domain that referred the visit',
              name='referrer_host',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Full referrer URL',
              name='referrer',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Search query used to find the page',
              name='search',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Parameters used in the search',
              name='search_params',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Source of the marketing campaign',
              name='campaign_source',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Medium of the marketing campaign',
              name='campaign_medium',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the marketing campaign',
              name='campaign_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Content identifier of the marketing campaign',
              name='campaign_content',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='UTM term parameter from the URL',
              name='utm_term',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Reddit campaign identifier',
              name='reddit_cid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Google click identifier',
              name='gclid',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the contact if matched with Salesforce',
              name='contact_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Salesforce account identifier if matched',
              name='account_id',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Name of the Salesforce account if matched',
              name='account_name',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='Hubspot company identifier if matched',
              name='hubspot_company_id',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.website_visits_marketing',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.website_visits_marketing',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/WEBSITE_VISITS_MARKETING',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        dbt seed youtube_device_types
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//youtube_device_types',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='device_type_code',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='device_type',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.youtube_device_types',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.youtube_device_types',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        mapping from youtube os to thier names
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//youtube_operating_system',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='os_code',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='os_name',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.youtube_operating_system',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.youtube_operating_system',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        mapping from youtube playback locations to thier names
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//youtube_playback_location_type',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='location_code',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='location_name',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.youtube_playback_location_type',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.youtube_playback_location_type',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_youtube__channel',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_youtube__playlist',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_youtube__playlist_combined',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_youtube__video',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_device_types',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_operating_system',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_playback_location_type',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_traffic_codes',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All youtube playlist history
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ref ('stg_youtube__playlist_combined') }}
        
            ),
        
            final as (
        
                select
                    source.date::date as date,
                    channel.channel_name,
                    video.video_title as video,
                    playlist.playlist_title as playlist,
                    source.num_views,
                    source.country_code,
                    source.live_or_on_demand,
                    source.subscribed_status,
                    traffic_codes.traffic_channel_name as traffic_channel,
                    device_types.device_type as device,
                    location_type.location_name as location,
                    os.os_name as operating_system,
                    source.watch_time_minutes,
                    source.average_view_duration_seconds,
                    source.playlist_starts,
                    source.playlist_saves_added,
                    source.playlist_saves_removed
        
            -- maybe do a surragate key 
                from source
                left join {{ ref('stg_youtube__channel')}} channel
                    on channel.id = source.channel_id
                left Join {{ ref('stg_youtube__video')}} video
                    on video.id = source.video_id
                left join {{ ref('stg_youtube__playlist')}} as playlist
                    on playlist.id = source.playlist_id 
                left join {{ ref('youtube_traffic_codes')}} traffic_codes
                    on traffic_codes.video_title = source.traffic_source_type
                left join {{ ref('youtube_device_types')}} device_types
                    on device_types.device_type_code = source.device_type
                left join {{ ref('youtube_playback_location_type')}} location_type
                    on location_type.location_code = source.playback_location_type
                left join {{ ref('youtube_operating_system')}} os
                    on os.os_code = source.operating_system
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_youtube',
      'key': 'sandbox//youtube_playlists',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.youtube_playlists',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.youtube_playlists',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/YOUTUBE_PLAYLISTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': '''
        Mapping from youtube traffic codes to thier names
        
        #### Raw SQL:
        ```sql
        
        ```
      ''',
      'group_name': 'public',
      'key': 'sandbox//youtube_traffic_codes',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'seed',
        'dagster/column_schema': TableSchema(
          columns=list([
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='traffic_values',
              tags=dict({
              }),
              type='?',
            ),
            TableColumn(
              constraints=TableColumnConstraints(
                nullable=True,
                other=list([
                ]),
                unique=False,
              ),
              description='',
              name='traffic_channel_name',
              tags=dict({
              }),
              type='?',
            ),
          ]),
          constraints=TableConstraints(
            other=list([
            ]),
          ),
        ),
        'dagster/table_name': 'sandbox.youtube_traffic_codes',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'seed.dagster_open_platform.youtube_traffic_codes',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'seed': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_videos',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        shows views for each video by day and traffic channel
        
        #### Raw SQL:
        ```sql
            SELECT 
            date, 
            video_title, 
            traffic_channel,
            sum(num_views) as total_views, 
            sum(watch_time_minutes) as total_watch_time_minutes, 
            avg(average_view_duration_percentage) as average_view_duration_pct, 
            sum(num_views_red) as total_red_views,
            sum(red_watch_time_minutes) as total_red_watch_time_minutes
            from {{ ref('youtube_videos')}}
            GROUP BY
            date, 
            video_title, 
            traffic_channel
        ```
      ''',
      'group_name': 'mart_marketing',
      'key': 'sandbox//youtube_video_views_overtime',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.youtube_video_views_overtime',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.youtube_video_views_overtime',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/YOUTUBE_VIDEO_VIEWS_OVERTIME',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_youtube__channel',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_youtube__channel_combined',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_youtube__video',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_device_types',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_operating_system',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_playback_location_type',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'youtube_traffic_codes',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All youtube video history
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ ref('stg_youtube__channel_combined') }}
        
            ),
        
            final as (
        
                select
                    source.date::date as date,
                    channel.channel_name,
                    video.video_title,
                    source.num_views,
                    source.country_code,
                    source.live_or_on_demand,
                    source.subscribed_status,
                    traffic_codes.traffic_channel_name as traffic_channel,
                    device_types.device_type as device,
                    location_type.location_name as location,
                    os.os_name as operating_system,
                    source.watch_time_minutes,
                    source.average_view_duration_seconds,
                    source.average_view_duration_percentage,
                    source.num_views_red,
                    source.red_watch_time_minutes
        
                from source
                left join {{ ref('stg_youtube__channel')}} channel
                    on channel.id = source.channel_id
                left Join {{ ref('stg_youtube__video')}} video
                    on video.id = source.video_id
                left join {{ ref('youtube_traffic_codes')}} traffic_codes
                    on traffic_codes.video_title = source.traffic_source_type
                left join {{ ref('youtube_device_types')}} device_types
                    on device_types.device_type_code = source.device_type
                left join {{ ref('youtube_playback_location_type')}} location_type
                    on location_type.location_code = source.playback_location_type
                left join {{ ref('youtube_operating_system')}} os
                    on os.os_code = source.operating_system
            )
        
            select * from final
        ```
      ''',
      'group_name': 'model_youtube',
      'key': 'sandbox//youtube_videos',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.youtube_videos',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.youtube_videos',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/YOUTUBE_VIDEOS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_zoom__webinar_absentee',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_zoom__webinar_participant',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_zoom__webinar_registrant',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All registrants with flags as to whether they attended or not
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ref ('stg_zoom__webinar_registrant') }}
            ),
        
            absentees as (
        
                select * from {{ref ('stg_zoom__webinar_absentee') }}
            ),
        
            participants as (
        
                select * from {{ref ('stg_zoom__webinar_participant') }}
            ),
        
            joined as (
        
                select 
                    source.webinar_id,
                    source.user_id as registrant_id,
                    participants.name,
                    source.email,
                    source.create_time,
                    source.join_url,
                    absentees.registrant_id as absentee_registrant_id,
                    participants.registrant_id as participant_registrant_id,
                    min(participants.join_time) as initial_join_time,
                    sum(participants.duration) as total_duration,
                from source
                left join absentees on source.user_id = absentees.registrant_id and source.webinar_id = absentees.webinar_id
                left join participants on source.user_id = participants.registrant_id and source.webinar_id = participants.webinar_id
                group by all
            ),
        
            choose_last as (
        
            --- in all scenarios with multiple registrant ids showing up to a webinar it is due to an ai bot joining at the start of the meeting and then the user joining afterwards.
                select * from joined
                qualify row_number() over (partition by registrant_id order by initial_join_time desc) = 1
            )
        
            select * from choose_last
        ```
      ''',
      'group_name': 'model_zoom',
      'key': 'sandbox//zoom_registrants',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.zoom_registrants',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.zoom_registrants',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ZOOM_REGISTRANTS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_zoom__webinar',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        All webinars
        
        #### Raw SQL:
        ```sql
            with source as (
        
                select * from {{ref ('stg_zoom__webinar') }}
            )
        
            select * from source
        ```
      ''',
      'group_name': 'model_zoom',
      'key': 'sandbox//zoom_webinars',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'table',
        'dagster/table_name': 'sandbox.zoom_webinars',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'model.dagster_open_platform.zoom_webinars',
        'url': UrlMetadataValue(
          url='https://app.snowflake.com/ax61354/na94824/#/data/databases/PURINA/schemas//table/ZOOM_WEBINARS',
        ),
      }),
      'owners': list([
        'nickroach@dagsterlabs.com',
        'team:data',
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
        'model': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'arr_by_month',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot arr_by_month_daily_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key="contract_id || '-' || arr_month",
                  strategy='timestamp',
                  updated_at='snapshot_date',
                )
            }}
        
                select
                    convert_timezone('UTC', 'America/Los_Angeles', current_timestamp)::date
                    - interval '1 day' as snapshot_date,
                    current_timestamp as snapshot_at,
                    /*
                        This will generate a new snapshot on the first run of the day
                        in America/Los_Angeles timezone. We subtract 1 day because it
                        represents the ending values of the previous day.
                    */
                    arr.*
                from {{ ref('arr_by_month') }} arr
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/arr_by_month_daily_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.arr_by_month_daily_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.arr_by_month_daily_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__deployments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot deployments_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key='deployment_id',
                  strategy='timestamp',
                  updated_at='snapshot_date',
                )
            }}
        
                select
                    convert_timezone('UTC', 'America/Los_Angeles', current_timestamp)::date
                    - interval '1 day' as snapshot_date,
                    current_timestamp as snapshot_at,
                    *
                from {{ ref('stg_cloud_product__deployments') }}
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/deployments_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.deployments_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.deployments_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__company',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot hubspot_company_daily_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key='id',
                  strategy='timestamp',
                  updated_at='snapshot_date',
                )
            }}
        
                select
                    convert_timezone('UTC', 'America/Los_Angeles', current_timestamp)::date
                    - interval '1 day' as snapshot_date,
                    current_timestamp as snapshot_at,
                    /*
                        This will generate a new snapshot on the first run of the day
                        in America/Los_Angeles timezone. We subtract 1 day because it
                        represents the ending values of the previous day.
                    */
                    c1.*
                from {{ ref('stg_hubspot__company') }} c1
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/hubspot_company_daily_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.hubspot_company_daily_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.hubspot_company_daily_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'abm_contact_intent_scores',
            ),
          ),
          partition_mapping=None,
        ),
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_hubspot__contacts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot hubspot_contact_daily_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key='contact_id',
                  strategy='timestamp',
                  updated_at='snapshot_date',
                )
            }}
        
                select
                    convert_timezone('UTC', 'America/Los_Angeles', current_timestamp)::date
                    - interval '1 day' as snapshot_date,
                    current_timestamp as snapshot_at,
                    /*
                        This will generate a new snapshot on the first run of the day
                        in America/Los_Angeles timezone. We subtract 1 day because it
                        represents the ending values of the previous day.
                    */
                    contact_id,
                    email,
                    email_domain,
                    first_name,
                    last_name,
                    associatedcompanyid,
                    organization_id,
                    company,
                    lead_source,
                    trial_source,
                    marketing_lead_source,
                    latest_source,
                    lead_source_action,
                    latest_source_drill_level_1,
                    latest_source_drill_level_2,
                    latest_source_date,
                    original_source,
                    original_source_drill_level_1,
                    original_source_drill_level_2,
                    import_source,
                    lifecycle_stage,
                    lifecycle_stage_date,
                    hubspot_score,
                    time_in_mql,
                    lifecycle_stage_mql_date,
                    predictive_scoring_tier,
                    mql_date,
                    is_mql,
                    mql_status,
                    predictive_contact_score,
                    salesforce_contact_id,
                    create_time,
                    create_date,
                    request_type,
                    how_did_you_hear_about_us,
                    message,
                    abm_score
                from {{ ref('stg_hubspot__contacts') }} c1
                    left join {{ ref('abm_contact_intent_scores') }} c2 on c1.contact_id = c2.hubspot_contact_id
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/hubspot_contact_daily_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.hubspot_contact_daily_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.hubspot_contact_daily_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_cloud_product__organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot organizations_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key='organization_id',
                  strategy='timestamp',
                  updated_at='snapshot_date',
                )
            }}
        
                select
                    convert_timezone('UTC', 'America/Los_Angeles', current_timestamp)::date
                    - interval '1 day' as snapshot_date,
                    current_timestamp as snapshot_at,
                   *
                from {{ ref('stg_cloud_product__organizations') }}
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/organizations_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.organizations_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.organizations_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__accounts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot salesforce_accounts_daily_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key='account_id',
                  strategy='timestamp',
                  updated_at='snapshot_date',
                )
            }}
        
                select
                    convert_timezone('UTC', 'America/Los_Angeles', current_timestamp)::date
                    - interval '1 day' as snapshot_date,
                    current_timestamp as snapshot_at,
                    /*
                        This will generate a new snapshot on the first run of the day
                        in America/Los_Angeles timezone. We subtract 1 day because it
                        represents the ending values of the previous day.
                    */
                    *
                from {{ ref('stg_salesforce__accounts') }}
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/salesforce_accounts_daily_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.salesforce_accounts_daily_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.salesforce_accounts_daily_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'stg_salesforce__opportunities',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot salesforce_opportunities_daily_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key='opportunity_id',
                  strategy='timestamp',
                  updated_at='snapshot_date',
                )
            }}
        
                select
                    convert_timezone('UTC', 'America/Los_Angeles', current_timestamp)::date
                    - interval '1 day' as snapshot_date,
                    current_timestamp as snapshot_at,
                    /*
                        This will generate a new snapshot on the first run of the day
                        in America/Los_Angeles timezone. We subtract 1 day because it
                        represents the ending values of the previous day.
                    */
                    *
                from {{ ref('stg_salesforce__opportunities') }}
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/salesforce_opportunities_daily_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.salesforce_opportunities_daily_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.salesforce_opportunities_daily_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'user_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        dbt snapshot user_organizations_snapshot
        
        #### Raw SQL:
        ```sql
        
        
            {{
                config(
                  target_schema='snapshots',
                  unique_key='unique_key',
                  strategy='check',
                  check_cols=['organization_id', 'user_id', 'relationship_created_at'],
                  hard_deletes='invalidate'
                )
            }}
        
                select
                    {{ dbt_utils.generate_surrogate_key([
                        'organization_id',
                        'user_id',
                        'relationship_created_at'
                    ]) }} as unique_key,
                    organization_id,
                    user_id,
                    relationship_created_at
                from {{ ref('user_organizations') }}
        
        
        ```
      ''',
      'group_name': 'snapshots',
      'key': 'sandbox/snapshots/user_organizations_snapshot',
      'metadata': dict({
        'dagster-dbt/materialization_type': 'snapshot',
        'dagster/table_name': 'sandbox.snapshots.user_organizations_snapshot',
        'dagster_dbt/dagster_dbt_translator': CustomDagsterDbtTranslator(
          settings=DagsterDbtTranslatorSettings(enable_asset_checks=True, enable_duplicate_source_asset_keys=False, enable_code_references=True, enable_dbt_selection_by_name=False, enable_source_tests_as_checks=False),
        ),
        'dagster_dbt/unique_id': 'snapshot.dagster_open_platform.user_organizations_snapshot',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/dbt': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'ScoutOS App Runs',
      'group_name': 'scoutos',
      'key': 'scoutos_app_runs',
      'metadata': dict({
      }),
      'owners': list([
        'team:devrel',
      ]),
      'tags': dict({
        'dagster/concurrency_key': 'scoutos_app_runs',
        'dagster/kind/github': '',
        'dagster/kind/scout': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_cloud/accounts',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_cloud/identifies',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_cloud/pages',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_cloud/tracks',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_cloud/trial_start',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_cloud/users',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'default',
      'key': 'segment/dagster_docs/pages',
      'metadata': dict({
        'dagster/auto_created_stub_asset': True,
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_io/hubspot_form_submit',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_io/identifies',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_io/pages',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/certificate_record_downloaded',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/course_landing_page',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/identifies',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/pages',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/quiz_start_page',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/signup',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/tracks',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/users',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'A table containing Segment data loaded using a Snowflake integration.',
      'group_name': 'segment',
      'key': 'segment/dagster_university/viewed_iframe',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/segment': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/alert_policies',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/alerts',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/asset_keys',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/asset_materializations',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/asset_observations',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/event_logs_partitioned',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/event_logs_view',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/jobs',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/notifications',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/repository_locations_data',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/run_tags',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'postgres_shard1',
      'key': 'shard1/public/runs',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Slack Stats, which includes number of members by day',
      'group_name': 'slack',
      'key': 'slack/dagster/member_metrics',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'alert_policies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/alert_policies',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.alert_policies',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.alert_policies',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'alerts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/alerts',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.alerts',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.alerts',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'alerts_alert_policies_new',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/alerts_alert_policies_new',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.alerts_alert_policies_new',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'asset_keys',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select
          asset_key,
          last_materialization,
          last_run_id,
          create_timestamp,
          organization_id,
          deployment_id,
          last_materialization_timestamp,
          wipe_timestamp,
          id,
          last_planned_materialization_event_id,
          last_planned_materialization_run_id,
          last_observation
        from asset_keys
        where {incremental_where_cond}
  
      ''',
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/asset_keys',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.asset_keys',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.asset_keys',
              }),
            }),
            'sql': '''
              select
                asset_key,
                last_materialization,
                last_run_id,
                create_timestamp,
                organization_id,
                deployment_id,
                last_materialization_timestamp,
                wipe_timestamp,
                id,
                last_planned_materialization_event_id,
                last_planned_materialization_run_id,
                last_observation
              from asset_keys
              where {incremental_where_cond}
  
            ''',
            'update_key': 'last_materialization_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'asset_materializations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/asset_materializations',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.asset_materializations',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.asset_materializations',
              }),
            }),
            'update_key': 'event_id',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'asset_observations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/asset_observations',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.asset_observations',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.asset_observations',
              }),
            }),
            'update_key': 'event_id',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'catalog_views',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/catalog_views',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.catalog_views',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.catalog_views',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'customer_info',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/customer_info',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.customer_info',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.customer_info',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'deployments',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/deployments',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.deployments',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.deployments',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'event_logs_view',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        with candidates as (
          select * from public.event_logs_partitioned where id > {incremental_value} and id <= {incremental_value} + 500000
        ) select * from candidates where dagster_event_type is not null
  
      ''',
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/event_logs',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.event_logs',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.event_logs_view': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.event_logs',
                }),
              }),
              'object': 'cloud_product.event_logs',
              'sql': '''
                with candidates as (
                  select * from public.event_logs_partitioned where id > {incremental_value} and id <= {incremental_value} + 500000
                ) select * from candidates where dagster_event_type is not null
  
              ''',
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.event_logs',
              }),
            }),
            'object': 'cloud_product.event_logs',
            'sql': '''
              with candidates as (
                select * from public.event_logs_partitioned where id > {incremental_value} and id <= {incremental_value} + 500000
              ) select * from candidates where dagster_event_type is not null
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'jobs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/jobs',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.jobs',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.jobs',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'notifications',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/notifications',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.notifications',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.notifications',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'onboarding_checklist',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/onboarding_checklist',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.onboarding_checklist',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.onboarding_checklist',
              }),
            }),
            'primary_key': list([
              'entry_key',
              'organization_id',
            ]),
            'update_key': 'update_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/organizations',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.organizations',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.organizations',
              }),
            }),
            'update_key': 'update_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'permissions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/permissions',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.permissions',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.permissions',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select
          id, 
          organization_id, 
          deployment_id, 
          create_timestamp, 
          timestamp as update_timestamp,
          jsonb_path_query_array(
            replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
            '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
          ) as asset_keys,
          jsonb_path_query_array(
            replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
            '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
          ) as group_names,
          jsonb_path_query(
            replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
            '$.dagster_library_versions'
          )::jsonb as dagster_library_versions
        from repository_locations_data
        where timestamp > current_timestamp - interval '1 day'
  
      ''',
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/repository_locations_data',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.repository_locations_data',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.repository_locations_data',
              }),
            }),
            'sql': '''
              select
                id, 
                organization_id, 
                deployment_id, 
                create_timestamp, 
                timestamp as update_timestamp,
                jsonb_path_query_array(
                  replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                  '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                ) as asset_keys,
                jsonb_path_query_array(
                  replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                  '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                ) as group_names,
                jsonb_path_query(
                  replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                  '$.dagster_library_versions'
                )::jsonb as dagster_library_versions
              from repository_locations_data
              where timestamp > current_timestamp - interval '1 day'
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'run_tags',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/run_tags',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.run_tags',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.run_tags',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'runs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select * from public.runs where
          update_timestamp > coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS'))
          and update_timestamp <= coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS')) + INTERVAL '1 hour'
  
      ''',
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/runs',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.runs',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.runs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.runs',
                }),
              }),
              'primary_key': list([
                'id',
              ]),
              'sql': '''
                select * from public.runs where
                  update_timestamp > coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS'))
                  and update_timestamp <= coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS')) + INTERVAL '1 hour'
  
              ''',
              'update_key': 'update_timestamp',
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.runs',
              }),
            }),
            'primary_key': list([
              'id',
            ]),
            'sql': '''
              select * from public.runs where
                update_timestamp > coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS'))
                and update_timestamp <= coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS')) + INTERVAL '1 hour'
  
            ''',
            'update_key': 'update_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'serverless_agents',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/serverless_agents',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.serverless_agents',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.serverless_agents',
              }),
            }),
            'update_key': 'update_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'session_tokens',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/session_tokens',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.session_tokens',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.session_tokens',
              }),
            }),
            'update_key': 'update_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'teams',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/teams',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.teams',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.teams',
              }),
            }),
            'update_key': 'update_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'teams_permissions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/teams_permissions',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.teams_permissions',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.teams_permissions',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'teams_users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/teams_users',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.teams_users',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.teams_users',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'event_logs_partitioned',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select
          date(timestamp) as date,
          organization_id,
          count(*) as user_events_count
        from event_logs_partitioned where
          dagster_event_type is null
          and date(timestamp) between current_date - 7
          and current_date
        group by date, organization_id
  
      ''',
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/user_events_counts',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.user_events_counts',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.event_logs_partitioned': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.user_events_counts',
                }),
              }),
              'object': 'cloud_product.user_events_counts',
              'primary_key': list([
                'date',
                'organization_id',
              ]),
              'sql': '''
                select
                  date(timestamp) as date,
                  organization_id,
                  count(*) as user_events_count
                from event_logs_partitioned where
                  dagster_event_type is null
                  and date(timestamp) between current_date - 7
                  and current_date
                group by date, organization_id
  
              ''',
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.user_events_counts',
              }),
            }),
            'object': 'cloud_product.user_events_counts',
            'primary_key': list([
              'date',
              'organization_id',
            ]),
            'sql': '''
              select
                date(timestamp) as date,
                organization_id,
                count(*) as user_events_count
              from event_logs_partitioned where
                dagster_event_type is null
                and date(timestamp) between current_date - 7
                and current_date
              group by date, organization_id
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'users',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/users',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.users',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.users',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'users_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/users_organizations',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.users_organizations',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.users_organizations',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'users_organizations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select id
        from users_organizations
  
      ''',
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/users_organizations_current_state_ids',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.users_organizations_current_state_ids',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations_current_state_ids',
                }),
              }),
              'mode': 'full-refresh',
              'object': '{stream_table}_current_state_ids',
              'sql': '''
                select id
                from users_organizations
  
              ''',
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.users_organizations_current_state_ids',
              }),
            }),
            'mode': 'full-refresh',
            'object': '{stream_table}_current_state_ids',
            'sql': '''
              select id
              from users_organizations
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'main',
              'public',
              'users_permissions',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_main',
      'key': 'sling/cloud_product/users_permissions',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product.users_permissions',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_MAIN',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts',
                }),
              }),
            }),
            'public.alerts_alert_policies_new': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.alerts_alert_policies_new',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.asset_keys',
                }),
              }),
              'sql': '''
                select
                  asset_key,
                  last_materialization,
                  last_run_id,
                  create_timestamp,
                  organization_id,
                  deployment_id,
                  last_materialization_timestamp,
                  wipe_timestamp,
                  id,
                  last_planned_materialization_event_id,
                  last_planned_materialization_run_id,
                  last_observation
                from asset_keys
                where {incremental_where_cond}
  
              ''',
              'update_key': 'last_materialization_timestamp',
            }),
            'public.catalog_views': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.catalog_views',
                }),
              }),
            }),
            'public.customer_info': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.customer_info',
                }),
              }),
            }),
            'public.deployments': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.deployments',
                }),
              }),
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.notifications',
                }),
              }),
            }),
            'public.onboarding_checklist': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.onboarding_checklist',
                }),
              }),
              'primary_key': list([
                'entry_key',
                'organization_id',
              ]),
              'update_key': 'update_timestamp',
            }),
            'public.organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.organizations',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.permissions',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id, 
                  organization_id, 
                  deployment_id, 
                  create_timestamp, 
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
            'public.serverless_agents': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.serverless_agents',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.session_tokens': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.session_tokens',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams',
                }),
              }),
              'update_key': 'update_timestamp',
            }),
            'public.teams_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_permissions',
                }),
              }),
            }),
            'public.teams_users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.teams_users',
                }),
              }),
            }),
            'public.users': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users',
                }),
              }),
            }),
            'public.users_organizations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_organizations',
                }),
              }),
            }),
            'public.users_permissions': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product.users_permissions',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_MAIN',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product.users_permissions',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'alert_policies',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/alert_policies',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.alert_policies',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.alert_policies',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'alerts',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/alerts',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.alerts',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alerts',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_keys',
                }),
              }),
              'update_key': 'last_materialization_timestamp',
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.notifications',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id,
                  organization_id,
                  deployment_id,
                  create_timestamp,
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.alerts',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'asset_keys',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/asset_keys',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.asset_keys',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alerts',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_keys',
                }),
              }),
              'update_key': 'last_materialization_timestamp',
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.notifications',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id,
                  organization_id,
                  deployment_id,
                  create_timestamp,
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.asset_keys',
              }),
            }),
            'update_key': 'last_materialization_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'asset_materializations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/asset_materializations',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.asset_materializations',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.asset_materializations',
              }),
            }),
            'update_key': 'event_id',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'asset_observations',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/asset_observations',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.asset_observations',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.asset_observations',
              }),
            }),
            'update_key': 'event_id',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'event_logs_view',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        with candidates as (
          select * from public.event_logs_partitioned where id > {incremental_value} and id <= {incremental_value} + 500000
        ) select * from candidates where dagster_event_type is not null
  
      ''',
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/event_logs',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.event_logs',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.event_logs_view': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.event_logs',
                }),
              }),
              'object': 'cloud_product_shard1.event_logs',
              'sql': '''
                with candidates as (
                  select * from public.event_logs_partitioned where id > {incremental_value} and id <= {incremental_value} + 500000
                ) select * from candidates where dagster_event_type is not null
  
              ''',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.event_logs',
              }),
            }),
            'object': 'cloud_product_shard1.event_logs',
            'sql': '''
              with candidates as (
                select * from public.event_logs_partitioned where id > {incremental_value} and id <= {incremental_value} + 500000
              ) select * from candidates where dagster_event_type is not null
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'jobs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/jobs',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.jobs',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alerts',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_keys',
                }),
              }),
              'update_key': 'last_materialization_timestamp',
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.notifications',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id,
                  organization_id,
                  deployment_id,
                  create_timestamp,
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.jobs',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'notifications',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/notifications',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.notifications',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alerts',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_keys',
                }),
              }),
              'update_key': 'last_materialization_timestamp',
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.notifications',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id,
                  organization_id,
                  deployment_id,
                  create_timestamp,
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.notifications',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'repository_locations_data',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select
          id,
          organization_id,
          deployment_id,
          create_timestamp,
          timestamp as update_timestamp,
          jsonb_path_query_array(
            replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
            '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
          ) as asset_keys,
          jsonb_path_query_array(
            replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
            '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
          ) as group_names,
          jsonb_path_query(
            replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
            '$.dagster_library_versions'
          )::jsonb as dagster_library_versions
        from repository_locations_data
        where timestamp > current_timestamp - interval '1 day'
  
      ''',
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/repository_locations_data',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.repository_locations_data',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'primary_key': list([
              'id',
            ]),
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alerts': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alerts',
                }),
              }),
            }),
            'public.asset_keys': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_keys',
                }),
              }),
              'update_key': 'last_materialization_timestamp',
            }),
            'public.jobs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.jobs',
                }),
              }),
            }),
            'public.notifications': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.notifications',
                }),
              }),
            }),
            'public.repository_locations_data': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.repository_locations_data',
                }),
              }),
              'sql': '''
                select
                  id,
                  organization_id,
                  deployment_id,
                  create_timestamp,
                  timestamp as update_timestamp,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                  ) as asset_keys,
                  jsonb_path_query_array(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                  ) as group_names,
                  jsonb_path_query(
                    replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                    '$.dagster_library_versions'
                  )::jsonb as dagster_library_versions
                from repository_locations_data
                where timestamp > current_timestamp - interval '1 day'
  
              ''',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.repository_locations_data',
              }),
            }),
            'sql': '''
              select
                id,
                organization_id,
                deployment_id,
                create_timestamp,
                timestamp as update_timestamp,
                jsonb_path_query_array(
                  replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                  '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].asset_key'
                ) as asset_keys,
                jsonb_path_query_array(
                  replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                  '$.repository_datas[0].external_repository_data.external_asset_graph_data[*].group_name'
                ) as group_names,
                jsonb_path_query(
                  replace(replace(load_repositories_response, ': Infinity', ': 0'), ': NaN', ': 0')::jsonb,
                  '$.dagster_library_versions'
                )::jsonb as dagster_library_versions
              from repository_locations_data
              where timestamp > current_timestamp - interval '1 day'
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'run_tags',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': None,
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/run_tags',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.run_tags',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'source_options': dict({
              'limit': 500000,
            }),
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.alert_policies': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.alert_policies',
                }),
              }),
            }),
            'public.asset_materializations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_materializations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.asset_observations': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.asset_observations',
                }),
              }),
              'update_key': 'event_id',
            }),
            'public.run_tags': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.run_tags',
                }),
              }),
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.run_tags',
              }),
            }),
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'runs',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select * from public.runs where
          update_timestamp > coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS'))
          and update_timestamp <= coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS')) + INTERVAL '1 hour'
  
      ''',
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/runs',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.runs',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
            'update_key': 'id',
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.runs': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.runs',
                }),
              }),
              'primary_key': list([
                'id',
              ]),
              'sql': '''
                select * from public.runs where
                  update_timestamp > coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS'))
                  and update_timestamp <= coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS')) + INTERVAL '1 hour'
  
              ''',
              'update_key': 'update_timestamp',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.runs',
              }),
            }),
            'primary_key': list([
              'id',
            ]),
            'sql': '''
              select * from public.runs where
                update_timestamp > coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS'))
                and update_timestamp <= coalesce({incremental_value}, to_timestamp('2021-06-30 00:0:00', 'YYYY-MM-DD HH24:MI:SS')) + INTERVAL '1 hour'
  
            ''',
            'update_key': 'update_timestamp',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'shard1',
              'public',
              'event_logs_partitioned',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': '''
        select
          date(timestamp) as date,
          organization_id,
          count(*) as user_events_count
        from event_logs_partitioned where
          dagster_event_type is null
          and date(timestamp) between current_date - 7
          and current_date
        group by date, organization_id
  
      ''',
      'group_name': 'cloud_product_shard1',
      'key': 'sling/cloud_product_shard1/user_events_counts',
      'metadata': dict({
        'dagster/table_name': 'sling.cloud_product_shard1.user_events_counts',
        'dagster_sling/dagster_sling_translator': ProdDbReplicationsSlingTranslator(target_prefix='target'),
        'dagster_sling/sling_replication_config': dict({
          'defaults': dict({
            'mode': 'incremental',
            'object': '{stream_table}',
          }),
          'source': 'CLOUD_PRODUCTION_SHARD1',
          'streams': dict({
            'public.event_logs_partitioned': dict({
              'meta': dict({
                'dagster': dict({
                  'asset_key': 'sling.cloud_product_shard1.user_events_counts',
                }),
              }),
              'object': 'cloud_product_shard1.user_events_counts',
              'primary_key': list([
                'date',
                'organization_id',
              ]),
              'sql': '''
                select
                  date(timestamp) as date,
                  organization_id,
                  count(*) as user_events_count
                from event_logs_partitioned where
                  dagster_event_type is null
                  and date(timestamp) between current_date - 7
                  and current_date
                group by date, organization_id
  
              ''',
            }),
          }),
          'target': 'SLING_DB_SHARD1',
        }),
        'stream_config': JsonMetadataValue(
          data=dict({
            'meta': dict({
              'dagster': dict({
                'asset_key': 'sling.cloud_product_shard1.user_events_counts',
              }),
            }),
            'object': 'cloud_product_shard1.user_events_counts',
            'primary_key': list([
              'date',
              'organization_id',
            ]),
            'sql': '''
              select
                date(timestamp) as date,
                organization_id,
                count(*) as user_events_count
              from event_logs_partitioned where
                dagster_event_type is null
                and date(timestamp) between current_date - 7
                and current_date
              group by date, organization_id
  
            ''',
          }),
        ),
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/sling': '',
        'dagster/kind/snowflake': '',
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe BALANCE_TRANSACTIONS table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/balance_transactions',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe CHARGES table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/charges',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe COUPONS table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/coupons',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe CUSTOMERS table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/customers',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe INVOICE_LINE_ITEMS table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/invoice_line_items',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe INVOICES table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/invoices',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe PLANS table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/plans',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe SUBSCRIPTION_ITEMS table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/subscription_items',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe SUBSCRIPTION_SCHEDULE_PHASES table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/subscription_schedule_phases',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe SUBSCRIPTION_SCHEDULES table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/subscription_schedules',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe SUBSCRIPTIONS table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/subscriptions',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': 'Stripe SUBSCRIPTIONS_METADATA table (synced using stripe pipeline)',
      'group_name': 'stripe_pipeline',
      'key': 'stripe_pipeline/stripe/subscriptions_metadata',
      'metadata': dict({
        'dagster/internal_freshness_policy': '{"__class__": "TimeWindowFreshnessPolicy", "fail_window": {"__class__": "SerializableTimeDelta", "days": 0, "microseconds": 0, "seconds": 82800}, "warn_window": null}',
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'thinkific',
      'key': 'thinkific_courses',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'thinkific',
      'key': 'thinkific_enrollments',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
      ]),
      'description': None,
      'group_name': 'thinkific',
      'key': 'thinkific_users',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
      }),
    }),
    dict({
      'deps': list([
        AssetDep(
          asset_key=AssetKey(
            parts=tuple(
              'sandbox',
              '',
              'statsig_user_activity_daily',
            ),
          ),
          partition_mapping=None,
        ),
      ]),
      'description': 'Daily events that contain pre-aggregated metrics based on user activity in segment.',
      'group_name': 'statsig',
      'key': 'user_activity_metrics',
      'metadata': dict({
      }),
      'owners': list([
      ]),
      'tags': dict({
        'dagster/kind/statsig': '',
      }),
    }),
  ])
# ---
# name: test_jobs_snapshot[True]
  list([
    dict({
      'asset_selection': list([
        '/staging/asset_checks',
        '/staging/assets',
        '/staging/external_repo_metadata',
        '/staging/jobs',
        '/staging/metadata',
        '/staging/partitions',
        '/staging/pipelines',
        '/staging/repo_metadata',
        '/staging/resources',
        '/staging/schedules',
        '/staging/sensors',
        'aws/cloud-prod/user_roles',
        'aws/cloud-prod/workspace_staging_asset_checks',
        'aws/cloud-prod/workspace_staging_assets',
        'aws/cloud-prod/workspace_staging_external_repo_metadata',
        'aws/cloud-prod/workspace_staging_jobs',
        'aws/cloud-prod/workspace_staging_metadata',
        'aws/cloud-prod/workspace_staging_partitions',
        'aws/cloud-prod/workspace_staging_pipelines',
        'aws/cloud-prod/workspace_staging_repo_metadata',
        'aws/cloud-prod/workspace_staging_resources',
        'aws/cloud-prod/workspace_staging_schedules',
        'aws/cloud-prod/workspace_staging_sensors',
        'aws/cloud_prod/user_roles_ext',
        'aws/cloud_prod/workspace_staging_asset_checks_ext',
        'aws/cloud_prod/workspace_staging_assets_ext',
        'aws/cloud_prod/workspace_staging_external_repo_metadata_ext',
        'aws/cloud_prod/workspace_staging_jobs_ext',
        'aws/cloud_prod/workspace_staging_metadata_ext',
        'aws/cloud_prod/workspace_staging_partitions_ext',
        'aws/cloud_prod/workspace_staging_pipelines_ext',
        'aws/cloud_prod/workspace_staging_repo_metadata_ext',
        'aws/cloud_prod/workspace_staging_resources_ext',
        'aws/cloud_prod/workspace_staging_schedules_ext',
        'aws/cloud_prod/workspace_staging_sensors_ext',
        'aws/dev/ext_common_room_activities',
        'aws/dev/ext_common_room_community_members',
        'aws/dev/ext_common_room_groups',
        'aws/dev/user_roles_ext',
        'aws/dev/workspace_staging_asset_checks_ext',
        'aws/dev/workspace_staging_assets_ext',
        'aws/dev/workspace_staging_external_repo_metadata_ext',
        'aws/dev/workspace_staging_jobs_ext',
        'aws/dev/workspace_staging_metadata_ext',
        'aws/dev/workspace_staging_partitions_ext',
        'aws/dev/workspace_staging_pipelines_ext',
        'aws/dev/workspace_staging_repo_metadata_ext',
        'aws/dev/workspace_staging_resources_ext',
        'aws/dev/workspace_staging_schedules_ext',
        'aws/dev/workspace_staging_sensors_ext',
        'aws/elementl/ext_common_room_activities',
        'aws/elementl/ext_common_room_community_members',
        'aws/elementl/ext_common_room_groups',
        'aws/elementl/stage_common_room_activities',
        'aws/elementl/stage_common_room_community_members',
        'aws/elementl/stage_common_room_groups',
        'aws/oss_telemetry/oss_telemetry_prod',
        'aws/oss_telemetry/oss_telemetry_prod_ext',
        'aws_cost_report',
        'buildkite_source_v2_pipelines',
        'dlt/hubspot/companies',
        'dlt/hubspot/deals',
        'dlt/hubspot/products',
        'dlt/hubspot/quotes',
        'dlt/hubspot/tickets',
        'dlt_buildkite_source_v2_builds',
        'dlt_buildkite_source_v2_pipelines',
        'dlt_github_reactions_issues',
        'dlt_github_reactions_stargazers',
        'dlt_pipelines_builds',
        'dlt_thinkific_course_reviews',
        'dlt_thinkific_courses',
        'dlt_thinkific_enrollments',
        'dlt_thinkific_users',
        'fivetran/bingads/account_history',
        'fivetran/bingads/ad_group_history',
        'fivetran/bingads/ad_group_performance_daily_report',
        'fivetran/bingads/ad_history',
        'fivetran/bingads/asset_group_attribute_history',
        'fivetran/bingads/asset_group_history',
        'fivetran/bingads/campaign_history',
        'fivetran/bingads/product_dimension_impression_performance_max_daily_report',
        'fivetran/bingads/product_dimension_impression_performance_max_hourly_report',
        'fivetran/bingads/product_dimension_performance_max_daily_report',
        'fivetran/bingads/product_dimension_performance_max_hourly_report',
        'fivetran/fivetran_metadata/account',
        'fivetran/fivetran_metadata/column_lineage',
        'fivetran/fivetran_metadata/connection',
        'fivetran/fivetran_metadata/connector',
        'fivetran/fivetran_metadata/connector_sdk_log',
        'fivetran/fivetran_metadata/connector_type',
        'fivetran/fivetran_metadata/credits_used',
        'fivetran/fivetran_metadata/destination',
        'fivetran/fivetran_metadata/destination_column_change_event',
        'fivetran/fivetran_metadata/destination_column_metadata',
        'fivetran/fivetran_metadata/destination_schema_change_event',
        'fivetran/fivetran_metadata/destination_schema_metadata',
        'fivetran/fivetran_metadata/destination_table_change_event',
        'fivetran/fivetran_metadata/destination_table_metadata',
        'fivetran/fivetran_metadata/incremental_mar',
        'fivetran/fivetran_metadata/log',
        'fivetran/fivetran_metadata/resource_membership',
        'fivetran/fivetran_metadata/role',
        'fivetran/fivetran_metadata/role_connector_type',
        'fivetran/fivetran_metadata/role_permission',
        'fivetran/fivetran_metadata/schema_lineage',
        'fivetran/fivetran_metadata/source_column_change_event',
        'fivetran/fivetran_metadata/source_column_metadata',
        'fivetran/fivetran_metadata/source_foreign_key_metadata',
        'fivetran/fivetran_metadata/source_schema_change_event',
        'fivetran/fivetran_metadata/source_schema_metadata',
        'fivetran/fivetran_metadata/source_table_change_event',
        'fivetran/fivetran_metadata/source_table_metadata',
        'fivetran/fivetran_metadata/table_lineage',
        'fivetran/fivetran_metadata/team',
        'fivetran/fivetran_metadata/team_membership',
        'fivetran/fivetran_metadata/transformation_runs',
        'fivetran/fivetran_metadata/usage_cost',
        'fivetran/fivetran_metadata/user',
        'fivetran/google_ads/account_stats',
        'fivetran/google_ads/ad_custom_parameter_history',
        'fivetran/google_ads/ad_group_bid_modifier_history',
        'fivetran/google_ads/ad_group_bidding_strategy_history',
        'fivetran/google_ads/ad_group_custom_parameter_history',
        'fivetran/google_ads/ad_group_history',
        'fivetran/google_ads/ad_group_label_history',
        'fivetran/google_ads/ad_group_stats',
        'fivetran/google_ads/ad_history',
        'fivetran/google_ads/ad_label_history',
        'fivetran/google_ads/ad_policy_topic_constraint_history',
        'fivetran/google_ads/ad_policy_topic_evidence_history',
        'fivetran/google_ads/ad_policy_topic_history',
        'fivetran/google_ads/ad_stats',
        'fivetran/google_ads/app_ad_history',
        'fivetran/google_ads/app_engagement_ad_history',
        'fivetran/google_ads/call_ad_history',
        'fivetran/google_ads/campaign_app_campaign_setting_history',
        'fivetran/google_ads/campaign_bid_modifier_history',
        'fivetran/google_ads/campaign_bidding_strategy_history',
        'fivetran/google_ads/campaign_budget_history',
        'fivetran/google_ads/campaign_dynamic_search_ads_setting_history',
        'fivetran/google_ads/campaign_geo_target_type_setting_history',
        'fivetran/google_ads/campaign_history',
        'fivetran/google_ads/campaign_hotel_setting_history',
        'fivetran/google_ads/campaign_label_history',
        'fivetran/google_ads/campaign_local_setting_history',
        'fivetran/google_ads/campaign_network_setting_history',
        'fivetran/google_ads/campaign_optimization_goal_setting_history',
        'fivetran/google_ads/campaign_real_time_bidding_setting_history',
        'fivetran/google_ads/campaign_shopping_setting_history',
        'fivetran/google_ads/campaign_stats',
        'fivetran/google_ads/campaign_targeting_setting_history',
        'fivetran/google_ads/campaign_tracking_setting_history',
        'fivetran/google_ads/demand_gen_carousel_ad_history',
        'fivetran/google_ads/demand_gen_multi_asset_ad_history',
        'fivetran/google_ads/demand_gen_product_ad_history',
        'fivetran/google_ads/display_upload_ad_history',
        'fivetran/google_ads/expanded_dynamic_search_ad_history',
        'fivetran/google_ads/expanded_text_ad_history',
        'fivetran/google_ads/hotel_ad_history',
        'fivetran/google_ads/image_ad_history',
        'fivetran/google_ads/lead_form_submission_data',
        'fivetran/google_ads/legacy_app_install_ad_history',
        'fivetran/google_ads/legacy_responsive_display_ad_history',
        'fivetran/google_ads/local_ad_history',
        'fivetran/google_ads/local_services_lead',
        'fivetran/google_ads/local_services_lead_conversations',
        'fivetran/google_ads/responsive_display_ad_history',
        'fivetran/google_ads/responsive_search_ad_history',
        'fivetran/google_ads/search_keyword_stats',
        'fivetran/google_ads/search_term_keyword_stats',
        'fivetran/google_ads/search_term_stats',
        'fivetran/google_ads/shopping_comparison_listing_ad_history',
        'fivetran/google_ads/shopping_product_ad_history',
        'fivetran/google_ads/shopping_smart_ad_history',
        'fivetran/google_ads/smart_campaign_ad_history',
        'fivetran/google_ads/text_ad_history',
        'fivetran/google_ads/video_ad_history',
        'fivetran/google_ads/video_responsive_ad_history',
        'fivetran/google_analytics_4/pages_path_report',
        'fivetran/google_analytics_4/pages_title_and_screen_class_report',
        'fivetran/google_analytics_4/properties',
        'fivetran/google_analytics_4/traffic_acquisition_session_default_channel_grouping_report',
        'fivetran/google_analytics_4/traffic_acquisition_session_source_medium_report',
        'fivetran/google_sheets/nb_sales_rep_quotas',
        'fivetran/google_sheets/sales_rep_quotas',
        'fivetran/hubspot/association_type',
        'fivetran/hubspot/company',
        'fivetran/hubspot/company_company',
        'fivetran/hubspot/contact',
        'fivetran/hubspot/contact_company',
        'fivetran/hubspot/contact_contact',
        'fivetran/hubspot/contact_form_submission',
        'fivetran/hubspot/form',
        'fivetran/hubspot/organizations',
        'fivetran/hubspot/organizations_to_company',
        'fivetran/hubspot/users',
        'fivetran/incidentio/action',
        'fivetran/incidentio/catalog_entry',
        'fivetran/incidentio/catalog_entry_aliases',
        'fivetran/incidentio/catalog_entry_attribute_array_value',
        'fivetran/incidentio/catalog_entry_attribute_value',
        'fivetran/incidentio/catalog_resource',
        'fivetran/incidentio/catalog_type',
        'fivetran/incidentio/catalog_type_annotation',
        'fivetran/incidentio/catalog_type_required_integration',
        'fivetran/incidentio/catalog_type_schema_attribute',
        'fivetran/incidentio/custom_field',
        'fivetran/incidentio/custom_field_option',
        'fivetran/incidentio/follow_up_incident',
        'fivetran/incidentio/identity_utility_role',
        'fivetran/incidentio/incident',
        'fivetran/incidentio/incident_attachment',
        'fivetran/incidentio/incident_custom_field_entry_value',
        'fivetran/incidentio/incident_role',
        'fivetran/incidentio/incident_role_assignment',
        'fivetran/incidentio/incident_status',
        'fivetran/incidentio/incident_timestamp',
        'fivetran/incidentio/incident_timestamp_value',
        'fivetran/incidentio/incident_type',
        'fivetran/incidentio/incident_update',
        'fivetran/incidentio/severity',
        'fivetran/incidentio/users',
        'fivetran/information_schema/columns',
        'fivetran/linear/attachment',
        'fivetran/linear/attachment_metadata',
        'fivetran/linear/comment',
        'fivetran/linear/cycle',
        'fivetran/linear/cycle_uncompleted_issue',
        'fivetran/linear/document',
        'fivetran/linear/external_user',
        'fivetran/linear/initiative',
        'fivetran/linear/initiative_history',
        'fivetran/linear/initiative_to_project',
        'fivetran/linear/integration',
        'fivetran/linear/issue',
        'fivetran/linear/issue_history',
        'fivetran/linear/issue_label',
        'fivetran/linear/issue_subscriber',
        'fivetran/linear/label',
        'fivetran/linear/label_children',
        'fivetran/linear/organization',
        'fivetran/linear/project',
        'fivetran/linear/project_member',
        'fivetran/linear/project_milestone',
        'fivetran/linear/project_status',
        'fivetran/linear/project_team',
        'fivetran/linear/project_update',
        'fivetran/linear/project_update_comment',
        'fivetran/linear/project_update_reaction',
        'fivetran/linear/roadmap',
        'fivetran/linear/roadmap_to_project',
        'fivetran/linear/team',
        'fivetran/linear/team_member',
        'fivetran/linear/team_membership',
        'fivetran/linear/team_project',
        'fivetran/linear/users',
        'fivetran/linear/workflow_state',
        'fivetran/linkedin_ads/account_history',
        'fivetran/linkedin_ads/account_user_history',
        'fivetran/linkedin_ads/ad_analytics_by_campaign',
        'fivetran/linkedin_ads/ad_analytics_by_creative',
        'fivetran/linkedin_ads/campaign_group_history',
        'fivetran/linkedin_ads/campaign_history',
        'fivetran/linkedin_ads/creative_history',
        'fivetran/linkedin_ads/lead_form_response_multiple_choice_answers',
        'fivetran/linkedin_ads/sponsored_message_option',
        'fivetran/linkedin_company_pages/brand',
        'fivetran/linkedin_company_pages/brand_alternative_names',
        'fivetran/linkedin_company_pages/brand_followers_by_association_type',
        'fivetran/linkedin_company_pages/brand_followers_by_function',
        'fivetran/linkedin_company_pages/brand_followers_by_geo',
        'fivetran/linkedin_company_pages/brand_followers_by_geo_country',
        'fivetran/linkedin_company_pages/brand_followers_by_industry',
        'fivetran/linkedin_company_pages/brand_followers_by_seniority',
        'fivetran/linkedin_company_pages/brand_followers_by_staff_count_range',
        'fivetran/linkedin_company_pages/brand_industries',
        'fivetran/linkedin_company_pages/brand_localized_specialties',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_country',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_function',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_geo',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_geo_country',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_industry',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_region',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_seniority',
        'fivetran/linkedin_company_pages/brand_page_statistic_by_staff_count_range',
        'fivetran/linkedin_company_pages/brand_share',
        'fivetran/linkedin_company_pages/brand_time_bound_follower_statistic',
        'fivetran/linkedin_company_pages/brand_time_bound_page_statistic',
        'fivetran/linkedin_company_pages/brand_time_bound_share_statistic',
        'fivetran/linkedin_company_pages/brand_total_follower_statistic',
        'fivetran/linkedin_company_pages/brand_total_page_statistic',
        'fivetran/linkedin_company_pages/brand_total_share_statistic',
        'fivetran/linkedin_company_pages/brand_ugc_post',
        'fivetran/linkedin_company_pages/comment_history',
        'fivetran/linkedin_company_pages/comment_on_comment',
        'fivetran/linkedin_company_pages/comment_on_share',
        'fivetran/linkedin_company_pages/comment_on_ugc_post',
        'fivetran/linkedin_company_pages/comment_social_metadata_summary',
        'fivetran/linkedin_company_pages/country',
        'fivetran/linkedin_company_pages/followers_by_association_type',
        'fivetran/linkedin_company_pages/followers_by_function',
        'fivetran/linkedin_company_pages/followers_by_geo',
        'fivetran/linkedin_company_pages/followers_by_geo_country',
        'fivetran/linkedin_company_pages/followers_by_industry',
        'fivetran/linkedin_company_pages/followers_by_seniority',
        'fivetran/linkedin_company_pages/followers_by_staff_count_range',
        'fivetran/linkedin_company_pages/function',
        'fivetran/linkedin_company_pages/geo',
        'fivetran/linkedin_company_pages/industry',
        'fivetran/linkedin_company_pages/organization',
        'fivetran/linkedin_company_pages/organization_alternative_names',
        'fivetran/linkedin_company_pages/organization_followers_by_association_type',
        'fivetran/linkedin_company_pages/organization_followers_by_function',
        'fivetran/linkedin_company_pages/organization_followers_by_geo',
        'fivetran/linkedin_company_pages/organization_followers_by_geo_country',
        'fivetran/linkedin_company_pages/organization_followers_by_industry',
        'fivetran/linkedin_company_pages/organization_followers_by_seniority',
        'fivetran/linkedin_company_pages/organization_followers_by_staff_count_range',
        'fivetran/linkedin_company_pages/organization_groups',
        'fivetran/linkedin_company_pages/organization_industries',
        'fivetran/linkedin_company_pages/organization_localized_specialties',
        'fivetran/linkedin_company_pages/organization_locations',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_country',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_function',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_geo',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_geo_country',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_industry',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_region',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_seniority',
        'fivetran/linkedin_company_pages/organization_page_statistic_by_staff_count_range',
        'fivetran/linkedin_company_pages/organization_share',
        'fivetran/linkedin_company_pages/organization_time_bound_follower_statistic',
        'fivetran/linkedin_company_pages/organization_time_bound_page_statistic',
        'fivetran/linkedin_company_pages/organization_time_bound_share_statistic',
        'fivetran/linkedin_company_pages/organization_total_follower_statistic',
        'fivetran/linkedin_company_pages/organization_total_page_statistic',
        'fivetran/linkedin_company_pages/organization_total_share_statistic',
        'fivetran/linkedin_company_pages/organization_ugc_post',
        'fivetran/linkedin_company_pages/page_statistic_by_function',
        'fivetran/linkedin_company_pages/page_statistic_by_geo',
        'fivetran/linkedin_company_pages/page_statistic_by_geo_country',
        'fivetran/linkedin_company_pages/page_statistic_by_industry',
        'fivetran/linkedin_company_pages/page_statistic_by_seniority',
        'fivetran/linkedin_company_pages/page_statistic_by_staff_count_range',
        'fivetran/linkedin_company_pages/post_carousel_card',
        'fivetran/linkedin_company_pages/post_content',
        'fivetran/linkedin_company_pages/post_content_poll_option',
        'fivetran/linkedin_company_pages/post_distribution_target_industries',
        'fivetran/linkedin_company_pages/post_distribution_target_interface_locales',
        'fivetran/linkedin_company_pages/post_distribution_target_job_functions',
        'fivetran/linkedin_company_pages/post_distribution_target_locations',
        'fivetran/linkedin_company_pages/post_distribution_target_seniorities',
        'fivetran/linkedin_company_pages/post_distribution_target_staff_count_ranges',
        'fivetran/linkedin_company_pages/post_multi_image',
        'fivetran/linkedin_company_pages/region',
        'fivetran/linkedin_company_pages/seniority',
        'fivetran/linkedin_company_pages/share_carousel_card',
        'fivetran/linkedin_company_pages/share_content',
        'fivetran/linkedin_company_pages/share_content_poll_option',
        'fivetran/linkedin_company_pages/share_distribution_target_industries',
        'fivetran/linkedin_company_pages/share_distribution_target_interface_locales',
        'fivetran/linkedin_company_pages/share_distribution_target_job_functions',
        'fivetran/linkedin_company_pages/share_distribution_target_locations',
        'fivetran/linkedin_company_pages/share_distribution_target_seniorities',
        'fivetran/linkedin_company_pages/share_distribution_target_staff_count_ranges',
        'fivetran/linkedin_company_pages/share_history',
        'fivetran/linkedin_company_pages/share_multi_image',
        'fivetran/linkedin_company_pages/share_share_statistic',
        'fivetran/linkedin_company_pages/share_social_metadata_summary',
        'fivetran/linkedin_company_pages/share_statistic',
        'fivetran/linkedin_company_pages/social_metadata_summary',
        'fivetran/linkedin_company_pages/time_bound_follower_statistic',
        'fivetran/linkedin_company_pages/time_bound_page_statistic',
        'fivetran/linkedin_company_pages/time_bound_share_statistic',
        'fivetran/linkedin_company_pages/total_follower_statistic',
        'fivetran/linkedin_company_pages/total_page_statistic',
        'fivetran/linkedin_company_pages/total_share_statistic',
        'fivetran/linkedin_company_pages/ugc_post_history',
        'fivetran/linkedin_company_pages/ugc_post_share_statistic',
        'fivetran/linkedin_company_pages/ugc_post_social_metadata_summary',
        'fivetran/outreach/account',
        'fivetran/outreach/account_tag',
        'fivetran/outreach/active_step_mailing',
        'fivetran/outreach/active_step_task',
        'fivetran/outreach/data_connection',
        'fivetran/outreach/duty',
        'fivetran/outreach/email_address',
        'fivetran/outreach/event',
        'fivetran/outreach/mailing',
        'fivetran/outreach/mailing_recipient',
        'fivetran/outreach/mailing_reference',
        'fivetran/outreach/prospect',
        'fivetran/outreach/prospect_email',
        'fivetran/outreach/prospect_favorite',
        'fivetran/outreach/prospect_home_phone',
        'fivetran/outreach/prospect_mobile_phone',
        'fivetran/outreach/prospect_other_phone',
        'fivetran/outreach/prospect_tag',
        'fivetran/outreach/prospect_voip_phone',
        'fivetran/outreach/prospect_work_phone',
        'fivetran/outreach/sequence',
        'fivetran/outreach/sequence_state',
        'fivetran/outreach/sequence_step',
        'fivetran/outreach/sequence_tag',
        'fivetran/outreach/sequence_template',
        'fivetran/outreach/user_duty',
        'fivetran/outreach/user_email_recipients',
        'fivetran/outreach/user_team',
        'fivetran/outreach/users',
        'fivetran/reddit_ads/account_conversions_report',
        'fivetran/reddit_ads/account_report',
        'fivetran/reddit_ads/ad',
        'fivetran/reddit_ads/ad_conversions_report',
        'fivetran/reddit_ads/ad_group',
        'fivetran/reddit_ads/ad_group_conversions_report',
        'fivetran/reddit_ads/ad_group_report',
        'fivetran/reddit_ads/ad_report',
        'fivetran/reddit_ads/campaign',
        'fivetran/reddit_ads/campaign_report',
        'fivetran/reddit_ads/click_tracker',
        'fivetran/reddit_ads/pixel_partner_reference',
        'fivetran/reddit_ads/schedule',
        'fivetran/salesforce/account',
        'fivetran/salesforce/account_history',
        'fivetran/salesforce/account_ownership_c',
        'fivetran/salesforce/campaign',
        'fivetran/salesforce/campaign_member',
        'fivetran/salesforce/contact',
        'fivetran/salesforce/contract',
        'fivetran/salesforce/event',
        'fivetran/salesforce/leadfeederapp_website_visit_c',
        'fivetran/salesforce/opportunity',
        'fivetran/salesforce/opportunity_field_history',
        'fivetran/salesforce/opportunity_history',
        'fivetran/salesforce/opportunity_line_item',
        'fivetran/salesforce/organization_c',
        'fivetran/salesforce/partner',
        'fivetran/salesforce/product_2',
        'fivetran/salesforce/sales_cycle_c',
        'fivetran/salesforce/task',
        'fivetran/salesforce/user',
        'fivetran/salesforce/user_role',
        'fivetran/youtube_analytics/channel',
        'fivetran/youtube_analytics/channel_combined_a_2',
        'fivetran/youtube_analytics/playlist',
        'fivetran/youtube_analytics/playlist_combined_a_1',
        'fivetran/youtube_analytics/video',
        'fivetran/zoom/channel',
        'fivetran/zoom/meeting',
        'fivetran/zoom/meeting_participant',
        'fivetran/zoom/meeting_report',
        'fivetran/zoom/meeting_report_custom_key',
        'fivetran/zoom/meeting_report_tracking',
        'fivetran/zoom/user_custom_attribute',
        'fivetran/zoom/user_group',
        'fivetran/zoom/user_im_group',
        'fivetran/zoom/users',
        'fivetran/zoom/webinar',
        'fivetran/zoom/webinar_absentee',
        'fivetran/zoom/webinar_panelist',
        'fivetran/zoom/webinar_participant',
        'fivetran/zoom/webinar_poll',
        'fivetran/zoom/webinar_poll_question',
        'fivetran/zoom/webinar_poll_question_answer',
        'fivetran/zoom/webinar_poll_question_prompt',
        'fivetran/zoom/webinar_question_and_answer',
        'fivetran/zoom/webinar_question_and_answer_question',
        'fivetran/zoom/webinar_question_and_answer_question_detail',
        'fivetran/zoom/webinar_registrant',
        'fivetran/zoom/webinar_registrant_custom_question',
        'fivetran/zoom/webinar_report',
        'fivetran/zoom/webinar_report_custom_key',
        'fivetran/zoom/webinar_report_tracking',
        'fivetran/zoom/webinar_tracking_source',
        'github_issues',
        'github_reactions_issues',
        'github_reactions_stargazers',
        'gong/gong_data_cloud/call_recordings',
        'gong/gong_data_cloud/call_transcripts',
        'gong/gong_data_cloud/calls',
        'gong/gong_data_cloud/conversation_contexts',
        'gong/gong_data_cloud/conversation_participants',
        'gong/gong_data_cloud/conversations',
        'gong/gong_data_cloud/emails',
        'gong/gong_data_cloud/meetings',
        'gong/gong_data_cloud/users',
        'gong_calls_transcript_ai',
        'hightouch_cloud_users',
        'hightouch_null_contact_names',
        'hightouch_org_activity_monthly',
        'hightouch_sales_cycles',
        'hightouch_sync_hubspot_company',
        'hightouch_sync_hubspot_contact',
        'hightouch_sync_hubspot_organization',
        'hightouch_sync_salesforce_account',
        'hightouch_user_attribution',
        'hubspot_companies',
        'hubspot_deals',
        'hubspot_products',
        'hubspot_quotes',
        'hubspot_tickets',
        'inactive_snowflake_clones',
        'main/public/alert_policies',
        'main/public/alerts',
        'main/public/alerts_alert_policies_new',
        'main/public/asset_keys',
        'main/public/asset_materializations',
        'main/public/asset_observations',
        'main/public/catalog_views',
        'main/public/customer_info',
        'main/public/deployments',
        'main/public/event_logs_partitioned',
        'main/public/event_logs_view',
        'main/public/jobs',
        'main/public/notifications',
        'main/public/onboarding_checklist',
        'main/public/organizations',
        'main/public/permissions',
        'main/public/repository_locations_data',
        'main/public/run_tags',
        'main/public/runs',
        'main/public/serverless_agents',
        'main/public/session_tokens',
        'main/public/teams',
        'main/public/teams_permissions',
        'main/public/teams_users',
        'main/public/users',
        'main/public/users_organizations',
        'main/public/users_permissions',
        'org_performance_metrics',
        'pipelines_builds',
        'postgres/usage_metrics_daily_jobs_aggregated_reporting',
        'product_operations/insights/reporting_asset_materialization_metrics',
        'public/salesforce_contract_info',
        'purina/oss_analytics/dagster_pypi_downloads',
        'purina/prod_telemetry/oss_telemetry_events_raw',
        'pylon/pylon/pylon_issues',
        'sandbox//abm_activity_scoring',
        'sandbox//abm_company_activity',
        'sandbox//abm_company_intent_scores',
        'sandbox//abm_contact_activity',
        'sandbox//abm_contact_intent_scores',
        'sandbox//account_contract_activity',
        'sandbox//account_owner_changelog',
        'sandbox//account_source_changelog',
        'sandbox//accounts',
        'sandbox//accounts_by_day',
        'sandbox//ad_spend_by_day',
        'sandbox//adgroup_performance_by_date',
        'sandbox//arr_by_month',
        'sandbox//asset_check_executions',
        'sandbox//asset_event_metadata',
        'sandbox//asset_groups',
        'sandbox//attributed_conversions',
        'sandbox//base_graph_metrics',
        'sandbox//base_sales_cycles',
        'sandbox//base_step_metrics',
        'sandbox//bigquery_cost_metadata',
        'sandbox//bing_ad_group_stats',
        'sandbox//buildkite_builds',
        'sandbox//campaigns',
        'sandbox//cloud_product_alert_policies',
        'sandbox//cloud_product_alerts',
        'sandbox//cloud_product_asset_keys',
        'sandbox//cloud_product_asset_materializations',
        'sandbox//cloud_product_asset_observations',
        'sandbox//cloud_product_catalog_views',
        'sandbox//cloud_product_customer_info',
        'sandbox//cloud_product_deployments',
        'sandbox//cloud_product_event_logs',
        'sandbox//cloud_product_jobs',
        'sandbox//cloud_product_notifications',
        'sandbox//cloud_product_organizations',
        'sandbox//cloud_product_repository_locations_data',
        'sandbox//cloud_product_runs',
        'sandbox//cloud_product_session_tokens',
        'sandbox//cloud_product_teams_users',
        'sandbox//cloud_product_user_events_counts',
        'sandbox//cloud_product_user_organizations',
        'sandbox//cloud_product_user_roles',
        'sandbox//cloud_product_users',
        'sandbox//cloud_users',
        'sandbox//code_location_asset_checks',
        'sandbox//code_location_assets',
        'sandbox//code_location_external_repo_metadata',
        'sandbox//code_location_jobs',
        'sandbox//code_location_library_versions',
        'sandbox//code_location_metadata',
        'sandbox//code_location_partitions',
        'sandbox//code_location_pipelines',
        'sandbox//code_location_repo_metadata',
        'sandbox//code_location_resources',
        'sandbox//code_location_schedules',
        'sandbox//code_location_sensors',
        'sandbox//common_room_activities',
        'sandbox//common_room_community_members',
        'sandbox//common_room_groups',
        'sandbox//contacts',
        'sandbox//conversion_events',
        'sandbox//country_codes',
        'sandbox//credit_utilization',
        'sandbox//credit_utilization_forecast',
        'sandbox//current_credit_utilization',
        'sandbox//dagster_user_roles',
        'sandbox//deployment_insights_usage_daily',
        'sandbox//dim_accounts',
        'sandbox//dim_accounts_by_day',
        'sandbox//dim_campaigns',
        'sandbox//dim_contacts',
        'sandbox//dim_opportunities',
        'sandbox//dim_opportunities_by_day',
        'sandbox//dim_organizations',
        'sandbox//dim_segment_users',
        'sandbox//dim_users',
        'sandbox//education_course_reviews',
        'sandbox//education_courses',
        'sandbox//education_enrollments',
        'sandbox//education_users',
        'sandbox//education_web_attributed_conversions',
        'sandbox//event_score_mapping',
        'sandbox//excludable_email_domains',
        'sandbox//execution_time_metadata',
        'sandbox//fct_gong_meeting_participants',
        'sandbox//fct_gong_meetings',
        'sandbox//fct_outreach_mailings',
        'sandbox//fct_runs',
        'sandbox//fct_segment_cloud_page_visits',
        'sandbox//fct_segment_dagster_u_page_visits',
        'sandbox//fct_segment_docs_page_visits',
        'sandbox//fct_segment_web_page_visits',
        'sandbox//fct_steps',
        'sandbox//fct_zoom_webinar_registration',
        'sandbox//first_touch',
        'sandbox//first_user_web_session',
        'sandbox//form_fill_attribution',
        'sandbox//gong_conversation_participants',
        'sandbox//gong_conversations',
        'sandbox//gong_emails',
        'sandbox//gong_meetings',
        'sandbox//gong_users',
        'sandbox//google_ads_ad_group_stats',
        'sandbox//google_ads_ad_groups',
        'sandbox//google_ads_adgroup_stats',
        'sandbox//google_ads_campaign_stats',
        'sandbox//google_ads_campaigns',
        'sandbox//google_ads_campaigns_wo_ad_group_stats',
        'sandbox//google_analytics_page_report',
        'sandbox//google_analytics_traffic_session_default_group',
        'sandbox//google_analytics_traffic_session_source_medium_report',
        'sandbox//gtm_user_activity',
        'sandbox//gtm_user_attribution',
        'sandbox//gtm_user_lead_source',
        'sandbox//gtm_user_mappings',
        'sandbox//hubspot_companies',
        'sandbox//hubspot_contact_form_submissions',
        'sandbox//hubspot_contacts',
        'sandbox//hubspot_organizations',
        'sandbox//hubspot_source_drill_level_2_labels',
        'sandbox//insights_asset_materialization_metrics',
        'sandbox//instance_type_priority',
        'sandbox//int_sessionized_pageviews',
        'sandbox//int_sessions_aggregated',
        'sandbox//int_stripe_customer_invoices',
        'sandbox//int_users_stitched',
        'sandbox//linkedin_ads_daily_campaign',
        'sandbox//maps_alerts',
        'sandbox//maps_organizations',
        'sandbox//marketing_event_attendees',
        'sandbox//marketing_events',
        'sandbox//marketing_wbr_metrics_by_date',
        'sandbox//materialization_metadata',
        'sandbox//non_opportunity_stages',
        'sandbox//onboarding_events',
        'sandbox//opportunities',
        'sandbox//opportunities_by_campaign',
        'sandbox//opportunities_by_day',
        'sandbox//opportunity_fiscal_qtr_start_snapshots',
        'sandbox//opportunity_snapshots',
        'sandbox//opportunity_stages',
        'sandbox//opportunity_yield',
        'sandbox//org_activity_monthly',
        'sandbox//org_deployments_daily',
        'sandbox//org_info',
        'sandbox//organization_adoption_daily',
        'sandbox//organization_conversion_info',
        'sandbox//organization_library_versions',
        'sandbox//organization_library_versions_daily',
        'sandbox//organization_milestones',
        'sandbox//organization_usage_daily',
        'sandbox//organizations',
        'sandbox//organizations_by_day',
        'sandbox//oss_instance_events_daily',
        'sandbox//oss_instance_events_weekly',
        'sandbox//oss_instances_daily',
        'sandbox//outreach_accounts',
        'sandbox//outreach_events',
        'sandbox//outreach_mailings',
        'sandbox//outreach_prospects',
        'sandbox//outreach_sequences',
        'sandbox//product_engagement',
        'sandbox//pylon_issues',
        'sandbox//pypi_downloads_weekly',
        'sandbox//reddit_ads_ad_group_report',
        'sandbox//reddit_ads_ad_groups',
        'sandbox//reddit_ads_campaign_report',
        'sandbox//reddit_ads_campaigns',
        'sandbox//referrer_mapping',
        'sandbox//reporting_contract_info',
        'sandbox//sales_activities',
        'sandbox//sales_cycle_stage_activities',
        'sandbox//sales_cycle_stages',
        'sandbox//sales_cycles',
        'sandbox//salesforce_account_history',
        'sandbox//salesforce_accounts',
        'sandbox//salesforce_campaign_members',
        'sandbox//salesforce_campaigns',
        'sandbox//salesforce_contacts',
        'sandbox//salesforce_contracts',
        'sandbox//salesforce_events',
        'sandbox//salesforce_leaderfeeder_sessions',
        'sandbox//salesforce_opp_stage_mapping',
        'sandbox//salesforce_opportunities',
        'sandbox//salesforce_opportunity_history',
        'sandbox//salesforce_opportunity_line_item',
        'sandbox//salesforce_organizations',
        'sandbox//salesforce_partners',
        'sandbox//salesforce_tasks',
        'sandbox//salesforce_users',
        'sandbox//segment_cloud_identifies',
        'sandbox//segment_cloud_pages',
        'sandbox//segment_cloud_tracks',
        'sandbox//segment_cloud_users',
        'sandbox//segment_dagster_u_identifies',
        'sandbox//segment_dagster_u_pages',
        'sandbox//segment_dagster_u_sessions',
        'sandbox//segment_dagster_u_tracks',
        'sandbox//segment_dagster_u_users',
        'sandbox//segment_docs_pages',
        'sandbox//segment_web_hubspot_form_submits',
        'sandbox//segment_web_identifies',
        'sandbox//segment_web_pages',
        'sandbox//segment_web_sessions',
        'sandbox//self_serve_plan_type_monthly',
        'sandbox//self_serve_stripe_products',
        'sandbox//snapshot_hubspot_companies',
        'sandbox//snapshot_salesforce_accounts',
        'sandbox//snapshot_salesforce_opportunities',
        'sandbox//snowflake_cost_observation_metadata',
        'sandbox//statsig_user_activity_daily',
        'sandbox//stg_aws__code_location_asset_checks',
        'sandbox//stg_aws__code_location_assets',
        'sandbox//stg_aws__code_location_external_repo_metadata',
        'sandbox//stg_aws__code_location_jobs',
        'sandbox//stg_aws__code_location_metadata',
        'sandbox//stg_aws__code_location_partitions',
        'sandbox//stg_aws__code_location_pipelines',
        'sandbox//stg_aws__code_location_repo_metadata',
        'sandbox//stg_aws__code_location_resources',
        'sandbox//stg_aws__code_location_schedules',
        'sandbox//stg_aws__code_location_sensors',
        'sandbox//stg_aws__common_room_activities',
        'sandbox//stg_aws__common_room_community_members',
        'sandbox//stg_aws__common_room_groups',
        'sandbox//stg_aws__user_licensed_roles',
        'sandbox//stg_bing__ad_group_history',
        'sandbox//stg_bing__ad_group_performance_daily_report',
        'sandbox//stg_bing__campaign_history',
        'sandbox//stg_buildkite__builds',
        'sandbox//stg_cloud_product__alert_policies',
        'sandbox//stg_cloud_product__alerts',
        'sandbox//stg_cloud_product__alerts_alert_policies',
        'sandbox//stg_cloud_product__asset_keys',
        'sandbox//stg_cloud_product__asset_materializations',
        'sandbox//stg_cloud_product__asset_observations',
        'sandbox//stg_cloud_product__catalog_views',
        'sandbox//stg_cloud_product__customer_info',
        'sandbox//stg_cloud_product__deployments',
        'sandbox//stg_cloud_product__event_logs',
        'sandbox//stg_cloud_product__jobs',
        'sandbox//stg_cloud_product__notifications',
        'sandbox//stg_cloud_product__onboarding_checklist',
        'sandbox//stg_cloud_product__organizations',
        'sandbox//stg_cloud_product__permissions',
        'sandbox//stg_cloud_product__repository_locations_data',
        'sandbox//stg_cloud_product__run_tags',
        'sandbox//stg_cloud_product__runs',
        'sandbox//stg_cloud_product__session_tokens',
        'sandbox//stg_cloud_product__teams',
        'sandbox//stg_cloud_product__teams_permissions',
        'sandbox//stg_cloud_product__teams_users',
        'sandbox//stg_cloud_product__user_events_counts',
        'sandbox//stg_cloud_product__user_organizations',
        'sandbox//stg_cloud_product__users',
        'sandbox//stg_cloud_product__users_permissions',
        'sandbox//stg_gong__conversation_contexts',
        'sandbox//stg_gong__conversation_participants',
        'sandbox//stg_gong__conversations',
        'sandbox//stg_gong__emails',
        'sandbox//stg_gong__meetings',
        'sandbox//stg_gong__users',
        'sandbox//stg_google_ads__ad_group_stats',
        'sandbox//stg_google_ads__ad_groups',
        'sandbox//stg_google_ads__campaign_stats',
        'sandbox//stg_google_ads__campaigns',
        'sandbox//stg_google_analytics__page_report',
        'sandbox//stg_google_analytics__session_source_medium',
        'sandbox//stg_google_analytics__traffic_default_group',
        'sandbox//stg_google_sheets__nb_sales_rep_quotas',
        'sandbox//stg_google_sheets__sales_rep_quotas',
        'sandbox//stg_hubspot__company',
        'sandbox//stg_hubspot__contact_first_touch',
        'sandbox//stg_hubspot__contact_form_submissions',
        'sandbox//stg_hubspot__contact_lifecycle_changes',
        'sandbox//stg_hubspot__contact_web_touches',
        'sandbox//stg_hubspot__contacts',
        'sandbox//stg_hubspot__forms',
        'sandbox//stg_hubspot__organization',
        'sandbox//stg_insights__asset_materialization_metrics',
        'sandbox//stg_linkedin__ad_analytics_by_campaign',
        'sandbox//stg_linkedin__campaign_history',
        'sandbox//stg_outreach__account',
        'sandbox//stg_outreach__data_connection',
        'sandbox//stg_outreach__email_address',
        'sandbox//stg_outreach__event',
        'sandbox//stg_outreach__mailing',
        'sandbox//stg_outreach__prospect',
        'sandbox//stg_outreach__sequence',
        'sandbox//stg_pylon__pylon_issues',
        'sandbox//stg_pypi__weekly_downloads',
        'sandbox//stg_reddit_ads__ad_group',
        'sandbox//stg_reddit_ads__ad_group_report',
        'sandbox//stg_reddit_ads__campaign',
        'sandbox//stg_reddit_ads__campaign_report',
        'sandbox//stg_salesforce__account_history',
        'sandbox//stg_salesforce__accounts',
        'sandbox//stg_salesforce__campaign_members',
        'sandbox//stg_salesforce__campaigns',
        'sandbox//stg_salesforce__contacts',
        'sandbox//stg_salesforce__contracts',
        'sandbox//stg_salesforce__events',
        'sandbox//stg_salesforce__leadfeederapp_website_visit_c',
        'sandbox//stg_salesforce__opportunities',
        'sandbox//stg_salesforce__opportunity_history',
        'sandbox//stg_salesforce__opportunity_line_item',
        'sandbox//stg_salesforce__organizations',
        'sandbox//stg_salesforce__partners',
        'sandbox//stg_salesforce__product2',
        'sandbox//stg_salesforce__tasks',
        'sandbox//stg_salesforce__user_roles',
        'sandbox//stg_salesforce__users',
        'sandbox//stg_scout__queries',
        'sandbox//stg_segment_cloud__identifies',
        'sandbox//stg_segment_cloud__pages',
        'sandbox//stg_segment_cloud__tracks',
        'sandbox//stg_segment_cloud__trial_start',
        'sandbox//stg_segment_dagster_u__certificate_record_downloaded',
        'sandbox//stg_segment_dagster_u__course_landing_page',
        'sandbox//stg_segment_dagster_u__identifies',
        'sandbox//stg_segment_dagster_u__pages',
        'sandbox//stg_segment_dagster_u__quiz_start_page',
        'sandbox//stg_segment_dagster_u__signup',
        'sandbox//stg_segment_dagster_u__tracks',
        'sandbox//stg_segment_docs__pages',
        'sandbox//stg_segment_web__hubspot_form_submit',
        'sandbox//stg_segment_web__identifies',
        'sandbox//stg_segment_web__pages',
        'sandbox//stg_slack__member_metrics',
        'sandbox//stg_snapshot__hubspot_company',
        'sandbox//stg_snapshot__salesforce_account',
        'sandbox//stg_snapshot__salesforce_opportunities',
        'sandbox//stg_stripe__balance_transactions',
        'sandbox//stg_stripe__charges',
        'sandbox//stg_stripe__customers',
        'sandbox//stg_stripe__invoice_line_items',
        'sandbox//stg_stripe__invoices',
        'sandbox//stg_stripe__plans',
        'sandbox//stg_stripe__subscription_items',
        'sandbox//stg_stripe__subscription_schedule_phases',
        'sandbox//stg_stripe__subscription_schedules',
        'sandbox//stg_stripe__subscriptions',
        'sandbox//stg_stripe__subscriptions_metadata',
        'sandbox//stg_telemetry__events',
        'sandbox//stg_thinkific__course_reviews',
        'sandbox//stg_thinkific__courses',
        'sandbox//stg_thinkific__enrollments',
        'sandbox//stg_thinkific__users',
        'sandbox//stg_youtube__channel',
        'sandbox//stg_youtube__channel_combined',
        'sandbox//stg_youtube__playlist',
        'sandbox//stg_youtube__playlist_combined',
        'sandbox//stg_youtube__video',
        'sandbox//stg_zoom__webinar',
        'sandbox//stg_zoom__webinar_absentee',
        'sandbox//stg_zoom__webinar_participant',
        'sandbox//stg_zoom__webinar_registrant',
        'sandbox//stripe_customers',
        'sandbox//stripe_invoices',
        'sandbox//stripe_subscriptions',
        'sandbox//sync_hubspot_company',
        'sandbox//sync_hubspot_contact',
        'sandbox//sync_hubspot_organization',
        'sandbox//sync_salesforce_account',
        'sandbox//telemetry_events',
        'sandbox//telemetry_example_map',
        'sandbox//time_spine',
        'sandbox//title_mappings',
        'sandbox//usage_metrics_daily',
        'sandbox//usage_metrics_daily_jobs_aggregated',
        'sandbox//user_activity_daily',
        'sandbox//user_attribution',
        'sandbox//user_attribution_dagster_u',
        'sandbox//user_organizations',
        'sandbox//web_attributed_conversions',
        'sandbox//website_visits_cloud',
        'sandbox//website_visits_dagster_university',
        'sandbox//website_visits_docs',
        'sandbox//website_visits_marketing',
        'sandbox//youtube_device_types',
        'sandbox//youtube_operating_system',
        'sandbox//youtube_playback_location_type',
        'sandbox//youtube_playlists',
        'sandbox//youtube_traffic_codes',
        'sandbox//youtube_video_views_overtime',
        'sandbox//youtube_videos',
        'sandbox//zoom_registrants',
        'sandbox//zoom_webinars',
        'sandbox/snapshots/arr_by_month_daily_snapshot',
        'sandbox/snapshots/deployments_snapshot',
        'sandbox/snapshots/hubspot_company_daily_snapshot',
        'sandbox/snapshots/hubspot_contact_daily_snapshot',
        'sandbox/snapshots/organizations_snapshot',
        'sandbox/snapshots/salesforce_accounts_daily_snapshot',
        'sandbox/snapshots/salesforce_opportunities_daily_snapshot',
        'sandbox/snapshots/user_organizations_snapshot',
        'scoutos_app_runs',
        'segment/dagster_cloud/accounts',
        'segment/dagster_cloud/identifies',
        'segment/dagster_cloud/pages',
        'segment/dagster_cloud/tracks',
        'segment/dagster_cloud/trial_start',
        'segment/dagster_cloud/users',
        'segment/dagster_docs/pages',
        'segment/dagster_io/hubspot_form_submit',
        'segment/dagster_io/identifies',
        'segment/dagster_io/pages',
        'segment/dagster_university/certificate_record_downloaded',
        'segment/dagster_university/course_landing_page',
        'segment/dagster_university/identifies',
        'segment/dagster_university/pages',
        'segment/dagster_university/quiz_start_page',
        'segment/dagster_university/signup',
        'segment/dagster_university/tracks',
        'segment/dagster_university/users',
        'segment/dagster_university/viewed_iframe',
        'shard1/public/alert_policies',
        'shard1/public/alerts',
        'shard1/public/asset_keys',
        'shard1/public/asset_materializations',
        'shard1/public/asset_observations',
        'shard1/public/event_logs_partitioned',
        'shard1/public/event_logs_view',
        'shard1/public/jobs',
        'shard1/public/notifications',
        'shard1/public/repository_locations_data',
        'shard1/public/run_tags',
        'shard1/public/runs',
        'slack/dagster/member_metrics',
        'sling/cloud_product/alert_policies',
        'sling/cloud_product/alerts',
        'sling/cloud_product/alerts_alert_policies_new',
        'sling/cloud_product/asset_keys',
        'sling/cloud_product/asset_materializations',
        'sling/cloud_product/asset_observations',
        'sling/cloud_product/catalog_views',
        'sling/cloud_product/customer_info',
        'sling/cloud_product/deployments',
        'sling/cloud_product/event_logs',
        'sling/cloud_product/jobs',
        'sling/cloud_product/notifications',
        'sling/cloud_product/onboarding_checklist',
        'sling/cloud_product/organizations',
        'sling/cloud_product/permissions',
        'sling/cloud_product/repository_locations_data',
        'sling/cloud_product/run_tags',
        'sling/cloud_product/runs',
        'sling/cloud_product/serverless_agents',
        'sling/cloud_product/session_tokens',
        'sling/cloud_product/teams',
        'sling/cloud_product/teams_permissions',
        'sling/cloud_product/teams_users',
        'sling/cloud_product/user_events_counts',
        'sling/cloud_product/users',
        'sling/cloud_product/users_organizations',
        'sling/cloud_product/users_organizations_current_state_ids',
        'sling/cloud_product/users_permissions',
        'sling/cloud_product_shard1/alert_policies',
        'sling/cloud_product_shard1/alerts',
        'sling/cloud_product_shard1/asset_keys',
        'sling/cloud_product_shard1/asset_materializations',
        'sling/cloud_product_shard1/asset_observations',
        'sling/cloud_product_shard1/event_logs',
        'sling/cloud_product_shard1/jobs',
        'sling/cloud_product_shard1/notifications',
        'sling/cloud_product_shard1/repository_locations_data',
        'sling/cloud_product_shard1/run_tags',
        'sling/cloud_product_shard1/runs',
        'sling/cloud_product_shard1/user_events_counts',
        'stripe_pipeline/stripe/balance_transactions',
        'stripe_pipeline/stripe/charges',
        'stripe_pipeline/stripe/coupons',
        'stripe_pipeline/stripe/customers',
        'stripe_pipeline/stripe/invoice_line_items',
        'stripe_pipeline/stripe/invoices',
        'stripe_pipeline/stripe/plans',
        'stripe_pipeline/stripe/subscription_items',
        'stripe_pipeline/stripe/subscription_schedule_phases',
        'stripe_pipeline/stripe/subscription_schedules',
        'stripe_pipeline/stripe/subscriptions',
        'stripe_pipeline/stripe/subscriptions_metadata',
        'thinkific_courses',
        'thinkific_enrollments',
        'thinkific_users',
        'user_activity_metrics',
      ]),
      'name': '__ASSET_JOB',
    }),
    dict({
      'asset_selection': list([
        'hightouch_cloud_users',
        'hightouch_null_contact_names',
        'hightouch_org_activity_monthly',
        'hightouch_sales_cycles',
        'hightouch_sync_hubspot_contact',
        'hightouch_sync_salesforce_account',
        'hightouch_user_attribution',
        'sandbox//abm_contact_intent_scores',
        'sandbox//accounts',
        'sandbox//cloud_product_customer_info',
        'sandbox//cloud_users',
        'sandbox//credit_utilization',
        'sandbox//credit_utilization_forecast',
        'sandbox//dagster_user_roles',
        'sandbox//dim_organizations',
        'sandbox//gtm_user_lead_source',
        'sandbox//hubspot_contacts',
        'sandbox//org_activity_monthly',
        'sandbox//org_deployments_daily',
        'sandbox//product_engagement',
        'sandbox//sales_cycles',
        'sandbox//salesforce_account_history',
        'sandbox//salesforce_accounts',
        'sandbox//salesforce_contacts',
        'sandbox//salesforce_events',
        'sandbox//salesforce_opportunities',
        'sandbox//salesforce_organizations',
        'sandbox//salesforce_tasks',
        'sandbox//stg_cloud_product__deployments',
        'sandbox//stg_cloud_product__session_tokens',
        'sandbox//stg_cloud_product__user_organizations',
        'sandbox//stg_cloud_product__users',
        'sandbox//stg_salesforce__contacts',
        'sandbox//stg_segment_cloud__pages',
        'sandbox//stg_segment_cloud__tracks',
        'sandbox//stg_stripe__subscriptions',
        'sandbox//stripe_invoices',
        'sandbox//stripe_subscriptions',
        'sandbox//sync_hubspot_contact',
        'sandbox//sync_salesforce_account',
        'sandbox//usage_metrics_daily',
        'sandbox//user_attribution',
        'sandbox//user_organizations',
        'sandbox//web_attributed_conversions',
        'sling/cloud_product/users',
      ]),
      'name': '__anonymous_asset_job_hightouch_syncs_schedule',
    }),
    dict({
      'asset_selection': list([
        '/staging/asset_checks',
        '/staging/assets',
        '/staging/external_repo_metadata',
        '/staging/jobs',
        '/staging/metadata',
        '/staging/partitions',
        '/staging/pipelines',
        '/staging/repo_metadata',
        '/staging/resources',
        '/staging/schedules',
        '/staging/sensors',
      ]),
      'name': 'aws_replication_job',
    }),
    dict({
      'asset_selection': list([
      ]),
      'name': 'clone_databases',
    }),
    dict({
      'asset_selection': list([
        'inactive_snowflake_clones',
      ]),
      'name': 'database_clone_cleanup_job',
    }),
    dict({
      'asset_selection': list([
        'aws/dev/ext_common_room_activities',
        'aws/dev/ext_common_room_community_members',
        'aws/dev/ext_common_room_groups',
        'aws/dev/user_roles_ext',
        'aws/dev/workspace_staging_asset_checks_ext',
        'aws/dev/workspace_staging_assets_ext',
        'aws/dev/workspace_staging_external_repo_metadata_ext',
        'aws/dev/workspace_staging_jobs_ext',
        'aws/dev/workspace_staging_metadata_ext',
        'aws/dev/workspace_staging_partitions_ext',
        'aws/dev/workspace_staging_pipelines_ext',
        'aws/dev/workspace_staging_repo_metadata_ext',
        'aws/dev/workspace_staging_resources_ext',
        'aws/dev/workspace_staging_schedules_ext',
        'aws/dev/workspace_staging_sensors_ext',
        'aws/oss_telemetry/oss_telemetry_prod',
        'aws/oss_telemetry/oss_telemetry_prod_ext',
        'dlt/hubspot/companies',
        'dlt_pipelines_builds',
        'dlt_thinkific_course_reviews',
        'dlt_thinkific_courses',
        'dlt_thinkific_enrollments',
        'dlt_thinkific_users',
        'fivetran/bingads/account_history',
        'fivetran/bingads/ad_group_history',
        'fivetran/bingads/ad_group_performance_daily_report',
        'fivetran/bingads/ad_history',
        'fivetran/bingads/asset_group_attribute_history',
        'fivetran/bingads/asset_group_history',
        'fivetran/bingads/campaign_history',
        'fivetran/bingads/product_dimension_impression_performance_max_daily_report',
        'fivetran/bingads/product_dimension_impression_performance_max_hourly_report',
        'fivetran/bingads/product_dimension_performance_max_daily_report',
        'fivetran/bingads/product_dimension_performance_max_hourly_report',
        'fivetran/google_ads/account_stats',
        'fivetran/google_ads/ad_custom_parameter_history',
        'fivetran/google_ads/ad_group_bid_modifier_history',
        'fivetran/google_ads/ad_group_bidding_strategy_history',
        'fivetran/google_ads/ad_group_custom_parameter_history',
        'fivetran/google_ads/ad_group_history',
        'fivetran/google_ads/ad_group_label_history',
        'fivetran/google_ads/ad_group_stats',
        'fivetran/google_ads/ad_history',
        'fivetran/google_ads/ad_label_history',
        'fivetran/google_ads/ad_policy_topic_constraint_history',
        'fivetran/google_ads/ad_policy_topic_evidence_history',
        'fivetran/google_ads/ad_policy_topic_history',
        'fivetran/google_ads/ad_stats',
        'fivetran/google_ads/app_ad_history',
        'fivetran/google_ads/app_engagement_ad_history',
        'fivetran/google_ads/call_ad_history',
        'fivetran/google_ads/campaign_app_campaign_setting_history',
        'fivetran/google_ads/campaign_bid_modifier_history',
        'fivetran/google_ads/campaign_bidding_strategy_history',
        'fivetran/google_ads/campaign_budget_history',
        'fivetran/google_ads/campaign_dynamic_search_ads_setting_history',
        'fivetran/google_ads/campaign_geo_target_type_setting_history',
        'fivetran/google_ads/campaign_history',
        'fivetran/google_ads/campaign_hotel_setting_history',
        'fivetran/google_ads/campaign_label_history',
        'fivetran/google_ads/campaign_local_setting_history',
        'fivetran/google_ads/campaign_network_setting_history',
        'fivetran/google_ads/campaign_optimization_goal_setting_history',
        'fivetran/google_ads/campaign_real_time_bidding_setting_history',
        'fivetran/google_ads/campaign_shopping_setting_history',
        'fivetran/google_ads/campaign_stats',
        'fivetran/google_ads/campaign_targeting_setting_history',
        'fivetran/google_ads/campaign_tracking_setting_history',
        'fivetran/google_ads/demand_gen_carousel_ad_history',
        'fivetran/google_ads/demand_gen_multi_asset_ad_history',
        'fivetran/google_ads/demand_gen_product_ad_history',
        'fivetran/google_ads/display_upload_ad_history',
        'fivetran/google_ads/expanded_dynamic_search_ad_history',
        'fivetran/google_ads/expanded_text_ad_history',
        'fivetran/google_ads/hotel_ad_history',
        'fivetran/google_ads/image_ad_history',
        'fivetran/google_ads/lead_form_submission_data',
        'fivetran/google_ads/legacy_app_install_ad_history',
        'fivetran/google_ads/legacy_responsive_display_ad_history',
        'fivetran/google_ads/local_ad_history',
        'fivetran/google_ads/local_services_lead',
        'fivetran/google_ads/local_services_lead_conversations',
        'fivetran/google_ads/responsive_display_ad_history',
        'fivetran/google_ads/responsive_search_ad_history',
        'fivetran/google_ads/search_keyword_stats',
        'fivetran/google_ads/search_term_keyword_stats',
        'fivetran/google_ads/search_term_stats',
        'fivetran/google_ads/shopping_comparison_listing_ad_history',
        'fivetran/google_ads/shopping_product_ad_history',
        'fivetran/google_ads/shopping_smart_ad_history',
        'fivetran/google_ads/smart_campaign_ad_history',
        'fivetran/google_ads/text_ad_history',
        'fivetran/google_ads/video_ad_history',
        'fivetran/google_ads/video_responsive_ad_history',
        'fivetran/google_analytics_4/pages_path_report',
        'fivetran/google_analytics_4/pages_title_and_screen_class_report',
        'fivetran/google_analytics_4/properties',
        'fivetran/google_analytics_4/traffic_acquisition_session_default_channel_grouping_report',
        'fivetran/google_analytics_4/traffic_acquisition_session_source_medium_report',
        'fivetran/google_sheets/nb_sales_rep_quotas',
        'fivetran/google_sheets/sales_rep_quotas',
        'fivetran/hubspot/association_type',
        'fivetran/hubspot/company',
        'fivetran/hubspot/company_company',
        'fivetran/hubspot/contact',
        'fivetran/hubspot/contact_company',
        'fivetran/hubspot/contact_contact',
        'fivetran/hubspot/contact_form_submission',
        'fivetran/hubspot/form',
        'fivetran/hubspot/organizations',
        'fivetran/hubspot/organizations_to_company',
        'fivetran/hubspot/users',
        'fivetran/information_schema/columns',
        'fivetran/linkedin_ads/account_history',
        'fivetran/linkedin_ads/account_user_history',
        'fivetran/linkedin_ads/ad_analytics_by_campaign',
        'fivetran/linkedin_ads/ad_analytics_by_creative',
        'fivetran/linkedin_ads/campaign_group_history',
        'fivetran/linkedin_ads/campaign_history',
        'fivetran/linkedin_ads/creative_history',
        'fivetran/linkedin_ads/lead_form_response_multiple_choice_answers',
        'fivetran/linkedin_ads/sponsored_message_option',
        'fivetran/outreach/account',
        'fivetran/outreach/account_tag',
        'fivetran/outreach/active_step_mailing',
        'fivetran/outreach/active_step_task',
        'fivetran/outreach/data_connection',
        'fivetran/outreach/duty',
        'fivetran/outreach/email_address',
        'fivetran/outreach/event',
        'fivetran/outreach/mailing',
        'fivetran/outreach/mailing_recipient',
        'fivetran/outreach/mailing_reference',
        'fivetran/outreach/prospect',
        'fivetran/outreach/prospect_email',
        'fivetran/outreach/prospect_favorite',
        'fivetran/outreach/prospect_home_phone',
        'fivetran/outreach/prospect_mobile_phone',
        'fivetran/outreach/prospect_other_phone',
        'fivetran/outreach/prospect_tag',
        'fivetran/outreach/prospect_voip_phone',
        'fivetran/outreach/prospect_work_phone',
        'fivetran/outreach/sequence',
        'fivetran/outreach/sequence_state',
        'fivetran/outreach/sequence_step',
        'fivetran/outreach/sequence_tag',
        'fivetran/outreach/sequence_template',
        'fivetran/outreach/user_duty',
        'fivetran/outreach/user_email_recipients',
        'fivetran/outreach/user_team',
        'fivetran/outreach/users',
        'fivetran/reddit_ads/account_conversions_report',
        'fivetran/reddit_ads/account_report',
        'fivetran/reddit_ads/ad',
        'fivetran/reddit_ads/ad_conversions_report',
        'fivetran/reddit_ads/ad_group',
        'fivetran/reddit_ads/ad_group_conversions_report',
        'fivetran/reddit_ads/ad_group_report',
        'fivetran/reddit_ads/ad_report',
        'fivetran/reddit_ads/campaign',
        'fivetran/reddit_ads/campaign_report',
        'fivetran/reddit_ads/click_tracker',
        'fivetran/reddit_ads/pixel_partner_reference',
        'fivetran/reddit_ads/schedule',
        'fivetran/salesforce/account',
        'fivetran/salesforce/account_history',
        'fivetran/salesforce/account_ownership_c',
        'fivetran/salesforce/campaign',
        'fivetran/salesforce/campaign_member',
        'fivetran/salesforce/contact',
        'fivetran/salesforce/contract',
        'fivetran/salesforce/event',
        'fivetran/salesforce/leadfeederapp_website_visit_c',
        'fivetran/salesforce/opportunity',
        'fivetran/salesforce/opportunity_field_history',
        'fivetran/salesforce/opportunity_history',
        'fivetran/salesforce/opportunity_line_item',
        'fivetran/salesforce/organization_c',
        'fivetran/salesforce/partner',
        'fivetran/salesforce/product_2',
        'fivetran/salesforce/sales_cycle_c',
        'fivetran/salesforce/task',
        'fivetran/salesforce/user',
        'fivetran/salesforce/user_role',
        'fivetran/youtube_analytics/channel',
        'fivetran/youtube_analytics/channel_combined_a_2',
        'fivetran/youtube_analytics/playlist',
        'fivetran/youtube_analytics/playlist_combined_a_1',
        'fivetran/youtube_analytics/video',
        'fivetran/zoom/channel',
        'fivetran/zoom/meeting',
        'fivetran/zoom/meeting_participant',
        'fivetran/zoom/meeting_report',
        'fivetran/zoom/meeting_report_custom_key',
        'fivetran/zoom/meeting_report_tracking',
        'fivetran/zoom/user_custom_attribute',
        'fivetran/zoom/user_group',
        'fivetran/zoom/user_im_group',
        'fivetran/zoom/users',
        'fivetran/zoom/webinar',
        'fivetran/zoom/webinar_absentee',
        'fivetran/zoom/webinar_panelist',
        'fivetran/zoom/webinar_participant',
        'fivetran/zoom/webinar_poll',
        'fivetran/zoom/webinar_poll_question',
        'fivetran/zoom/webinar_poll_question_answer',
        'fivetran/zoom/webinar_poll_question_prompt',
        'fivetran/zoom/webinar_question_and_answer',
        'fivetran/zoom/webinar_question_and_answer_question',
        'fivetran/zoom/webinar_question_and_answer_question_detail',
        'fivetran/zoom/webinar_registrant',
        'fivetran/zoom/webinar_registrant_custom_question',
        'fivetran/zoom/webinar_report',
        'fivetran/zoom/webinar_report_custom_key',
        'fivetran/zoom/webinar_report_tracking',
        'fivetran/zoom/webinar_tracking_source',
        'gong/gong_data_cloud/conversation_contexts',
        'gong/gong_data_cloud/conversation_participants',
        'gong/gong_data_cloud/conversations',
        'gong/gong_data_cloud/emails',
        'gong/gong_data_cloud/meetings',
        'gong/gong_data_cloud/users',
        'hubspot_companies',
        'main/public/alert_policies',
        'main/public/alerts',
        'main/public/alerts_alert_policies_new',
        'main/public/asset_keys',
        'main/public/asset_materializations',
        'main/public/asset_observations',
        'main/public/catalog_views',
        'main/public/customer_info',
        'main/public/deployments',
        'main/public/event_logs_partitioned',
        'main/public/event_logs_view',
        'main/public/jobs',
        'main/public/notifications',
        'main/public/onboarding_checklist',
        'main/public/organizations',
        'main/public/permissions',
        'main/public/repository_locations_data',
        'main/public/run_tags',
        'main/public/runs',
        'main/public/serverless_agents',
        'main/public/session_tokens',
        'main/public/teams',
        'main/public/teams_permissions',
        'main/public/teams_users',
        'main/public/users',
        'main/public/users_organizations',
        'main/public/users_permissions',
        'pipelines_builds',
        'product_operations/insights/reporting_asset_materialization_metrics',
        'purina/oss_analytics/dagster_pypi_downloads',
        'pylon/pylon/pylon_issues',
        'sandbox//abm_activity_scoring',
        'sandbox//abm_company_activity',
        'sandbox//abm_company_intent_scores',
        'sandbox//abm_contact_activity',
        'sandbox//abm_contact_intent_scores',
        'sandbox//account_contract_activity',
        'sandbox//account_owner_changelog',
        'sandbox//account_source_changelog',
        'sandbox//accounts',
        'sandbox//accounts_by_day',
        'sandbox//ad_spend_by_day',
        'sandbox//adgroup_performance_by_date',
        'sandbox//arr_by_month',
        'sandbox//asset_check_executions',
        'sandbox//asset_event_metadata',
        'sandbox//asset_groups',
        'sandbox//attributed_conversions',
        'sandbox//base_graph_metrics',
        'sandbox//base_sales_cycles',
        'sandbox//base_step_metrics',
        'sandbox//bigquery_cost_metadata',
        'sandbox//bing_ad_group_stats',
        'sandbox//buildkite_builds',
        'sandbox//campaigns',
        'sandbox//cloud_product_alert_policies',
        'sandbox//cloud_product_alerts',
        'sandbox//cloud_product_asset_keys',
        'sandbox//cloud_product_asset_materializations',
        'sandbox//cloud_product_asset_observations',
        'sandbox//cloud_product_catalog_views',
        'sandbox//cloud_product_customer_info',
        'sandbox//cloud_product_deployments',
        'sandbox//cloud_product_event_logs',
        'sandbox//cloud_product_jobs',
        'sandbox//cloud_product_notifications',
        'sandbox//cloud_product_organizations',
        'sandbox//cloud_product_repository_locations_data',
        'sandbox//cloud_product_runs',
        'sandbox//cloud_product_session_tokens',
        'sandbox//cloud_product_teams_users',
        'sandbox//cloud_product_user_events_counts',
        'sandbox//cloud_product_user_organizations',
        'sandbox//cloud_product_user_roles',
        'sandbox//cloud_product_users',
        'sandbox//cloud_users',
        'sandbox//code_location_asset_checks',
        'sandbox//code_location_assets',
        'sandbox//code_location_external_repo_metadata',
        'sandbox//code_location_jobs',
        'sandbox//code_location_library_versions',
        'sandbox//code_location_metadata',
        'sandbox//code_location_partitions',
        'sandbox//code_location_pipelines',
        'sandbox//code_location_repo_metadata',
        'sandbox//code_location_resources',
        'sandbox//code_location_schedules',
        'sandbox//code_location_sensors',
        'sandbox//common_room_activities',
        'sandbox//common_room_community_members',
        'sandbox//common_room_groups',
        'sandbox//contacts',
        'sandbox//conversion_events',
        'sandbox//country_codes',
        'sandbox//credit_utilization',
        'sandbox//credit_utilization_forecast',
        'sandbox//current_credit_utilization',
        'sandbox//dagster_user_roles',
        'sandbox//deployment_insights_usage_daily',
        'sandbox//dim_accounts',
        'sandbox//dim_accounts_by_day',
        'sandbox//dim_campaigns',
        'sandbox//dim_contacts',
        'sandbox//dim_opportunities',
        'sandbox//dim_opportunities_by_day',
        'sandbox//dim_organizations',
        'sandbox//dim_segment_users',
        'sandbox//dim_users',
        'sandbox//education_course_reviews',
        'sandbox//education_courses',
        'sandbox//education_enrollments',
        'sandbox//education_users',
        'sandbox//education_web_attributed_conversions',
        'sandbox//event_score_mapping',
        'sandbox//excludable_email_domains',
        'sandbox//execution_time_metadata',
        'sandbox//fct_gong_meeting_participants',
        'sandbox//fct_gong_meetings',
        'sandbox//fct_outreach_mailings',
        'sandbox//fct_runs',
        'sandbox//fct_segment_cloud_page_visits',
        'sandbox//fct_segment_dagster_u_page_visits',
        'sandbox//fct_segment_docs_page_visits',
        'sandbox//fct_segment_web_page_visits',
        'sandbox//fct_steps',
        'sandbox//fct_zoom_webinar_registration',
        'sandbox//first_touch',
        'sandbox//first_user_web_session',
        'sandbox//form_fill_attribution',
        'sandbox//gong_conversation_participants',
        'sandbox//gong_conversations',
        'sandbox//gong_emails',
        'sandbox//gong_meetings',
        'sandbox//gong_users',
        'sandbox//google_ads_ad_group_stats',
        'sandbox//google_ads_ad_groups',
        'sandbox//google_ads_adgroup_stats',
        'sandbox//google_ads_campaign_stats',
        'sandbox//google_ads_campaigns',
        'sandbox//google_ads_campaigns_wo_ad_group_stats',
        'sandbox//google_analytics_page_report',
        'sandbox//google_analytics_traffic_session_default_group',
        'sandbox//google_analytics_traffic_session_source_medium_report',
        'sandbox//gtm_user_activity',
        'sandbox//gtm_user_attribution',
        'sandbox//gtm_user_lead_source',
        'sandbox//gtm_user_mappings',
        'sandbox//hubspot_companies',
        'sandbox//hubspot_contact_form_submissions',
        'sandbox//hubspot_contacts',
        'sandbox//hubspot_organizations',
        'sandbox//hubspot_source_drill_level_2_labels',
        'sandbox//insights_asset_materialization_metrics',
        'sandbox//instance_type_priority',
        'sandbox//int_sessionized_pageviews',
        'sandbox//int_sessions_aggregated',
        'sandbox//int_stripe_customer_invoices',
        'sandbox//int_users_stitched',
        'sandbox//linkedin_ads_daily_campaign',
        'sandbox//maps_alerts',
        'sandbox//maps_organizations',
        'sandbox//marketing_event_attendees',
        'sandbox//marketing_events',
        'sandbox//marketing_wbr_metrics_by_date',
        'sandbox//materialization_metadata',
        'sandbox//non_opportunity_stages',
        'sandbox//onboarding_events',
        'sandbox//opportunities',
        'sandbox//opportunities_by_campaign',
        'sandbox//opportunities_by_day',
        'sandbox//opportunity_fiscal_qtr_start_snapshots',
        'sandbox//opportunity_snapshots',
        'sandbox//opportunity_stages',
        'sandbox//opportunity_yield',
        'sandbox//org_activity_monthly',
        'sandbox//org_deployments_daily',
        'sandbox//org_info',
        'sandbox//organization_adoption_daily',
        'sandbox//organization_conversion_info',
        'sandbox//organization_library_versions',
        'sandbox//organization_library_versions_daily',
        'sandbox//organization_milestones',
        'sandbox//organization_usage_daily',
        'sandbox//organizations',
        'sandbox//organizations_by_day',
        'sandbox//oss_instance_events_daily',
        'sandbox//oss_instance_events_weekly',
        'sandbox//oss_instances_daily',
        'sandbox//outreach_accounts',
        'sandbox//outreach_events',
        'sandbox//outreach_mailings',
        'sandbox//outreach_prospects',
        'sandbox//outreach_sequences',
        'sandbox//product_engagement',
        'sandbox//pylon_issues',
        'sandbox//pypi_downloads_weekly',
        'sandbox//reddit_ads_ad_group_report',
        'sandbox//reddit_ads_ad_groups',
        'sandbox//reddit_ads_campaign_report',
        'sandbox//reddit_ads_campaigns',
        'sandbox//referrer_mapping',
        'sandbox//reporting_contract_info',
        'sandbox//sales_activities',
        'sandbox//sales_cycle_stage_activities',
        'sandbox//sales_cycle_stages',
        'sandbox//sales_cycles',
        'sandbox//salesforce_account_history',
        'sandbox//salesforce_accounts',
        'sandbox//salesforce_campaign_members',
        'sandbox//salesforce_campaigns',
        'sandbox//salesforce_contacts',
        'sandbox//salesforce_contracts',
        'sandbox//salesforce_events',
        'sandbox//salesforce_leaderfeeder_sessions',
        'sandbox//salesforce_opp_stage_mapping',
        'sandbox//salesforce_opportunities',
        'sandbox//salesforce_opportunity_history',
        'sandbox//salesforce_opportunity_line_item',
        'sandbox//salesforce_organizations',
        'sandbox//salesforce_partners',
        'sandbox//salesforce_tasks',
        'sandbox//salesforce_users',
        'sandbox//segment_cloud_identifies',
        'sandbox//segment_cloud_pages',
        'sandbox//segment_cloud_tracks',
        'sandbox//segment_cloud_users',
        'sandbox//segment_dagster_u_identifies',
        'sandbox//segment_dagster_u_pages',
        'sandbox//segment_dagster_u_sessions',
        'sandbox//segment_dagster_u_tracks',
        'sandbox//segment_dagster_u_users',
        'sandbox//segment_docs_pages',
        'sandbox//segment_web_hubspot_form_submits',
        'sandbox//segment_web_identifies',
        'sandbox//segment_web_pages',
        'sandbox//segment_web_sessions',
        'sandbox//self_serve_plan_type_monthly',
        'sandbox//self_serve_stripe_products',
        'sandbox//snapshot_hubspot_companies',
        'sandbox//snapshot_salesforce_accounts',
        'sandbox//snapshot_salesforce_opportunities',
        'sandbox//snowflake_cost_observation_metadata',
        'sandbox//statsig_user_activity_daily',
        'sandbox//stg_aws__code_location_asset_checks',
        'sandbox//stg_aws__code_location_assets',
        'sandbox//stg_aws__code_location_external_repo_metadata',
        'sandbox//stg_aws__code_location_jobs',
        'sandbox//stg_aws__code_location_metadata',
        'sandbox//stg_aws__code_location_partitions',
        'sandbox//stg_aws__code_location_pipelines',
        'sandbox//stg_aws__code_location_repo_metadata',
        'sandbox//stg_aws__code_location_resources',
        'sandbox//stg_aws__code_location_schedules',
        'sandbox//stg_aws__code_location_sensors',
        'sandbox//stg_aws__common_room_activities',
        'sandbox//stg_aws__common_room_community_members',
        'sandbox//stg_aws__common_room_groups',
        'sandbox//stg_aws__user_licensed_roles',
        'sandbox//stg_bing__ad_group_history',
        'sandbox//stg_bing__ad_group_performance_daily_report',
        'sandbox//stg_bing__campaign_history',
        'sandbox//stg_buildkite__builds',
        'sandbox//stg_cloud_product__alert_policies',
        'sandbox//stg_cloud_product__alerts',
        'sandbox//stg_cloud_product__alerts_alert_policies',
        'sandbox//stg_cloud_product__asset_keys',
        'sandbox//stg_cloud_product__asset_materializations',
        'sandbox//stg_cloud_product__asset_observations',
        'sandbox//stg_cloud_product__catalog_views',
        'sandbox//stg_cloud_product__customer_info',
        'sandbox//stg_cloud_product__deployments',
        'sandbox//stg_cloud_product__event_logs',
        'sandbox//stg_cloud_product__jobs',
        'sandbox//stg_cloud_product__notifications',
        'sandbox//stg_cloud_product__onboarding_checklist',
        'sandbox//stg_cloud_product__organizations',
        'sandbox//stg_cloud_product__permissions',
        'sandbox//stg_cloud_product__repository_locations_data',
        'sandbox//stg_cloud_product__run_tags',
        'sandbox//stg_cloud_product__runs',
        'sandbox//stg_cloud_product__session_tokens',
        'sandbox//stg_cloud_product__teams',
        'sandbox//stg_cloud_product__teams_permissions',
        'sandbox//stg_cloud_product__teams_users',
        'sandbox//stg_cloud_product__user_events_counts',
        'sandbox//stg_cloud_product__user_organizations',
        'sandbox//stg_cloud_product__users',
        'sandbox//stg_cloud_product__users_permissions',
        'sandbox//stg_gong__conversation_contexts',
        'sandbox//stg_gong__conversation_participants',
        'sandbox//stg_gong__conversations',
        'sandbox//stg_gong__emails',
        'sandbox//stg_gong__meetings',
        'sandbox//stg_gong__users',
        'sandbox//stg_google_ads__ad_group_stats',
        'sandbox//stg_google_ads__ad_groups',
        'sandbox//stg_google_ads__campaign_stats',
        'sandbox//stg_google_ads__campaigns',
        'sandbox//stg_google_analytics__page_report',
        'sandbox//stg_google_analytics__session_source_medium',
        'sandbox//stg_google_analytics__traffic_default_group',
        'sandbox//stg_google_sheets__nb_sales_rep_quotas',
        'sandbox//stg_google_sheets__sales_rep_quotas',
        'sandbox//stg_hubspot__company',
        'sandbox//stg_hubspot__contact_first_touch',
        'sandbox//stg_hubspot__contact_form_submissions',
        'sandbox//stg_hubspot__contact_lifecycle_changes',
        'sandbox//stg_hubspot__contact_web_touches',
        'sandbox//stg_hubspot__contacts',
        'sandbox//stg_hubspot__forms',
        'sandbox//stg_hubspot__organization',
        'sandbox//stg_insights__asset_materialization_metrics',
        'sandbox//stg_linkedin__ad_analytics_by_campaign',
        'sandbox//stg_linkedin__campaign_history',
        'sandbox//stg_outreach__account',
        'sandbox//stg_outreach__data_connection',
        'sandbox//stg_outreach__email_address',
        'sandbox//stg_outreach__event',
        'sandbox//stg_outreach__mailing',
        'sandbox//stg_outreach__prospect',
        'sandbox//stg_outreach__sequence',
        'sandbox//stg_pylon__pylon_issues',
        'sandbox//stg_pypi__weekly_downloads',
        'sandbox//stg_reddit_ads__ad_group',
        'sandbox//stg_reddit_ads__ad_group_report',
        'sandbox//stg_reddit_ads__campaign',
        'sandbox//stg_reddit_ads__campaign_report',
        'sandbox//stg_salesforce__account_history',
        'sandbox//stg_salesforce__accounts',
        'sandbox//stg_salesforce__campaign_members',
        'sandbox//stg_salesforce__campaigns',
        'sandbox//stg_salesforce__contacts',
        'sandbox//stg_salesforce__contracts',
        'sandbox//stg_salesforce__events',
        'sandbox//stg_salesforce__leadfeederapp_website_visit_c',
        'sandbox//stg_salesforce__opportunities',
        'sandbox//stg_salesforce__opportunity_history',
        'sandbox//stg_salesforce__opportunity_line_item',
        'sandbox//stg_salesforce__organizations',
        'sandbox//stg_salesforce__partners',
        'sandbox//stg_salesforce__product2',
        'sandbox//stg_salesforce__tasks',
        'sandbox//stg_salesforce__user_roles',
        'sandbox//stg_salesforce__users',
        'sandbox//stg_scout__queries',
        'sandbox//stg_segment_cloud__identifies',
        'sandbox//stg_segment_cloud__pages',
        'sandbox//stg_segment_cloud__tracks',
        'sandbox//stg_segment_cloud__trial_start',
        'sandbox//stg_segment_dagster_u__certificate_record_downloaded',
        'sandbox//stg_segment_dagster_u__course_landing_page',
        'sandbox//stg_segment_dagster_u__identifies',
        'sandbox//stg_segment_dagster_u__pages',
        'sandbox//stg_segment_dagster_u__quiz_start_page',
        'sandbox//stg_segment_dagster_u__signup',
        'sandbox//stg_segment_dagster_u__tracks',
        'sandbox//stg_segment_docs__pages',
        'sandbox//stg_segment_web__hubspot_form_submit',
        'sandbox//stg_segment_web__identifies',
        'sandbox//stg_segment_web__pages',
        'sandbox//stg_slack__member_metrics',
        'sandbox//stg_snapshot__hubspot_company',
        'sandbox//stg_snapshot__salesforce_account',
        'sandbox//stg_snapshot__salesforce_opportunities',
        'sandbox//stg_stripe__balance_transactions',
        'sandbox//stg_stripe__charges',
        'sandbox//stg_stripe__customers',
        'sandbox//stg_stripe__invoice_line_items',
        'sandbox//stg_stripe__invoices',
        'sandbox//stg_stripe__plans',
        'sandbox//stg_stripe__subscription_items',
        'sandbox//stg_stripe__subscription_schedule_phases',
        'sandbox//stg_stripe__subscription_schedules',
        'sandbox//stg_stripe__subscriptions',
        'sandbox//stg_stripe__subscriptions_metadata',
        'sandbox//stg_telemetry__events',
        'sandbox//stg_thinkific__course_reviews',
        'sandbox//stg_thinkific__courses',
        'sandbox//stg_thinkific__enrollments',
        'sandbox//stg_thinkific__users',
        'sandbox//stg_youtube__channel',
        'sandbox//stg_youtube__channel_combined',
        'sandbox//stg_youtube__playlist',
        'sandbox//stg_youtube__playlist_combined',
        'sandbox//stg_youtube__video',
        'sandbox//stg_zoom__webinar',
        'sandbox//stg_zoom__webinar_absentee',
        'sandbox//stg_zoom__webinar_participant',
        'sandbox//stg_zoom__webinar_registrant',
        'sandbox//stripe_customers',
        'sandbox//stripe_invoices',
        'sandbox//stripe_subscriptions',
        'sandbox//sync_hubspot_company',
        'sandbox//sync_hubspot_contact',
        'sandbox//sync_hubspot_organization',
        'sandbox//sync_salesforce_account',
        'sandbox//telemetry_events',
        'sandbox//telemetry_example_map',
        'sandbox//time_spine',
        'sandbox//title_mappings',
        'sandbox//usage_metrics_daily',
        'sandbox//usage_metrics_daily_jobs_aggregated',
        'sandbox//user_activity_daily',
        'sandbox//user_attribution',
        'sandbox//user_attribution_dagster_u',
        'sandbox//user_organizations',
        'sandbox//web_attributed_conversions',
        'sandbox//website_visits_cloud',
        'sandbox//website_visits_dagster_university',
        'sandbox//website_visits_docs',
        'sandbox//website_visits_marketing',
        'sandbox//youtube_device_types',
        'sandbox//youtube_operating_system',
        'sandbox//youtube_playback_location_type',
        'sandbox//youtube_playlists',
        'sandbox//youtube_traffic_codes',
        'sandbox//youtube_video_views_overtime',
        'sandbox//youtube_videos',
        'sandbox//zoom_registrants',
        'sandbox//zoom_webinars',
        'sandbox/snapshots/hubspot_company_daily_snapshot',
        'sandbox/snapshots/hubspot_contact_daily_snapshot',
        'sandbox/snapshots/salesforce_accounts_daily_snapshot',
        'sandbox/snapshots/salesforce_opportunities_daily_snapshot',
        'scoutos_app_runs',
        'segment/dagster_cloud/accounts',
        'segment/dagster_cloud/identifies',
        'segment/dagster_cloud/pages',
        'segment/dagster_cloud/tracks',
        'segment/dagster_cloud/trial_start',
        'segment/dagster_cloud/users',
        'segment/dagster_docs/pages',
        'segment/dagster_io/hubspot_form_submit',
        'segment/dagster_io/identifies',
        'segment/dagster_io/pages',
        'segment/dagster_university/certificate_record_downloaded',
        'segment/dagster_university/course_landing_page',
        'segment/dagster_university/identifies',
        'segment/dagster_university/pages',
        'segment/dagster_university/quiz_start_page',
        'segment/dagster_university/signup',
        'segment/dagster_university/tracks',
        'segment/dagster_university/users',
        'segment/dagster_university/viewed_iframe',
        'shard1/public/alert_policies',
        'shard1/public/alerts',
        'shard1/public/asset_keys',
        'shard1/public/asset_materializations',
        'shard1/public/asset_observations',
        'shard1/public/event_logs_partitioned',
        'shard1/public/event_logs_view',
        'shard1/public/jobs',
        'shard1/public/notifications',
        'shard1/public/repository_locations_data',
        'shard1/public/run_tags',
        'shard1/public/runs',
        'slack/dagster/member_metrics',
        'sling/cloud_product/alert_policies',
        'sling/cloud_product/alerts',
        'sling/cloud_product/alerts_alert_policies_new',
        'sling/cloud_product/asset_keys',
        'sling/cloud_product/asset_materializations',
        'sling/cloud_product/asset_observations',
        'sling/cloud_product/catalog_views',
        'sling/cloud_product/customer_info',
        'sling/cloud_product/deployments',
        'sling/cloud_product/event_logs',
        'sling/cloud_product/jobs',
        'sling/cloud_product/notifications',
        'sling/cloud_product/onboarding_checklist',
        'sling/cloud_product/organizations',
        'sling/cloud_product/permissions',
        'sling/cloud_product/repository_locations_data',
        'sling/cloud_product/run_tags',
        'sling/cloud_product/runs',
        'sling/cloud_product/session_tokens',
        'sling/cloud_product/teams',
        'sling/cloud_product/teams_permissions',
        'sling/cloud_product/teams_users',
        'sling/cloud_product/user_events_counts',
        'sling/cloud_product/users',
        'sling/cloud_product/users_organizations',
        'sling/cloud_product/users_organizations_current_state_ids',
        'sling/cloud_product/users_permissions',
        'sling/cloud_product_shard1/alert_policies',
        'sling/cloud_product_shard1/alerts',
        'sling/cloud_product_shard1/asset_keys',
        'sling/cloud_product_shard1/asset_materializations',
        'sling/cloud_product_shard1/asset_observations',
        'sling/cloud_product_shard1/event_logs',
        'sling/cloud_product_shard1/jobs',
        'sling/cloud_product_shard1/notifications',
        'sling/cloud_product_shard1/repository_locations_data',
        'sling/cloud_product_shard1/run_tags',
        'sling/cloud_product_shard1/runs',
        'sling/cloud_product_shard1/user_events_counts',
        'stripe_pipeline/stripe/balance_transactions',
        'stripe_pipeline/stripe/charges',
        'stripe_pipeline/stripe/customers',
        'stripe_pipeline/stripe/invoice_line_items',
        'stripe_pipeline/stripe/invoices',
        'stripe_pipeline/stripe/plans',
        'stripe_pipeline/stripe/subscription_items',
        'stripe_pipeline/stripe/subscription_schedule_phases',
        'stripe_pipeline/stripe/subscription_schedules',
        'stripe_pipeline/stripe/subscriptions',
        'stripe_pipeline/stripe/subscriptions_metadata',
        'thinkific_courses',
        'thinkific_enrollments',
        'thinkific_users',
      ]),
      'name': 'dbt_analytics_core_job',
    }),
    dict({
      'asset_selection': list([
        'aws/dev/ext_common_room_activities',
        'aws/dev/ext_common_room_community_members',
        'aws/dev/ext_common_room_groups',
        'aws/dev/user_roles_ext',
        'aws/dev/workspace_staging_asset_checks_ext',
        'aws/dev/workspace_staging_assets_ext',
        'aws/dev/workspace_staging_external_repo_metadata_ext',
        'aws/dev/workspace_staging_jobs_ext',
        'aws/dev/workspace_staging_metadata_ext',
        'aws/dev/workspace_staging_partitions_ext',
        'aws/dev/workspace_staging_pipelines_ext',
        'aws/dev/workspace_staging_repo_metadata_ext',
        'aws/dev/workspace_staging_resources_ext',
        'aws/dev/workspace_staging_schedules_ext',
        'aws/dev/workspace_staging_sensors_ext',
        'aws/oss_telemetry/oss_telemetry_prod',
        'aws/oss_telemetry/oss_telemetry_prod_ext',
        'dlt/hubspot/companies',
        'dlt_pipelines_builds',
        'dlt_thinkific_course_reviews',
        'dlt_thinkific_courses',
        'dlt_thinkific_enrollments',
        'dlt_thinkific_users',
        'fivetran/bingads/account_history',
        'fivetran/bingads/ad_group_history',
        'fivetran/bingads/ad_group_performance_daily_report',
        'fivetran/bingads/ad_history',
        'fivetran/bingads/asset_group_attribute_history',
        'fivetran/bingads/asset_group_history',
        'fivetran/bingads/campaign_history',
        'fivetran/bingads/product_dimension_impression_performance_max_daily_report',
        'fivetran/bingads/product_dimension_impression_performance_max_hourly_report',
        'fivetran/bingads/product_dimension_performance_max_daily_report',
        'fivetran/bingads/product_dimension_performance_max_hourly_report',
        'fivetran/google_ads/account_stats',
        'fivetran/google_ads/ad_custom_parameter_history',
        'fivetran/google_ads/ad_group_bid_modifier_history',
        'fivetran/google_ads/ad_group_bidding_strategy_history',
        'fivetran/google_ads/ad_group_custom_parameter_history',
        'fivetran/google_ads/ad_group_history',
        'fivetran/google_ads/ad_group_label_history',
        'fivetran/google_ads/ad_group_stats',
        'fivetran/google_ads/ad_history',
        'fivetran/google_ads/ad_label_history',
        'fivetran/google_ads/ad_policy_topic_constraint_history',
        'fivetran/google_ads/ad_policy_topic_evidence_history',
        'fivetran/google_ads/ad_policy_topic_history',
        'fivetran/google_ads/ad_stats',
        'fivetran/google_ads/app_ad_history',
        'fivetran/google_ads/app_engagement_ad_history',
        'fivetran/google_ads/call_ad_history',
        'fivetran/google_ads/campaign_app_campaign_setting_history',
        'fivetran/google_ads/campaign_bid_modifier_history',
        'fivetran/google_ads/campaign_bidding_strategy_history',
        'fivetran/google_ads/campaign_budget_history',
        'fivetran/google_ads/campaign_dynamic_search_ads_setting_history',
        'fivetran/google_ads/campaign_geo_target_type_setting_history',
        'fivetran/google_ads/campaign_history',
        'fivetran/google_ads/campaign_hotel_setting_history',
        'fivetran/google_ads/campaign_label_history',
        'fivetran/google_ads/campaign_local_setting_history',
        'fivetran/google_ads/campaign_network_setting_history',
        'fivetran/google_ads/campaign_optimization_goal_setting_history',
        'fivetran/google_ads/campaign_real_time_bidding_setting_history',
        'fivetran/google_ads/campaign_shopping_setting_history',
        'fivetran/google_ads/campaign_stats',
        'fivetran/google_ads/campaign_targeting_setting_history',
        'fivetran/google_ads/campaign_tracking_setting_history',
        'fivetran/google_ads/demand_gen_carousel_ad_history',
        'fivetran/google_ads/demand_gen_multi_asset_ad_history',
        'fivetran/google_ads/demand_gen_product_ad_history',
        'fivetran/google_ads/display_upload_ad_history',
        'fivetran/google_ads/expanded_dynamic_search_ad_history',
        'fivetran/google_ads/expanded_text_ad_history',
        'fivetran/google_ads/hotel_ad_history',
        'fivetran/google_ads/image_ad_history',
        'fivetran/google_ads/lead_form_submission_data',
        'fivetran/google_ads/legacy_app_install_ad_history',
        'fivetran/google_ads/legacy_responsive_display_ad_history',
        'fivetran/google_ads/local_ad_history',
        'fivetran/google_ads/local_services_lead',
        'fivetran/google_ads/local_services_lead_conversations',
        'fivetran/google_ads/responsive_display_ad_history',
        'fivetran/google_ads/responsive_search_ad_history',
        'fivetran/google_ads/search_keyword_stats',
        'fivetran/google_ads/search_term_keyword_stats',
        'fivetran/google_ads/search_term_stats',
        'fivetran/google_ads/shopping_comparison_listing_ad_history',
        'fivetran/google_ads/shopping_product_ad_history',
        'fivetran/google_ads/shopping_smart_ad_history',
        'fivetran/google_ads/smart_campaign_ad_history',
        'fivetran/google_ads/text_ad_history',
        'fivetran/google_ads/video_ad_history',
        'fivetran/google_ads/video_responsive_ad_history',
        'fivetran/google_analytics_4/pages_path_report',
        'fivetran/google_analytics_4/pages_title_and_screen_class_report',
        'fivetran/google_analytics_4/properties',
        'fivetran/google_analytics_4/traffic_acquisition_session_default_channel_grouping_report',
        'fivetran/google_analytics_4/traffic_acquisition_session_source_medium_report',
        'fivetran/google_sheets/nb_sales_rep_quotas',
        'fivetran/google_sheets/sales_rep_quotas',
        'fivetran/hubspot/association_type',
        'fivetran/hubspot/company',
        'fivetran/hubspot/company_company',
        'fivetran/hubspot/contact',
        'fivetran/hubspot/contact_company',
        'fivetran/hubspot/contact_contact',
        'fivetran/hubspot/contact_form_submission',
        'fivetran/hubspot/form',
        'fivetran/hubspot/organizations',
        'fivetran/hubspot/organizations_to_company',
        'fivetran/hubspot/users',
        'fivetran/information_schema/columns',
        'fivetran/linkedin_ads/account_history',
        'fivetran/linkedin_ads/account_user_history',
        'fivetran/linkedin_ads/ad_analytics_by_campaign',
        'fivetran/linkedin_ads/ad_analytics_by_creative',
        'fivetran/linkedin_ads/campaign_group_history',
        'fivetran/linkedin_ads/campaign_history',
        'fivetran/linkedin_ads/creative_history',
        'fivetran/linkedin_ads/lead_form_response_multiple_choice_answers',
        'fivetran/linkedin_ads/sponsored_message_option',
        'fivetran/outreach/account',
        'fivetran/outreach/account_tag',
        'fivetran/outreach/active_step_mailing',
        'fivetran/outreach/active_step_task',
        'fivetran/outreach/data_connection',
        'fivetran/outreach/duty',
        'fivetran/outreach/email_address',
        'fivetran/outreach/event',
        'fivetran/outreach/mailing',
        'fivetran/outreach/mailing_recipient',
        'fivetran/outreach/mailing_reference',
        'fivetran/outreach/prospect',
        'fivetran/outreach/prospect_email',
        'fivetran/outreach/prospect_favorite',
        'fivetran/outreach/prospect_home_phone',
        'fivetran/outreach/prospect_mobile_phone',
        'fivetran/outreach/prospect_other_phone',
        'fivetran/outreach/prospect_tag',
        'fivetran/outreach/prospect_voip_phone',
        'fivetran/outreach/prospect_work_phone',
        'fivetran/outreach/sequence',
        'fivetran/outreach/sequence_state',
        'fivetran/outreach/sequence_step',
        'fivetran/outreach/sequence_tag',
        'fivetran/outreach/sequence_template',
        'fivetran/outreach/user_duty',
        'fivetran/outreach/user_email_recipients',
        'fivetran/outreach/user_team',
        'fivetran/outreach/users',
        'fivetran/reddit_ads/account_conversions_report',
        'fivetran/reddit_ads/account_report',
        'fivetran/reddit_ads/ad',
        'fivetran/reddit_ads/ad_conversions_report',
        'fivetran/reddit_ads/ad_group',
        'fivetran/reddit_ads/ad_group_conversions_report',
        'fivetran/reddit_ads/ad_group_report',
        'fivetran/reddit_ads/ad_report',
        'fivetran/reddit_ads/campaign',
        'fivetran/reddit_ads/campaign_report',
        'fivetran/reddit_ads/click_tracker',
        'fivetran/reddit_ads/pixel_partner_reference',
        'fivetran/reddit_ads/schedule',
        'fivetran/salesforce/account',
        'fivetran/salesforce/account_history',
        'fivetran/salesforce/account_ownership_c',
        'fivetran/salesforce/campaign',
        'fivetran/salesforce/campaign_member',
        'fivetran/salesforce/contact',
        'fivetran/salesforce/contract',
        'fivetran/salesforce/event',
        'fivetran/salesforce/leadfeederapp_website_visit_c',
        'fivetran/salesforce/opportunity',
        'fivetran/salesforce/opportunity_field_history',
        'fivetran/salesforce/opportunity_history',
        'fivetran/salesforce/opportunity_line_item',
        'fivetran/salesforce/organization_c',
        'fivetran/salesforce/partner',
        'fivetran/salesforce/product_2',
        'fivetran/salesforce/sales_cycle_c',
        'fivetran/salesforce/task',
        'fivetran/salesforce/user',
        'fivetran/salesforce/user_role',
        'fivetran/youtube_analytics/channel',
        'fivetran/youtube_analytics/channel_combined_a_2',
        'fivetran/youtube_analytics/playlist',
        'fivetran/youtube_analytics/playlist_combined_a_1',
        'fivetran/youtube_analytics/video',
        'fivetran/zoom/channel',
        'fivetran/zoom/meeting',
        'fivetran/zoom/meeting_participant',
        'fivetran/zoom/meeting_report',
        'fivetran/zoom/meeting_report_custom_key',
        'fivetran/zoom/meeting_report_tracking',
        'fivetran/zoom/user_custom_attribute',
        'fivetran/zoom/user_group',
        'fivetran/zoom/user_im_group',
        'fivetran/zoom/users',
        'fivetran/zoom/webinar',
        'fivetran/zoom/webinar_absentee',
        'fivetran/zoom/webinar_panelist',
        'fivetran/zoom/webinar_participant',
        'fivetran/zoom/webinar_poll',
        'fivetran/zoom/webinar_poll_question',
        'fivetran/zoom/webinar_poll_question_answer',
        'fivetran/zoom/webinar_poll_question_prompt',
        'fivetran/zoom/webinar_question_and_answer',
        'fivetran/zoom/webinar_question_and_answer_question',
        'fivetran/zoom/webinar_question_and_answer_question_detail',
        'fivetran/zoom/webinar_registrant',
        'fivetran/zoom/webinar_registrant_custom_question',
        'fivetran/zoom/webinar_report',
        'fivetran/zoom/webinar_report_custom_key',
        'fivetran/zoom/webinar_report_tracking',
        'fivetran/zoom/webinar_tracking_source',
        'gong/gong_data_cloud/conversation_contexts',
        'gong/gong_data_cloud/conversation_participants',
        'gong/gong_data_cloud/conversations',
        'gong/gong_data_cloud/emails',
        'gong/gong_data_cloud/meetings',
        'gong/gong_data_cloud/users',
        'hightouch_sync_hubspot_company',
        'hightouch_sync_hubspot_contact',
        'hightouch_sync_hubspot_organization',
        'hightouch_sync_salesforce_account',
        'hubspot_companies',
        'main/public/alert_policies',
        'main/public/alerts',
        'main/public/alerts_alert_policies_new',
        'main/public/asset_keys',
        'main/public/asset_materializations',
        'main/public/asset_observations',
        'main/public/catalog_views',
        'main/public/customer_info',
        'main/public/deployments',
        'main/public/event_logs_partitioned',
        'main/public/event_logs_view',
        'main/public/jobs',
        'main/public/notifications',
        'main/public/onboarding_checklist',
        'main/public/organizations',
        'main/public/permissions',
        'main/public/repository_locations_data',
        'main/public/run_tags',
        'main/public/runs',
        'main/public/serverless_agents',
        'main/public/session_tokens',
        'main/public/teams',
        'main/public/teams_permissions',
        'main/public/teams_users',
        'main/public/users',
        'main/public/users_organizations',
        'main/public/users_permissions',
        'pipelines_builds',
        'product_operations/insights/reporting_asset_materialization_metrics',
        'purina/oss_analytics/dagster_pypi_downloads',
        'pylon/pylon/pylon_issues',
        'sandbox//abm_activity_scoring',
        'sandbox//abm_company_activity',
        'sandbox//abm_company_intent_scores',
        'sandbox//abm_contact_activity',
        'sandbox//abm_contact_intent_scores',
        'sandbox//account_contract_activity',
        'sandbox//account_owner_changelog',
        'sandbox//account_source_changelog',
        'sandbox//accounts',
        'sandbox//accounts_by_day',
        'sandbox//ad_spend_by_day',
        'sandbox//adgroup_performance_by_date',
        'sandbox//arr_by_month',
        'sandbox//asset_check_executions',
        'sandbox//asset_event_metadata',
        'sandbox//asset_groups',
        'sandbox//attributed_conversions',
        'sandbox//base_graph_metrics',
        'sandbox//base_sales_cycles',
        'sandbox//base_step_metrics',
        'sandbox//bigquery_cost_metadata',
        'sandbox//bing_ad_group_stats',
        'sandbox//buildkite_builds',
        'sandbox//campaigns',
        'sandbox//cloud_product_alert_policies',
        'sandbox//cloud_product_alerts',
        'sandbox//cloud_product_asset_keys',
        'sandbox//cloud_product_asset_materializations',
        'sandbox//cloud_product_catalog_views',
        'sandbox//cloud_product_customer_info',
        'sandbox//cloud_product_deployments',
        'sandbox//cloud_product_event_logs',
        'sandbox//cloud_product_jobs',
        'sandbox//cloud_product_notifications',
        'sandbox//cloud_product_organizations',
        'sandbox//cloud_product_repository_locations_data',
        'sandbox//cloud_product_runs',
        'sandbox//cloud_product_session_tokens',
        'sandbox//cloud_product_teams_users',
        'sandbox//cloud_product_user_events_counts',
        'sandbox//cloud_product_user_organizations',
        'sandbox//cloud_product_user_roles',
        'sandbox//cloud_product_users',
        'sandbox//cloud_users',
        'sandbox//code_location_asset_checks',
        'sandbox//code_location_assets',
        'sandbox//code_location_external_repo_metadata',
        'sandbox//code_location_jobs',
        'sandbox//code_location_library_versions',
        'sandbox//code_location_metadata',
        'sandbox//code_location_partitions',
        'sandbox//code_location_pipelines',
        'sandbox//code_location_repo_metadata',
        'sandbox//code_location_resources',
        'sandbox//code_location_schedules',
        'sandbox//code_location_sensors',
        'sandbox//common_room_activities',
        'sandbox//common_room_community_members',
        'sandbox//common_room_groups',
        'sandbox//contacts',
        'sandbox//conversion_events',
        'sandbox//country_codes',
        'sandbox//credit_utilization',
        'sandbox//credit_utilization_forecast',
        'sandbox//current_credit_utilization',
        'sandbox//dagster_user_roles',
        'sandbox//deployment_insights_usage_daily',
        'sandbox//dim_accounts',
        'sandbox//dim_accounts_by_day',
        'sandbox//dim_campaigns',
        'sandbox//dim_contacts',
        'sandbox//dim_opportunities',
        'sandbox//dim_opportunities_by_day',
        'sandbox//dim_organizations',
        'sandbox//dim_segment_users',
        'sandbox//dim_users',
        'sandbox//education_course_reviews',
        'sandbox//education_courses',
        'sandbox//education_enrollments',
        'sandbox//education_users',
        'sandbox//education_web_attributed_conversions',
        'sandbox//event_score_mapping',
        'sandbox//excludable_email_domains',
        'sandbox//execution_time_metadata',
        'sandbox//fct_gong_meeting_participants',
        'sandbox//fct_gong_meetings',
        'sandbox//fct_outreach_mailings',
        'sandbox//fct_runs',
        'sandbox//fct_segment_cloud_page_visits',
        'sandbox//fct_segment_dagster_u_page_visits',
        'sandbox//fct_segment_docs_page_visits',
        'sandbox//fct_segment_web_page_visits',
        'sandbox//fct_steps',
        'sandbox//fct_zoom_webinar_registration',
        'sandbox//first_touch',
        'sandbox//first_user_web_session',
        'sandbox//form_fill_attribution',
        'sandbox//gong_conversation_participants',
        'sandbox//gong_conversations',
        'sandbox//gong_emails',
        'sandbox//gong_meetings',
        'sandbox//gong_users',
        'sandbox//google_ads_ad_group_stats',
        'sandbox//google_ads_ad_groups',
        'sandbox//google_ads_adgroup_stats',
        'sandbox//google_ads_campaign_stats',
        'sandbox//google_ads_campaigns',
        'sandbox//google_ads_campaigns_wo_ad_group_stats',
        'sandbox//google_analytics_page_report',
        'sandbox//google_analytics_traffic_session_default_group',
        'sandbox//google_analytics_traffic_session_source_medium_report',
        'sandbox//gtm_user_activity',
        'sandbox//gtm_user_attribution',
        'sandbox//gtm_user_lead_source',
        'sandbox//gtm_user_mappings',
        'sandbox//hubspot_companies',
        'sandbox//hubspot_contact_form_submissions',
        'sandbox//hubspot_contacts',
        'sandbox//hubspot_organizations',
        'sandbox//hubspot_source_drill_level_2_labels',
        'sandbox//insights_asset_materialization_metrics',
        'sandbox//instance_type_priority',
        'sandbox//int_sessionized_pageviews',
        'sandbox//int_sessions_aggregated',
        'sandbox//int_stripe_customer_invoices',
        'sandbox//int_users_stitched',
        'sandbox//linkedin_ads_daily_campaign',
        'sandbox//maps_alerts',
        'sandbox//maps_organizations',
        'sandbox//marketing_event_attendees',
        'sandbox//marketing_events',
        'sandbox//marketing_wbr_metrics_by_date',
        'sandbox//materialization_metadata',
        'sandbox//non_opportunity_stages',
        'sandbox//onboarding_events',
        'sandbox//opportunities',
        'sandbox//opportunities_by_campaign',
        'sandbox//opportunities_by_day',
        'sandbox//opportunity_fiscal_qtr_start_snapshots',
        'sandbox//opportunity_snapshots',
        'sandbox//opportunity_stages',
        'sandbox//opportunity_yield',
        'sandbox//org_activity_monthly',
        'sandbox//org_deployments_daily',
        'sandbox//org_info',
        'sandbox//organization_conversion_info',
        'sandbox//organization_library_versions',
        'sandbox//organization_library_versions_daily',
        'sandbox//organization_milestones',
        'sandbox//organization_usage_daily',
        'sandbox//organizations',
        'sandbox//oss_instance_events_daily',
        'sandbox//oss_instance_events_weekly',
        'sandbox//oss_instances_daily',
        'sandbox//outreach_accounts',
        'sandbox//outreach_events',
        'sandbox//outreach_mailings',
        'sandbox//outreach_prospects',
        'sandbox//outreach_sequences',
        'sandbox//product_engagement',
        'sandbox//pylon_issues',
        'sandbox//pypi_downloads_weekly',
        'sandbox//reddit_ads_ad_group_report',
        'sandbox//reddit_ads_ad_groups',
        'sandbox//reddit_ads_campaign_report',
        'sandbox//reddit_ads_campaigns',
        'sandbox//referrer_mapping',
        'sandbox//reporting_contract_info',
        'sandbox//sales_activities',
        'sandbox//sales_cycle_stage_activities',
        'sandbox//sales_cycle_stages',
        'sandbox//sales_cycles',
        'sandbox//salesforce_account_history',
        'sandbox//salesforce_accounts',
        'sandbox//salesforce_campaign_members',
        'sandbox//salesforce_campaigns',
        'sandbox//salesforce_contacts',
        'sandbox//salesforce_contracts',
        'sandbox//salesforce_events',
        'sandbox//salesforce_leaderfeeder_sessions',
        'sandbox//salesforce_opp_stage_mapping',
        'sandbox//salesforce_opportunities',
        'sandbox//salesforce_opportunity_history',
        'sandbox//salesforce_opportunity_line_item',
        'sandbox//salesforce_organizations',
        'sandbox//salesforce_partners',
        'sandbox//salesforce_tasks',
        'sandbox//salesforce_users',
        'sandbox//segment_cloud_identifies',
        'sandbox//segment_cloud_pages',
        'sandbox//segment_cloud_tracks',
        'sandbox//segment_cloud_users',
        'sandbox//segment_dagster_u_identifies',
        'sandbox//segment_dagster_u_pages',
        'sandbox//segment_dagster_u_sessions',
        'sandbox//segment_dagster_u_tracks',
        'sandbox//segment_dagster_u_users',
        'sandbox//segment_docs_pages',
        'sandbox//segment_web_hubspot_form_submits',
        'sandbox//segment_web_identifies',
        'sandbox//segment_web_pages',
        'sandbox//segment_web_sessions',
        'sandbox//self_serve_plan_type_monthly',
        'sandbox//self_serve_stripe_products',
        'sandbox//snapshot_hubspot_companies',
        'sandbox//snapshot_salesforce_accounts',
        'sandbox//snapshot_salesforce_opportunities',
        'sandbox//snowflake_cost_observation_metadata',
        'sandbox//stg_aws__code_location_asset_checks',
        'sandbox//stg_aws__code_location_assets',
        'sandbox//stg_aws__code_location_external_repo_metadata',
        'sandbox//stg_aws__code_location_jobs',
        'sandbox//stg_aws__code_location_metadata',
        'sandbox//stg_aws__code_location_partitions',
        'sandbox//stg_aws__code_location_pipelines',
        'sandbox//stg_aws__code_location_repo_metadata',
        'sandbox//stg_aws__code_location_resources',
        'sandbox//stg_aws__code_location_schedules',
        'sandbox//stg_aws__code_location_sensors',
        'sandbox//stg_aws__common_room_activities',
        'sandbox//stg_aws__common_room_community_members',
        'sandbox//stg_aws__common_room_groups',
        'sandbox//stg_aws__user_licensed_roles',
        'sandbox//stg_bing__ad_group_history',
        'sandbox//stg_bing__ad_group_performance_daily_report',
        'sandbox//stg_bing__campaign_history',
        'sandbox//stg_buildkite__builds',
        'sandbox//stg_cloud_product__alert_policies',
        'sandbox//stg_cloud_product__alerts',
        'sandbox//stg_cloud_product__alerts_alert_policies',
        'sandbox//stg_cloud_product__asset_keys',
        'sandbox//stg_cloud_product__asset_materializations',
        'sandbox//stg_cloud_product__asset_observations',
        'sandbox//stg_cloud_product__catalog_views',
        'sandbox//stg_cloud_product__customer_info',
        'sandbox//stg_cloud_product__deployments',
        'sandbox//stg_cloud_product__event_logs',
        'sandbox//stg_cloud_product__jobs',
        'sandbox//stg_cloud_product__notifications',
        'sandbox//stg_cloud_product__onboarding_checklist',
        'sandbox//stg_cloud_product__organizations',
        'sandbox//stg_cloud_product__permissions',
        'sandbox//stg_cloud_product__repository_locations_data',
        'sandbox//stg_cloud_product__run_tags',
        'sandbox//stg_cloud_product__runs',
        'sandbox//stg_cloud_product__session_tokens',
        'sandbox//stg_cloud_product__teams',
        'sandbox//stg_cloud_product__teams_permissions',
        'sandbox//stg_cloud_product__teams_users',
        'sandbox//stg_cloud_product__user_events_counts',
        'sandbox//stg_cloud_product__user_organizations',
        'sandbox//stg_cloud_product__users',
        'sandbox//stg_cloud_product__users_permissions',
        'sandbox//stg_gong__conversation_contexts',
        'sandbox//stg_gong__conversation_participants',
        'sandbox//stg_gong__conversations',
        'sandbox//stg_gong__emails',
        'sandbox//stg_gong__meetings',
        'sandbox//stg_gong__users',
        'sandbox//stg_google_ads__ad_group_stats',
        'sandbox//stg_google_ads__ad_groups',
        'sandbox//stg_google_ads__campaign_stats',
        'sandbox//stg_google_ads__campaigns',
        'sandbox//stg_google_analytics__page_report',
        'sandbox//stg_google_analytics__session_source_medium',
        'sandbox//stg_google_analytics__traffic_default_group',
        'sandbox//stg_google_sheets__nb_sales_rep_quotas',
        'sandbox//stg_google_sheets__sales_rep_quotas',
        'sandbox//stg_hubspot__company',
        'sandbox//stg_hubspot__contact_first_touch',
        'sandbox//stg_hubspot__contact_form_submissions',
        'sandbox//stg_hubspot__contact_lifecycle_changes',
        'sandbox//stg_hubspot__contact_web_touches',
        'sandbox//stg_hubspot__contacts',
        'sandbox//stg_hubspot__forms',
        'sandbox//stg_hubspot__organization',
        'sandbox//stg_insights__asset_materialization_metrics',
        'sandbox//stg_linkedin__ad_analytics_by_campaign',
        'sandbox//stg_linkedin__campaign_history',
        'sandbox//stg_outreach__account',
        'sandbox//stg_outreach__data_connection',
        'sandbox//stg_outreach__email_address',
        'sandbox//stg_outreach__event',
        'sandbox//stg_outreach__mailing',
        'sandbox//stg_outreach__prospect',
        'sandbox//stg_outreach__sequence',
        'sandbox//stg_pylon__pylon_issues',
        'sandbox//stg_pypi__weekly_downloads',
        'sandbox//stg_reddit_ads__ad_group',
        'sandbox//stg_reddit_ads__ad_group_report',
        'sandbox//stg_reddit_ads__campaign',
        'sandbox//stg_reddit_ads__campaign_report',
        'sandbox//stg_salesforce__account_history',
        'sandbox//stg_salesforce__accounts',
        'sandbox//stg_salesforce__campaign_members',
        'sandbox//stg_salesforce__campaigns',
        'sandbox//stg_salesforce__contacts',
        'sandbox//stg_salesforce__contracts',
        'sandbox//stg_salesforce__events',
        'sandbox//stg_salesforce__leadfeederapp_website_visit_c',
        'sandbox//stg_salesforce__opportunities',
        'sandbox//stg_salesforce__opportunity_history',
        'sandbox//stg_salesforce__opportunity_line_item',
        'sandbox//stg_salesforce__organizations',
        'sandbox//stg_salesforce__partners',
        'sandbox//stg_salesforce__product2',
        'sandbox//stg_salesforce__tasks',
        'sandbox//stg_salesforce__user_roles',
        'sandbox//stg_salesforce__users',
        'sandbox//stg_scout__queries',
        'sandbox//stg_segment_cloud__identifies',
        'sandbox//stg_segment_cloud__pages',
        'sandbox//stg_segment_cloud__tracks',
        'sandbox//stg_segment_cloud__trial_start',
        'sandbox//stg_segment_dagster_u__certificate_record_downloaded',
        'sandbox//stg_segment_dagster_u__course_landing_page',
        'sandbox//stg_segment_dagster_u__identifies',
        'sandbox//stg_segment_dagster_u__pages',
        'sandbox//stg_segment_dagster_u__quiz_start_page',
        'sandbox//stg_segment_dagster_u__signup',
        'sandbox//stg_segment_dagster_u__tracks',
        'sandbox//stg_segment_docs__pages',
        'sandbox//stg_segment_web__hubspot_form_submit',
        'sandbox//stg_segment_web__identifies',
        'sandbox//stg_segment_web__pages',
        'sandbox//stg_slack__member_metrics',
        'sandbox//stg_snapshot__hubspot_company',
        'sandbox//stg_snapshot__salesforce_account',
        'sandbox//stg_snapshot__salesforce_opportunities',
        'sandbox//stg_stripe__balance_transactions',
        'sandbox//stg_stripe__charges',
        'sandbox//stg_stripe__customers',
        'sandbox//stg_stripe__invoice_line_items',
        'sandbox//stg_stripe__invoices',
        'sandbox//stg_stripe__plans',
        'sandbox//stg_stripe__subscription_items',
        'sandbox//stg_stripe__subscription_schedule_phases',
        'sandbox//stg_stripe__subscription_schedules',
        'sandbox//stg_stripe__subscriptions',
        'sandbox//stg_stripe__subscriptions_metadata',
        'sandbox//stg_telemetry__events',
        'sandbox//stg_thinkific__course_reviews',
        'sandbox//stg_thinkific__courses',
        'sandbox//stg_thinkific__enrollments',
        'sandbox//stg_thinkific__users',
        'sandbox//stg_youtube__channel',
        'sandbox//stg_youtube__channel_combined',
        'sandbox//stg_youtube__playlist',
        'sandbox//stg_youtube__playlist_combined',
        'sandbox//stg_youtube__video',
        'sandbox//stg_zoom__webinar',
        'sandbox//stg_zoom__webinar_absentee',
        'sandbox//stg_zoom__webinar_participant',
        'sandbox//stg_zoom__webinar_registrant',
        'sandbox//stripe_customers',
        'sandbox//stripe_invoices',
        'sandbox//stripe_subscriptions',
        'sandbox//sync_hubspot_company',
        'sandbox//sync_hubspot_contact',
        'sandbox//sync_hubspot_organization',
        'sandbox//sync_salesforce_account',
        'sandbox//telemetry_events',
        'sandbox//telemetry_example_map',
        'sandbox//time_spine',
        'sandbox//title_mappings',
        'sandbox//usage_metrics_daily',
        'sandbox//usage_metrics_daily_jobs_aggregated',
        'sandbox//user_activity_daily',
        'sandbox//user_attribution',
        'sandbox//user_attribution_dagster_u',
        'sandbox//user_organizations',
        'sandbox//web_attributed_conversions',
        'sandbox//website_visits_cloud',
        'sandbox//website_visits_dagster_university',
        'sandbox//website_visits_docs',
        'sandbox//website_visits_marketing',
        'sandbox//youtube_device_types',
        'sandbox//youtube_operating_system',
        'sandbox//youtube_playback_location_type',
        'sandbox//youtube_playlists',
        'sandbox//youtube_traffic_codes',
        'sandbox//youtube_video_views_overtime',
        'sandbox//youtube_videos',
        'sandbox//zoom_registrants',
        'sandbox//zoom_webinars',
        'sandbox/snapshots/arr_by_month_daily_snapshot',
        'sandbox/snapshots/deployments_snapshot',
        'sandbox/snapshots/hubspot_company_daily_snapshot',
        'sandbox/snapshots/hubspot_contact_daily_snapshot',
        'sandbox/snapshots/organizations_snapshot',
        'sandbox/snapshots/salesforce_accounts_daily_snapshot',
        'sandbox/snapshots/salesforce_opportunities_daily_snapshot',
        'sandbox/snapshots/user_organizations_snapshot',
        'scoutos_app_runs',
        'segment/dagster_cloud/accounts',
        'segment/dagster_cloud/identifies',
        'segment/dagster_cloud/pages',
        'segment/dagster_cloud/tracks',
        'segment/dagster_cloud/trial_start',
        'segment/dagster_cloud/users',
        'segment/dagster_docs/pages',
        'segment/dagster_io/hubspot_form_submit',
        'segment/dagster_io/identifies',
        'segment/dagster_io/pages',
        'segment/dagster_university/certificate_record_downloaded',
        'segment/dagster_university/course_landing_page',
        'segment/dagster_university/identifies',
        'segment/dagster_university/pages',
        'segment/dagster_university/quiz_start_page',
        'segment/dagster_university/signup',
        'segment/dagster_university/tracks',
        'segment/dagster_university/users',
        'segment/dagster_university/viewed_iframe',
        'shard1/public/alert_policies',
        'shard1/public/alerts',
        'shard1/public/asset_keys',
        'shard1/public/asset_materializations',
        'shard1/public/asset_observations',
        'shard1/public/event_logs_partitioned',
        'shard1/public/event_logs_view',
        'shard1/public/jobs',
        'shard1/public/notifications',
        'shard1/public/repository_locations_data',
        'shard1/public/run_tags',
        'shard1/public/runs',
        'slack/dagster/member_metrics',
        'sling/cloud_product/alert_policies',
        'sling/cloud_product/alerts',
        'sling/cloud_product/alerts_alert_policies_new',
        'sling/cloud_product/asset_keys',
        'sling/cloud_product/asset_materializations',
        'sling/cloud_product/asset_observations',
        'sling/cloud_product/catalog_views',
        'sling/cloud_product/customer_info',
        'sling/cloud_product/deployments',
        'sling/cloud_product/event_logs',
        'sling/cloud_product/jobs',
        'sling/cloud_product/notifications',
        'sling/cloud_product/onboarding_checklist',
        'sling/cloud_product/organizations',
        'sling/cloud_product/permissions',
        'sling/cloud_product/repository_locations_data',
        'sling/cloud_product/run_tags',
        'sling/cloud_product/runs',
        'sling/cloud_product/session_tokens',
        'sling/cloud_product/teams',
        'sling/cloud_product/teams_permissions',
        'sling/cloud_product/teams_users',
        'sling/cloud_product/user_events_counts',
        'sling/cloud_product/users',
        'sling/cloud_product/users_organizations',
        'sling/cloud_product/users_organizations_current_state_ids',
        'sling/cloud_product/users_permissions',
        'sling/cloud_product_shard1/alert_policies',
        'sling/cloud_product_shard1/alerts',
        'sling/cloud_product_shard1/asset_keys',
        'sling/cloud_product_shard1/asset_materializations',
        'sling/cloud_product_shard1/asset_observations',
        'sling/cloud_product_shard1/event_logs',
        'sling/cloud_product_shard1/jobs',
        'sling/cloud_product_shard1/notifications',
        'sling/cloud_product_shard1/repository_locations_data',
        'sling/cloud_product_shard1/run_tags',
        'sling/cloud_product_shard1/runs',
        'sling/cloud_product_shard1/user_events_counts',
        'stripe_pipeline/stripe/balance_transactions',
        'stripe_pipeline/stripe/charges',
        'stripe_pipeline/stripe/customers',
        'stripe_pipeline/stripe/invoice_line_items',
        'stripe_pipeline/stripe/invoices',
        'stripe_pipeline/stripe/plans',
        'stripe_pipeline/stripe/subscription_items',
        'stripe_pipeline/stripe/subscription_schedule_phases',
        'stripe_pipeline/stripe/subscription_schedules',
        'stripe_pipeline/stripe/subscriptions',
        'stripe_pipeline/stripe/subscriptions_metadata',
        'thinkific_courses',
        'thinkific_enrollments',
        'thinkific_users',
      ]),
      'name': 'dbt_analytics_snapshot_job',
    }),
    dict({
      'asset_selection': list([
      ]),
      'name': 'drop_database_clones',
    }),
    dict({
      'asset_selection': list([
        'gong/gong_data_cloud/call_recordings',
        'gong/gong_data_cloud/call_transcripts',
        'gong/gong_data_cloud/calls',
        'gong/gong_data_cloud/conversation_contexts',
        'gong/gong_data_cloud/conversation_participants',
        'gong/gong_data_cloud/conversations',
        'gong/gong_data_cloud/users',
        'gong_calls_transcript_ai',
      ]),
      'name': 'gong_calls_transcript_job',
    }),
    dict({
      'asset_selection': list([
        'aws/dev/ext_common_room_activities',
        'aws/dev/ext_common_room_community_members',
        'aws/dev/ext_common_room_groups',
        'aws/dev/user_roles_ext',
        'aws/dev/workspace_staging_asset_checks_ext',
        'aws/dev/workspace_staging_assets_ext',
        'aws/dev/workspace_staging_external_repo_metadata_ext',
        'aws/dev/workspace_staging_jobs_ext',
        'aws/dev/workspace_staging_metadata_ext',
        'aws/dev/workspace_staging_partitions_ext',
        'aws/dev/workspace_staging_pipelines_ext',
        'aws/dev/workspace_staging_repo_metadata_ext',
        'aws/dev/workspace_staging_resources_ext',
        'aws/dev/workspace_staging_schedules_ext',
        'aws/dev/workspace_staging_sensors_ext',
        'aws/oss_telemetry/oss_telemetry_prod',
        'aws/oss_telemetry/oss_telemetry_prod_ext',
        'dlt/hubspot/companies',
        'dlt_pipelines_builds',
        'dlt_thinkific_course_reviews',
        'dlt_thinkific_courses',
        'dlt_thinkific_enrollments',
        'dlt_thinkific_users',
        'fivetran/bingads/account_history',
        'fivetran/bingads/ad_group_history',
        'fivetran/bingads/ad_group_performance_daily_report',
        'fivetran/bingads/ad_history',
        'fivetran/bingads/asset_group_attribute_history',
        'fivetran/bingads/asset_group_history',
        'fivetran/bingads/campaign_history',
        'fivetran/bingads/product_dimension_impression_performance_max_daily_report',
        'fivetran/bingads/product_dimension_impression_performance_max_hourly_report',
        'fivetran/bingads/product_dimension_performance_max_daily_report',
        'fivetran/bingads/product_dimension_performance_max_hourly_report',
        'fivetran/google_ads/account_stats',
        'fivetran/google_ads/ad_custom_parameter_history',
        'fivetran/google_ads/ad_group_bid_modifier_history',
        'fivetran/google_ads/ad_group_bidding_strategy_history',
        'fivetran/google_ads/ad_group_custom_parameter_history',
        'fivetran/google_ads/ad_group_history',
        'fivetran/google_ads/ad_group_label_history',
        'fivetran/google_ads/ad_group_stats',
        'fivetran/google_ads/ad_history',
        'fivetran/google_ads/ad_label_history',
        'fivetran/google_ads/ad_policy_topic_constraint_history',
        'fivetran/google_ads/ad_policy_topic_evidence_history',
        'fivetran/google_ads/ad_policy_topic_history',
        'fivetran/google_ads/ad_stats',
        'fivetran/google_ads/app_ad_history',
        'fivetran/google_ads/app_engagement_ad_history',
        'fivetran/google_ads/call_ad_history',
        'fivetran/google_ads/campaign_app_campaign_setting_history',
        'fivetran/google_ads/campaign_bid_modifier_history',
        'fivetran/google_ads/campaign_bidding_strategy_history',
        'fivetran/google_ads/campaign_budget_history',
        'fivetran/google_ads/campaign_dynamic_search_ads_setting_history',
        'fivetran/google_ads/campaign_geo_target_type_setting_history',
        'fivetran/google_ads/campaign_history',
        'fivetran/google_ads/campaign_hotel_setting_history',
        'fivetran/google_ads/campaign_label_history',
        'fivetran/google_ads/campaign_local_setting_history',
        'fivetran/google_ads/campaign_network_setting_history',
        'fivetran/google_ads/campaign_optimization_goal_setting_history',
        'fivetran/google_ads/campaign_real_time_bidding_setting_history',
        'fivetran/google_ads/campaign_shopping_setting_history',
        'fivetran/google_ads/campaign_stats',
        'fivetran/google_ads/campaign_targeting_setting_history',
        'fivetran/google_ads/campaign_tracking_setting_history',
        'fivetran/google_ads/demand_gen_carousel_ad_history',
        'fivetran/google_ads/demand_gen_multi_asset_ad_history',
        'fivetran/google_ads/demand_gen_product_ad_history',
        'fivetran/google_ads/display_upload_ad_history',
        'fivetran/google_ads/expanded_dynamic_search_ad_history',
        'fivetran/google_ads/expanded_text_ad_history',
        'fivetran/google_ads/hotel_ad_history',
        'fivetran/google_ads/image_ad_history',
        'fivetran/google_ads/lead_form_submission_data',
        'fivetran/google_ads/legacy_app_install_ad_history',
        'fivetran/google_ads/legacy_responsive_display_ad_history',
        'fivetran/google_ads/local_ad_history',
        'fivetran/google_ads/local_services_lead',
        'fivetran/google_ads/local_services_lead_conversations',
        'fivetran/google_ads/responsive_display_ad_history',
        'fivetran/google_ads/responsive_search_ad_history',
        'fivetran/google_ads/search_keyword_stats',
        'fivetran/google_ads/search_term_keyword_stats',
        'fivetran/google_ads/search_term_stats',
        'fivetran/google_ads/shopping_comparison_listing_ad_history',
        'fivetran/google_ads/shopping_product_ad_history',
        'fivetran/google_ads/shopping_smart_ad_history',
        'fivetran/google_ads/smart_campaign_ad_history',
        'fivetran/google_ads/text_ad_history',
        'fivetran/google_ads/video_ad_history',
        'fivetran/google_ads/video_responsive_ad_history',
        'fivetran/google_analytics_4/pages_path_report',
        'fivetran/google_analytics_4/pages_title_and_screen_class_report',
        'fivetran/google_analytics_4/properties',
        'fivetran/google_analytics_4/traffic_acquisition_session_default_channel_grouping_report',
        'fivetran/google_analytics_4/traffic_acquisition_session_source_medium_report',
        'fivetran/google_sheets/nb_sales_rep_quotas',
        'fivetran/google_sheets/sales_rep_quotas',
        'fivetran/hubspot/association_type',
        'fivetran/hubspot/company',
        'fivetran/hubspot/company_company',
        'fivetran/hubspot/contact',
        'fivetran/hubspot/contact_company',
        'fivetran/hubspot/contact_contact',
        'fivetran/hubspot/contact_form_submission',
        'fivetran/hubspot/form',
        'fivetran/hubspot/organizations',
        'fivetran/hubspot/organizations_to_company',
        'fivetran/hubspot/users',
        'fivetran/information_schema/columns',
        'fivetran/linkedin_ads/account_history',
        'fivetran/linkedin_ads/account_user_history',
        'fivetran/linkedin_ads/ad_analytics_by_campaign',
        'fivetran/linkedin_ads/ad_analytics_by_creative',
        'fivetran/linkedin_ads/campaign_group_history',
        'fivetran/linkedin_ads/campaign_history',
        'fivetran/linkedin_ads/creative_history',
        'fivetran/linkedin_ads/lead_form_response_multiple_choice_answers',
        'fivetran/linkedin_ads/sponsored_message_option',
        'fivetran/outreach/account',
        'fivetran/outreach/account_tag',
        'fivetran/outreach/active_step_mailing',
        'fivetran/outreach/active_step_task',
        'fivetran/outreach/data_connection',
        'fivetran/outreach/duty',
        'fivetran/outreach/email_address',
        'fivetran/outreach/event',
        'fivetran/outreach/mailing',
        'fivetran/outreach/mailing_recipient',
        'fivetran/outreach/mailing_reference',
        'fivetran/outreach/prospect',
        'fivetran/outreach/prospect_email',
        'fivetran/outreach/prospect_favorite',
        'fivetran/outreach/prospect_home_phone',
        'fivetran/outreach/prospect_mobile_phone',
        'fivetran/outreach/prospect_other_phone',
        'fivetran/outreach/prospect_tag',
        'fivetran/outreach/prospect_voip_phone',
        'fivetran/outreach/prospect_work_phone',
        'fivetran/outreach/sequence',
        'fivetran/outreach/sequence_state',
        'fivetran/outreach/sequence_step',
        'fivetran/outreach/sequence_tag',
        'fivetran/outreach/sequence_template',
        'fivetran/outreach/user_duty',
        'fivetran/outreach/user_email_recipients',
        'fivetran/outreach/user_team',
        'fivetran/outreach/users',
        'fivetran/reddit_ads/account_conversions_report',
        'fivetran/reddit_ads/account_report',
        'fivetran/reddit_ads/ad',
        'fivetran/reddit_ads/ad_conversions_report',
        'fivetran/reddit_ads/ad_group',
        'fivetran/reddit_ads/ad_group_conversions_report',
        'fivetran/reddit_ads/ad_group_report',
        'fivetran/reddit_ads/ad_report',
        'fivetran/reddit_ads/campaign',
        'fivetran/reddit_ads/campaign_report',
        'fivetran/reddit_ads/click_tracker',
        'fivetran/reddit_ads/pixel_partner_reference',
        'fivetran/reddit_ads/schedule',
        'fivetran/salesforce/account',
        'fivetran/salesforce/account_history',
        'fivetran/salesforce/account_ownership_c',
        'fivetran/salesforce/campaign',
        'fivetran/salesforce/campaign_member',
        'fivetran/salesforce/contact',
        'fivetran/salesforce/contract',
        'fivetran/salesforce/event',
        'fivetran/salesforce/leadfeederapp_website_visit_c',
        'fivetran/salesforce/opportunity',
        'fivetran/salesforce/opportunity_field_history',
        'fivetran/salesforce/opportunity_history',
        'fivetran/salesforce/opportunity_line_item',
        'fivetran/salesforce/organization_c',
        'fivetran/salesforce/partner',
        'fivetran/salesforce/product_2',
        'fivetran/salesforce/sales_cycle_c',
        'fivetran/salesforce/task',
        'fivetran/salesforce/user',
        'fivetran/salesforce/user_role',
        'fivetran/youtube_analytics/channel',
        'fivetran/youtube_analytics/channel_combined_a_2',
        'fivetran/youtube_analytics/playlist',
        'fivetran/youtube_analytics/playlist_combined_a_1',
        'fivetran/youtube_analytics/video',
        'fivetran/zoom/channel',
        'fivetran/zoom/meeting',
        'fivetran/zoom/meeting_participant',
        'fivetran/zoom/meeting_report',
        'fivetran/zoom/meeting_report_custom_key',
        'fivetran/zoom/meeting_report_tracking',
        'fivetran/zoom/user_custom_attribute',
        'fivetran/zoom/user_group',
        'fivetran/zoom/user_im_group',
        'fivetran/zoom/users',
        'fivetran/zoom/webinar',
        'fivetran/zoom/webinar_absentee',
        'fivetran/zoom/webinar_panelist',
        'fivetran/zoom/webinar_participant',
        'fivetran/zoom/webinar_poll',
        'fivetran/zoom/webinar_poll_question',
        'fivetran/zoom/webinar_poll_question_answer',
        'fivetran/zoom/webinar_poll_question_prompt',
        'fivetran/zoom/webinar_question_and_answer',
        'fivetran/zoom/webinar_question_and_answer_question',
        'fivetran/zoom/webinar_question_and_answer_question_detail',
        'fivetran/zoom/webinar_registrant',
        'fivetran/zoom/webinar_registrant_custom_question',
        'fivetran/zoom/webinar_report',
        'fivetran/zoom/webinar_report_custom_key',
        'fivetran/zoom/webinar_report_tracking',
        'fivetran/zoom/webinar_tracking_source',
        'gong/gong_data_cloud/conversation_contexts',
        'gong/gong_data_cloud/conversation_participants',
        'gong/gong_data_cloud/conversations',
        'gong/gong_data_cloud/emails',
        'gong/gong_data_cloud/meetings',
        'gong/gong_data_cloud/users',
        'hightouch_sync_hubspot_company',
        'hightouch_sync_hubspot_organization',
        'hubspot_companies',
        'main/public/alert_policies',
        'main/public/alerts',
        'main/public/alerts_alert_policies_new',
        'main/public/asset_keys',
        'main/public/asset_materializations',
        'main/public/asset_observations',
        'main/public/catalog_views',
        'main/public/customer_info',
        'main/public/deployments',
        'main/public/event_logs_partitioned',
        'main/public/event_logs_view',
        'main/public/jobs',
        'main/public/notifications',
        'main/public/onboarding_checklist',
        'main/public/organizations',
        'main/public/permissions',
        'main/public/repository_locations_data',
        'main/public/run_tags',
        'main/public/runs',
        'main/public/serverless_agents',
        'main/public/session_tokens',
        'main/public/teams',
        'main/public/teams_permissions',
        'main/public/teams_users',
        'main/public/users',
        'main/public/users_organizations',
        'main/public/users_permissions',
        'pipelines_builds',
        'product_operations/insights/reporting_asset_materialization_metrics',
        'purina/oss_analytics/dagster_pypi_downloads',
        'pylon/pylon/pylon_issues',
        'sandbox//abm_activity_scoring',
        'sandbox//abm_company_activity',
        'sandbox//abm_company_intent_scores',
        'sandbox//abm_contact_activity',
        'sandbox//abm_contact_intent_scores',
        'sandbox//account_contract_activity',
        'sandbox//account_owner_changelog',
        'sandbox//account_source_changelog',
        'sandbox//accounts',
        'sandbox//accounts_by_day',
        'sandbox//ad_spend_by_day',
        'sandbox//adgroup_performance_by_date',
        'sandbox//arr_by_month',
        'sandbox//asset_check_executions',
        'sandbox//asset_event_metadata',
        'sandbox//asset_groups',
        'sandbox//attributed_conversions',
        'sandbox//base_graph_metrics',
        'sandbox//base_sales_cycles',
        'sandbox//base_step_metrics',
        'sandbox//bigquery_cost_metadata',
        'sandbox//bing_ad_group_stats',
        'sandbox//buildkite_builds',
        'sandbox//campaigns',
        'sandbox//cloud_product_alert_policies',
        'sandbox//cloud_product_alerts',
        'sandbox//cloud_product_asset_keys',
        'sandbox//cloud_product_asset_materializations',
        'sandbox//cloud_product_catalog_views',
        'sandbox//cloud_product_customer_info',
        'sandbox//cloud_product_deployments',
        'sandbox//cloud_product_event_logs',
        'sandbox//cloud_product_jobs',
        'sandbox//cloud_product_notifications',
        'sandbox//cloud_product_organizations',
        'sandbox//cloud_product_repository_locations_data',
        'sandbox//cloud_product_runs',
        'sandbox//cloud_product_session_tokens',
        'sandbox//cloud_product_teams_users',
        'sandbox//cloud_product_user_events_counts',
        'sandbox//cloud_product_user_organizations',
        'sandbox//cloud_product_user_roles',
        'sandbox//cloud_product_users',
        'sandbox//cloud_users',
        'sandbox//code_location_asset_checks',
        'sandbox//code_location_assets',
        'sandbox//code_location_external_repo_metadata',
        'sandbox//code_location_jobs',
        'sandbox//code_location_library_versions',
        'sandbox//code_location_metadata',
        'sandbox//code_location_partitions',
        'sandbox//code_location_pipelines',
        'sandbox//code_location_repo_metadata',
        'sandbox//code_location_resources',
        'sandbox//code_location_schedules',
        'sandbox//code_location_sensors',
        'sandbox//common_room_activities',
        'sandbox//common_room_community_members',
        'sandbox//common_room_groups',
        'sandbox//contacts',
        'sandbox//conversion_events',
        'sandbox//country_codes',
        'sandbox//credit_utilization',
        'sandbox//credit_utilization_forecast',
        'sandbox//current_credit_utilization',
        'sandbox//dagster_user_roles',
        'sandbox//deployment_insights_usage_daily',
        'sandbox//dim_accounts',
        'sandbox//dim_accounts_by_day',
        'sandbox//dim_campaigns',
        'sandbox//dim_contacts',
        'sandbox//dim_opportunities',
        'sandbox//dim_opportunities_by_day',
        'sandbox//dim_organizations',
        'sandbox//dim_segment_users',
        'sandbox//dim_users',
        'sandbox//education_course_reviews',
        'sandbox//education_courses',
        'sandbox//education_enrollments',
        'sandbox//education_users',
        'sandbox//education_web_attributed_conversions',
        'sandbox//event_score_mapping',
        'sandbox//excludable_email_domains',
        'sandbox//execution_time_metadata',
        'sandbox//fct_gong_meeting_participants',
        'sandbox//fct_gong_meetings',
        'sandbox//fct_outreach_mailings',
        'sandbox//fct_runs',
        'sandbox//fct_segment_cloud_page_visits',
        'sandbox//fct_segment_dagster_u_page_visits',
        'sandbox//fct_segment_docs_page_visits',
        'sandbox//fct_segment_web_page_visits',
        'sandbox//fct_steps',
        'sandbox//fct_zoom_webinar_registration',
        'sandbox//first_touch',
        'sandbox//first_user_web_session',
        'sandbox//form_fill_attribution',
        'sandbox//gong_conversation_participants',
        'sandbox//gong_conversations',
        'sandbox//gong_emails',
        'sandbox//gong_meetings',
        'sandbox//gong_users',
        'sandbox//google_ads_ad_group_stats',
        'sandbox//google_ads_ad_groups',
        'sandbox//google_ads_adgroup_stats',
        'sandbox//google_ads_campaign_stats',
        'sandbox//google_ads_campaigns',
        'sandbox//google_ads_campaigns_wo_ad_group_stats',
        'sandbox//google_analytics_page_report',
        'sandbox//google_analytics_traffic_session_default_group',
        'sandbox//google_analytics_traffic_session_source_medium_report',
        'sandbox//gtm_user_activity',
        'sandbox//gtm_user_attribution',
        'sandbox//gtm_user_lead_source',
        'sandbox//gtm_user_mappings',
        'sandbox//hubspot_companies',
        'sandbox//hubspot_contact_form_submissions',
        'sandbox//hubspot_contacts',
        'sandbox//hubspot_organizations',
        'sandbox//hubspot_source_drill_level_2_labels',
        'sandbox//insights_asset_materialization_metrics',
        'sandbox//instance_type_priority',
        'sandbox//int_sessionized_pageviews',
        'sandbox//int_sessions_aggregated',
        'sandbox//int_stripe_customer_invoices',
        'sandbox//int_users_stitched',
        'sandbox//linkedin_ads_daily_campaign',
        'sandbox//maps_alerts',
        'sandbox//maps_organizations',
        'sandbox//marketing_event_attendees',
        'sandbox//marketing_events',
        'sandbox//marketing_wbr_metrics_by_date',
        'sandbox//materialization_metadata',
        'sandbox//non_opportunity_stages',
        'sandbox//onboarding_events',
        'sandbox//opportunities',
        'sandbox//opportunities_by_campaign',
        'sandbox//opportunities_by_day',
        'sandbox//opportunity_fiscal_qtr_start_snapshots',
        'sandbox//opportunity_snapshots',
        'sandbox//opportunity_stages',
        'sandbox//opportunity_yield',
        'sandbox//org_activity_monthly',
        'sandbox//org_deployments_daily',
        'sandbox//org_info',
        'sandbox//organization_conversion_info',
        'sandbox//organization_library_versions',
        'sandbox//organization_library_versions_daily',
        'sandbox//organization_milestones',
        'sandbox//organization_usage_daily',
        'sandbox//organizations',
        'sandbox//oss_instance_events_daily',
        'sandbox//oss_instance_events_weekly',
        'sandbox//oss_instances_daily',
        'sandbox//outreach_accounts',
        'sandbox//outreach_events',
        'sandbox//outreach_mailings',
        'sandbox//outreach_prospects',
        'sandbox//outreach_sequences',
        'sandbox//product_engagement',
        'sandbox//pylon_issues',
        'sandbox//pypi_downloads_weekly',
        'sandbox//reddit_ads_ad_group_report',
        'sandbox//reddit_ads_ad_groups',
        'sandbox//reddit_ads_campaign_report',
        'sandbox//reddit_ads_campaigns',
        'sandbox//referrer_mapping',
        'sandbox//reporting_contract_info',
        'sandbox//sales_activities',
        'sandbox//sales_cycle_stage_activities',
        'sandbox//sales_cycle_stages',
        'sandbox//sales_cycles',
        'sandbox//salesforce_account_history',
        'sandbox//salesforce_accounts',
        'sandbox//salesforce_campaign_members',
        'sandbox//salesforce_campaigns',
        'sandbox//salesforce_contacts',
        'sandbox//salesforce_contracts',
        'sandbox//salesforce_events',
        'sandbox//salesforce_leaderfeeder_sessions',
        'sandbox//salesforce_opp_stage_mapping',
        'sandbox//salesforce_opportunities',
        'sandbox//salesforce_opportunity_history',
        'sandbox//salesforce_opportunity_line_item',
        'sandbox//salesforce_organizations',
        'sandbox//salesforce_partners',
        'sandbox//salesforce_tasks',
        'sandbox//salesforce_users',
        'sandbox//segment_cloud_identifies',
        'sandbox//segment_cloud_pages',
        'sandbox//segment_cloud_tracks',
        'sandbox//segment_cloud_users',
        'sandbox//segment_dagster_u_identifies',
        'sandbox//segment_dagster_u_pages',
        'sandbox//segment_dagster_u_sessions',
        'sandbox//segment_dagster_u_tracks',
        'sandbox//segment_dagster_u_users',
        'sandbox//segment_docs_pages',
        'sandbox//segment_web_hubspot_form_submits',
        'sandbox//segment_web_identifies',
        'sandbox//segment_web_pages',
        'sandbox//segment_web_sessions',
        'sandbox//self_serve_plan_type_monthly',
        'sandbox//self_serve_stripe_products',
        'sandbox//snapshot_hubspot_companies',
        'sandbox//snapshot_salesforce_accounts',
        'sandbox//snapshot_salesforce_opportunities',
        'sandbox//snowflake_cost_observation_metadata',
        'sandbox//stg_aws__code_location_asset_checks',
        'sandbox//stg_aws__code_location_assets',
        'sandbox//stg_aws__code_location_external_repo_metadata',
        'sandbox//stg_aws__code_location_jobs',
        'sandbox//stg_aws__code_location_metadata',
        'sandbox//stg_aws__code_location_partitions',
        'sandbox//stg_aws__code_location_pipelines',
        'sandbox//stg_aws__code_location_repo_metadata',
        'sandbox//stg_aws__code_location_resources',
        'sandbox//stg_aws__code_location_schedules',
        'sandbox//stg_aws__code_location_sensors',
        'sandbox//stg_aws__common_room_activities',
        'sandbox//stg_aws__common_room_community_members',
        'sandbox//stg_aws__common_room_groups',
        'sandbox//stg_aws__user_licensed_roles',
        'sandbox//stg_bing__ad_group_history',
        'sandbox//stg_bing__ad_group_performance_daily_report',
        'sandbox//stg_bing__campaign_history',
        'sandbox//stg_buildkite__builds',
        'sandbox//stg_cloud_product__alert_policies',
        'sandbox//stg_cloud_product__alerts',
        'sandbox//stg_cloud_product__alerts_alert_policies',
        'sandbox//stg_cloud_product__asset_keys',
        'sandbox//stg_cloud_product__asset_materializations',
        'sandbox//stg_cloud_product__asset_observations',
        'sandbox//stg_cloud_product__catalog_views',
        'sandbox//stg_cloud_product__customer_info',
        'sandbox//stg_cloud_product__deployments',
        'sandbox//stg_cloud_product__event_logs',
        'sandbox//stg_cloud_product__jobs',
        'sandbox//stg_cloud_product__notifications',
        'sandbox//stg_cloud_product__onboarding_checklist',
        'sandbox//stg_cloud_product__organizations',
        'sandbox//stg_cloud_product__permissions',
        'sandbox//stg_cloud_product__repository_locations_data',
        'sandbox//stg_cloud_product__run_tags',
        'sandbox//stg_cloud_product__runs',
        'sandbox//stg_cloud_product__session_tokens',
        'sandbox//stg_cloud_product__teams',
        'sandbox//stg_cloud_product__teams_permissions',
        'sandbox//stg_cloud_product__teams_users',
        'sandbox//stg_cloud_product__user_events_counts',
        'sandbox//stg_cloud_product__user_organizations',
        'sandbox//stg_cloud_product__users',
        'sandbox//stg_cloud_product__users_permissions',
        'sandbox//stg_gong__conversation_contexts',
        'sandbox//stg_gong__conversation_participants',
        'sandbox//stg_gong__conversations',
        'sandbox//stg_gong__emails',
        'sandbox//stg_gong__meetings',
        'sandbox//stg_gong__users',
        'sandbox//stg_google_ads__ad_group_stats',
        'sandbox//stg_google_ads__ad_groups',
        'sandbox//stg_google_ads__campaign_stats',
        'sandbox//stg_google_ads__campaigns',
        'sandbox//stg_google_analytics__page_report',
        'sandbox//stg_google_analytics__session_source_medium',
        'sandbox//stg_google_analytics__traffic_default_group',
        'sandbox//stg_google_sheets__nb_sales_rep_quotas',
        'sandbox//stg_google_sheets__sales_rep_quotas',
        'sandbox//stg_hubspot__company',
        'sandbox//stg_hubspot__contact_first_touch',
        'sandbox//stg_hubspot__contact_form_submissions',
        'sandbox//stg_hubspot__contact_lifecycle_changes',
        'sandbox//stg_hubspot__contact_web_touches',
        'sandbox//stg_hubspot__contacts',
        'sandbox//stg_hubspot__forms',
        'sandbox//stg_hubspot__organization',
        'sandbox//stg_insights__asset_materialization_metrics',
        'sandbox//stg_linkedin__ad_analytics_by_campaign',
        'sandbox//stg_linkedin__campaign_history',
        'sandbox//stg_outreach__account',
        'sandbox//stg_outreach__data_connection',
        'sandbox//stg_outreach__email_address',
        'sandbox//stg_outreach__event',
        'sandbox//stg_outreach__mailing',
        'sandbox//stg_outreach__prospect',
        'sandbox//stg_outreach__sequence',
        'sandbox//stg_pylon__pylon_issues',
        'sandbox//stg_pypi__weekly_downloads',
        'sandbox//stg_reddit_ads__ad_group',
        'sandbox//stg_reddit_ads__ad_group_report',
        'sandbox//stg_reddit_ads__campaign',
        'sandbox//stg_reddit_ads__campaign_report',
        'sandbox//stg_salesforce__account_history',
        'sandbox//stg_salesforce__accounts',
        'sandbox//stg_salesforce__campaign_members',
        'sandbox//stg_salesforce__campaigns',
        'sandbox//stg_salesforce__contacts',
        'sandbox//stg_salesforce__contracts',
        'sandbox//stg_salesforce__events',
        'sandbox//stg_salesforce__leadfeederapp_website_visit_c',
        'sandbox//stg_salesforce__opportunities',
        'sandbox//stg_salesforce__opportunity_history',
        'sandbox//stg_salesforce__opportunity_line_item',
        'sandbox//stg_salesforce__organizations',
        'sandbox//stg_salesforce__partners',
        'sandbox//stg_salesforce__product2',
        'sandbox//stg_salesforce__tasks',
        'sandbox//stg_salesforce__user_roles',
        'sandbox//stg_salesforce__users',
        'sandbox//stg_scout__queries',
        'sandbox//stg_segment_cloud__identifies',
        'sandbox//stg_segment_cloud__pages',
        'sandbox//stg_segment_cloud__tracks',
        'sandbox//stg_segment_cloud__trial_start',
        'sandbox//stg_segment_dagster_u__certificate_record_downloaded',
        'sandbox//stg_segment_dagster_u__course_landing_page',
        'sandbox//stg_segment_dagster_u__identifies',
        'sandbox//stg_segment_dagster_u__pages',
        'sandbox//stg_segment_dagster_u__quiz_start_page',
        'sandbox//stg_segment_dagster_u__signup',
        'sandbox//stg_segment_dagster_u__tracks',
        'sandbox//stg_segment_docs__pages',
        'sandbox//stg_segment_web__hubspot_form_submit',
        'sandbox//stg_segment_web__identifies',
        'sandbox//stg_segment_web__pages',
        'sandbox//stg_slack__member_metrics',
        'sandbox//stg_snapshot__hubspot_company',
        'sandbox//stg_snapshot__salesforce_account',
        'sandbox//stg_snapshot__salesforce_opportunities',
        'sandbox//stg_stripe__balance_transactions',
        'sandbox//stg_stripe__charges',
        'sandbox//stg_stripe__customers',
        'sandbox//stg_stripe__invoice_line_items',
        'sandbox//stg_stripe__invoices',
        'sandbox//stg_stripe__plans',
        'sandbox//stg_stripe__subscription_items',
        'sandbox//stg_stripe__subscription_schedule_phases',
        'sandbox//stg_stripe__subscription_schedules',
        'sandbox//stg_stripe__subscriptions',
        'sandbox//stg_stripe__subscriptions_metadata',
        'sandbox//stg_telemetry__events',
        'sandbox//stg_thinkific__course_reviews',
        'sandbox//stg_thinkific__courses',
        'sandbox//stg_thinkific__enrollments',
        'sandbox//stg_thinkific__users',
        'sandbox//stg_youtube__channel',
        'sandbox//stg_youtube__channel_combined',
        'sandbox//stg_youtube__playlist',
        'sandbox//stg_youtube__playlist_combined',
        'sandbox//stg_youtube__video',
        'sandbox//stg_zoom__webinar',
        'sandbox//stg_zoom__webinar_absentee',
        'sandbox//stg_zoom__webinar_participant',
        'sandbox//stg_zoom__webinar_registrant',
        'sandbox//stripe_customers',
        'sandbox//stripe_invoices',
        'sandbox//stripe_subscriptions',
        'sandbox//sync_hubspot_company',
        'sandbox//sync_hubspot_contact',
        'sandbox//sync_hubspot_organization',
        'sandbox//sync_salesforce_account',
        'sandbox//telemetry_events',
        'sandbox//telemetry_example_map',
        'sandbox//time_spine',
        'sandbox//title_mappings',
        'sandbox//usage_metrics_daily',
        'sandbox//usage_metrics_daily_jobs_aggregated',
        'sandbox//user_activity_daily',
        'sandbox//user_attribution',
        'sandbox//user_attribution_dagster_u',
        'sandbox//user_organizations',
        'sandbox//web_attributed_conversions',
        'sandbox//website_visits_cloud',
        'sandbox//website_visits_dagster_university',
        'sandbox//website_visits_docs',
        'sandbox//website_visits_marketing',
        'sandbox//youtube_device_types',
        'sandbox//youtube_operating_system',
        'sandbox//youtube_playback_location_type',
        'sandbox//youtube_playlists',
        'sandbox//youtube_traffic_codes',
        'sandbox//youtube_video_views_overtime',
        'sandbox//youtube_videos',
        'sandbox//zoom_registrants',
        'sandbox//zoom_webinars',
        'sandbox/snapshots/hubspot_company_daily_snapshot',
        'sandbox/snapshots/hubspot_contact_daily_snapshot',
        'sandbox/snapshots/salesforce_accounts_daily_snapshot',
        'sandbox/snapshots/salesforce_opportunities_daily_snapshot',
        'scoutos_app_runs',
        'segment/dagster_cloud/accounts',
        'segment/dagster_cloud/identifies',
        'segment/dagster_cloud/pages',
        'segment/dagster_cloud/tracks',
        'segment/dagster_cloud/trial_start',
        'segment/dagster_cloud/users',
        'segment/dagster_docs/pages',
        'segment/dagster_io/hubspot_form_submit',
        'segment/dagster_io/identifies',
        'segment/dagster_io/pages',
        'segment/dagster_university/certificate_record_downloaded',
        'segment/dagster_university/course_landing_page',
        'segment/dagster_university/identifies',
        'segment/dagster_university/pages',
        'segment/dagster_university/quiz_start_page',
        'segment/dagster_university/signup',
        'segment/dagster_university/tracks',
        'segment/dagster_university/users',
        'segment/dagster_university/viewed_iframe',
        'shard1/public/alert_policies',
        'shard1/public/alerts',
        'shard1/public/asset_keys',
        'shard1/public/asset_materializations',
        'shard1/public/asset_observations',
        'shard1/public/event_logs_partitioned',
        'shard1/public/event_logs_view',
        'shard1/public/jobs',
        'shard1/public/notifications',
        'shard1/public/repository_locations_data',
        'shard1/public/run_tags',
        'shard1/public/runs',
        'slack/dagster/member_metrics',
        'sling/cloud_product/alert_policies',
        'sling/cloud_product/alerts',
        'sling/cloud_product/alerts_alert_policies_new',
        'sling/cloud_product/asset_keys',
        'sling/cloud_product/asset_materializations',
        'sling/cloud_product/asset_observations',
        'sling/cloud_product/catalog_views',
        'sling/cloud_product/customer_info',
        'sling/cloud_product/deployments',
        'sling/cloud_product/event_logs',
        'sling/cloud_product/jobs',
        'sling/cloud_product/notifications',
        'sling/cloud_product/onboarding_checklist',
        'sling/cloud_product/organizations',
        'sling/cloud_product/permissions',
        'sling/cloud_product/repository_locations_data',
        'sling/cloud_product/run_tags',
        'sling/cloud_product/runs',
        'sling/cloud_product/session_tokens',
        'sling/cloud_product/teams',
        'sling/cloud_product/teams_permissions',
        'sling/cloud_product/teams_users',
        'sling/cloud_product/user_events_counts',
        'sling/cloud_product/users',
        'sling/cloud_product/users_organizations',
        'sling/cloud_product/users_organizations_current_state_ids',
        'sling/cloud_product/users_permissions',
        'sling/cloud_product_shard1/alert_policies',
        'sling/cloud_product_shard1/alerts',
        'sling/cloud_product_shard1/asset_keys',
        'sling/cloud_product_shard1/asset_materializations',
        'sling/cloud_product_shard1/asset_observations',
        'sling/cloud_product_shard1/event_logs',
        'sling/cloud_product_shard1/jobs',
        'sling/cloud_product_shard1/notifications',
        'sling/cloud_product_shard1/repository_locations_data',
        'sling/cloud_product_shard1/run_tags',
        'sling/cloud_product_shard1/runs',
        'sling/cloud_product_shard1/user_events_counts',
        'stripe_pipeline/stripe/balance_transactions',
        'stripe_pipeline/stripe/charges',
        'stripe_pipeline/stripe/customers',
        'stripe_pipeline/stripe/invoice_line_items',
        'stripe_pipeline/stripe/invoices',
        'stripe_pipeline/stripe/plans',
        'stripe_pipeline/stripe/subscription_items',
        'stripe_pipeline/stripe/subscription_schedule_phases',
        'stripe_pipeline/stripe/subscription_schedules',
        'stripe_pipeline/stripe/subscriptions',
        'stripe_pipeline/stripe/subscriptions_metadata',
        'thinkific_courses',
        'thinkific_enrollments',
        'thinkific_users',
      ]),
      'name': 'hightouch_hubspot_syncs_job',
    }),
    dict({
      'asset_selection': list([
        'postgres/usage_metrics_daily_jobs_aggregated_reporting',
        'public/salesforce_contract_info',
        'sandbox//fct_runs',
        'sandbox//reporting_contract_info',
        'sandbox//salesforce_accounts',
        'sandbox//stg_cloud_product__organizations',
        'sandbox//usage_metrics_daily',
        'sandbox//usage_metrics_daily_jobs_aggregated',
      ]),
      'name': 'sling_egress_job',
    }),
    dict({
      'asset_selection': list([
        'org_performance_metrics',
        'sandbox//cloud_product_organizations',
        'sandbox//cloud_product_user_organizations',
        'sandbox//cloud_product_users',
        'sandbox//segment_cloud_tracks',
        'sandbox//segment_web_pages',
        'sandbox//segment_web_sessions',
        'sandbox//statsig_user_activity_daily',
        'sandbox//stg_cloud_product__organizations',
        'sandbox//time_spine',
        'user_activity_metrics',
      ]),
      'name': 'statsig_upload_job',
    }),
    dict({
      'asset_selection': list([
        'stripe_pipeline/stripe/balance_transactions',
        'stripe_pipeline/stripe/charges',
        'stripe_pipeline/stripe/coupons',
        'stripe_pipeline/stripe/customers',
        'stripe_pipeline/stripe/invoice_line_items',
        'stripe_pipeline/stripe/invoices',
        'stripe_pipeline/stripe/plans',
        'stripe_pipeline/stripe/subscription_items',
        'stripe_pipeline/stripe/subscription_schedule_phases',
        'stripe_pipeline/stripe/subscription_schedules',
        'stripe_pipeline/stripe/subscriptions',
        'stripe_pipeline/stripe/subscriptions_metadata',
      ]),
      'name': 'stripe_data_sync_observe_job',
    }),
    dict({
      'asset_selection': list([
        'github_issues',
      ]),
      'name': 'support_bot_job',
    }),
  ])
# ---
# name: test_schedules_snapshot[True]
  list([
    dict({
      'cron': '0 3 * * *',
      'job_name': 'aws_replication_job',
      'name': 'aws_replication_schedule',
    }),
    dict({
      'cron': '0 3 * * *',
      'job_name': 'database_clone_cleanup_job',
      'name': 'database_clone_cleanup_job_schedule',
    }),
    dict({
      'cron': '0 3 * * *',
      'job_name': 'dbt_analytics_core_job',
      'name': 'dbt_analytics_core_schedule',
    }),
    dict({
      'cron': '0 7 * * *',
      'job_name': 'dbt_analytics_snapshot_job',
      'name': 'dbt_analytics_snapshot_job_schedule',
    }),
    dict({
      'cron': '0 0 * * *',
      'job_name': 'gong_calls_transcript_job',
      'name': 'gong_calls_transcript_job_schedule',
    }),
    dict({
      'cron': '0 * * * *',
      'job_name': 'hightouch_hubspot_syncs_job',
      'name': 'hightouch_hubspot_syncs_schedule',
    }),
    dict({
      'cron': '0 3 * * *',
      'job_name': '__anonymous_asset_job_hightouch_syncs_schedule',
      'name': 'hightouch_syncs_schedule',
    }),
    dict({
      'cron': '0 3 * * *',
      'job_name': 'sling_egress_job',
      'name': 'sling_egress_job_schedule',
    }),
    dict({
      'cron': '0 1 * * *',
      'job_name': 'statsig_upload_job',
      'name': 'statsig_upload_schedule',
    }),
    dict({
      'cron': '0 0 * * *',
      'job_name': 'stripe_data_sync_observe_job',
      'name': 'stripe_data_sync_observe_job_schedule',
    }),
    dict({
      'cron': '@daily',
      'job_name': 'support_bot_job',
      'name': 'support_bot_schedule',
    }),
  ])
# ---
